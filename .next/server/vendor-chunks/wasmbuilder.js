"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wasmbuilder";
exports.ids = ["vendor-chunks/wasmbuilder"];
exports.modules = {

/***/ "(ssr)/./node_modules/wasmbuilder/build/main.cjs":
/*!*************************************************!*\
  !*** ./node_modules/wasmbuilder/build/main.cjs ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nfunction toNumber(n) {\n    return BigInt(n);\n}\n\nfunction isNegative(n) {\n    return n < 0n;\n}\n\nfunction isZero(n) {\n    return n === 0n;\n}\n\nfunction bitLength(n) {\n    if (isNegative(n)) {\n        return n.toString(2).length - 1; // discard the - sign\n    } else {\n        return n.toString(2).length;\n    }\n}\n\nfunction u32(n) {\n    const b = [];\n    const v = toNumber(n);\n    b.push(Number(v & 0xFFn));\n    b.push(Number(v >> 8n & 0xFFn));\n    b.push(Number(v >> 16n & 0xFFn));\n    b.push(Number(v >> 24n & 0xFFn));\n    return b;\n}\n\nfunction toUTF8Array(str) {\n    var utf8 = [];\n    for (var i=0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                0x80 | ((charcode>>12) & 0x3f),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\nfunction string(str) {\n    const bytes = toUTF8Array(str);\n    return [ ...varuint32(bytes.length), ...bytes ];\n}\n\nfunction varuint(n) {\n    const code = [];\n    let v = toNumber(n);\n    if (isNegative(v)) throw new Error(\"Number cannot be negative\");\n    while (!isZero(v)) {\n        code.push(Number(v & 0x7Fn));\n        v = v >> 7n;\n    }\n    if (code.length==0) code.push(0);\n    for (let i=0; i<code.length-1; i++) {\n        code[i] = code[i] | 0x80;\n    }\n    return code;\n}\n\nfunction varint(_n) {\n    let n, sign;\n    const bits = bitLength(_n);\n    if (_n<0) {\n        sign = true;\n        n = (1n << BigInt(bits)) + _n;\n    } else {\n        sign = false;\n        n = toNumber(_n);\n    }\n    const paddingBits = 7 - (bits % 7);\n\n    const padding = ((1n << BigInt(paddingBits)) - 1n) << BigInt(bits);\n    const paddingMask = ((1 << (7 - paddingBits))-1) | 0x80;\n\n    const code = varuint(n + padding);\n\n    if (!sign) {\n        code[code.length-1] = code[code.length-1] & paddingMask;\n    }\n\n    return code;\n}\n\nfunction varint32(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFn) throw new Error(\"Number too big\");\n    if (v > 0x7FFFFFFFn) v = v - 0x100000000n;\n    // bigInt(\"-80000000\", 16) as base10\n    if (v < -2147483648n) throw new Error(\"Number too small\");\n    return varint(v);\n}\n\nfunction varint64(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFFFFFFFFFn) throw new Error(\"Number too big\");\n    if (v > 0x7FFFFFFFFFFFFFFFn) v = v - 0x10000000000000000n;\n    // bigInt(\"-8000000000000000\", 16) as base10\n    if (v < -9223372036854775808n) throw new Error(\"Number too small\");\n    return varint(v);\n}\n\nfunction varuint32(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFn) throw new Error(\"Number too big\");\n    return varuint(v);\n}\n\nfunction toHexString(byteArray) {\n    return Array.from(byteArray, function(byte) {\n        return (\"0\" + (byte & 0xFF).toString(16)).slice(-2);\n    }).join(\"\");\n}\n\nfunction ident(text) {\n    if (typeof text === \"string\") {\n        let lines = text.split(\"\\n\");\n        for (let i=0; i<lines.length; i++) {\n            if (lines[i]) lines[i] = \"    \"+lines[i];\n        }\n        return lines.join(\"\\n\");\n    } else if (Array.isArray(text)) {\n        for (let i=0; i<text.length; i++ ) {\n            text[i] = ident(text[i]);\n        }\n        return text;\n    }\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass CodeBuilder {\n    constructor(func) {\n        this.func = func;\n        this.functionName = func.functionName;\n        this.module = func.module;\n    }\n\n    setLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [...valCode, 0x21, ...varuint32( idx )];\n    }\n\n    teeLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [...valCode, 0x22, ...varuint32( idx )];\n    }\n\n    getLocal(localName) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [0x20, ...varuint32( idx )];\n    }\n\n    i64_load8_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default\n        return [...idxCode, 0x30, align, ...varuint32(offset)];\n    }\n\n    i64_load8_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default\n        return [...idxCode, 0x31, align, ...varuint32(offset)];\n    }\n\n    i64_load16_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default\n        return [...idxCode, 0x32, align, ...varuint32(offset)];\n    }\n\n    i64_load16_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default\n        return [...idxCode, 0x33, align, ...varuint32(offset)];\n    }\n\n    i64_load32_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x34, align, ...varuint32(offset)];\n    }\n\n    i64_load32_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x35, align, ...varuint32(offset)];\n    }\n\n    i64_load(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 3 : _align;  // 64 bits alignment by default\n        return [...idxCode, 0x29, align, ...varuint32(offset)];\n    }\n\n\n    i64_store(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 3;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 3;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x37, align, ...varuint32(offset)];\n    }\n\n    i64_store32(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 2;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 2;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3e, align, ...varuint32(offset)];\n    }\n\n\n    i64_store16(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 1;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 1;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3d, align, ...varuint32(offset)];\n    }\n\n\n    i64_store8(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 0;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 0;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3c, align, ...varuint32(offset)];\n    }\n\n    i32_load8_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2c, align, ...varuint32(offset)];\n    }\n\n    i32_load8_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2d, align, ...varuint32(offset)];\n    }\n\n    i32_load16_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2e, align, ...varuint32(offset)];\n    }\n\n    i32_load16_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2f, align, ...varuint32(offset)];\n    }\n\n    i32_load(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x28, align, ...varuint32(offset)];\n    }\n\n    i32_store(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 2;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 2;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x36, align, ...varuint32(offset)];\n    }\n\n\n    i32_store16(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 1;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 1;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3b, align, ...varuint32(offset)];\n    }\n\n    i32_store8(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 0;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 0;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3a, align, ...varuint32(offset)];\n    }\n\n    call(fnName, ...args) {\n        const idx = this.module.functionIdxByName[fnName];\n        if (idx === undefined)\n            throw new Error(`Function not defined: Function: ${fnName}`);\n        return [...[].concat(...args), 0x10, ...varuint32(idx)];\n    }\n\n    call_indirect(fnIdx, ...args) {\n        return [...[].concat(...args), ...fnIdx, 0x11, 0, 0];\n    }\n\n    if(condCode, thenCode, elseCode) {\n        if (elseCode) {\n            return [...condCode, 0x04, 0x40, ...thenCode, 0x05, ...elseCode, 0x0b];\n        } else {\n            return [...condCode, 0x04, 0x40, ...thenCode, 0x0b];\n        }\n    }\n\n    block(bCode) { return [0x02, 0x40, ...bCode, 0x0b]; }\n    loop(...args) {\n        return [0x03, 0x40, ...[].concat(...[...args]), 0x0b];\n    }\n    br_if(relPath, condCode) { return [...condCode, 0x0d, ...varuint32(relPath)]; }\n    br(relPath) { return [0x0c, ...varuint32(relPath)]; }\n    ret(rCode) { return [...rCode, 0x0f]; }\n    drop(dCode) { return [...dCode,  0x1a]; }\n\n    i64_const(num) { return [0x42, ...varint64(num)]; }\n    i32_const(num) { return [0x41, ...varint32(num)]; }\n\n\n    i64_eqz(opcode) { return [...opcode, 0x50]; }\n    i64_eq(op1code, op2code) { return [...op1code, ...op2code, 0x51]; }\n    i64_ne(op1code, op2code) { return [...op1code, ...op2code, 0x52]; }\n    i64_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x53]; }\n    i64_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x54]; }\n    i64_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x55]; }\n    i64_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x56]; }\n    i64_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x57]; }\n    i64_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x58]; }\n    i64_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x59]; }\n    i64_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x5a]; }\n    i64_add(op1code, op2code) { return [...op1code, ...op2code, 0x7c]; }\n    i64_sub(op1code, op2code) { return [...op1code, ...op2code, 0x7d]; }\n    i64_mul(op1code, op2code) { return [...op1code, ...op2code, 0x7e]; }\n    i64_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x7f]; }\n    i64_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x80]; }\n    i64_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x81]; }\n    i64_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x82]; }\n    i64_and(op1code, op2code) { return [...op1code, ...op2code, 0x83]; }\n    i64_or(op1code, op2code) { return [...op1code, ...op2code, 0x84]; }\n    i64_xor(op1code, op2code) { return [...op1code, ...op2code, 0x85]; }\n    i64_shl(op1code, op2code) { return [...op1code, ...op2code, 0x86]; }\n    i64_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x87]; }\n    i64_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x88]; }\n    i64_extend_i32_s(op1code) { return [...op1code, 0xac]; }\n    i64_extend_i32_u(op1code) { return [...op1code, 0xad]; }\n    i64_clz(op1code) { return [...op1code, 0x79]; }\n    i64_ctz(op1code) { return [...op1code, 0x7a]; }\n\n    i32_eqz(op1code) { return [...op1code, 0x45]; }\n    i32_eq(op1code, op2code) { return [...op1code, ...op2code, 0x46]; }\n    i32_ne(op1code, op2code) { return [...op1code, ...op2code, 0x47]; }\n    i32_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x48]; }\n    i32_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x49]; }\n    i32_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x4a]; }\n    i32_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x4b]; }\n    i32_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x4c]; }\n    i32_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x4d]; }\n    i32_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x4e]; }\n    i32_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x4f]; }\n    i32_add(op1code, op2code) { return [...op1code, ...op2code, 0x6a]; }\n    i32_sub(op1code, op2code) { return [...op1code, ...op2code, 0x6b]; }\n    i32_mul(op1code, op2code) { return [...op1code, ...op2code, 0x6c]; }\n    i32_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x6d]; }\n    i32_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x6e]; }\n    i32_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x6f]; }\n    i32_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x70]; }\n    i32_and(op1code, op2code) { return [...op1code, ...op2code, 0x71]; }\n    i32_or(op1code, op2code) { return [...op1code, ...op2code, 0x72]; }\n    i32_xor(op1code, op2code) { return [...op1code, ...op2code, 0x73]; }\n    i32_shl(op1code, op2code) { return [...op1code, ...op2code, 0x74]; }\n    i32_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x75]; }\n    i32_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x76]; }\n    i32_rotl(op1code, op2code) { return [...op1code, ...op2code, 0x77]; }\n    i32_rotr(op1code, op2code) { return [...op1code, ...op2code, 0x78]; }\n    i32_wrap_i64(op1code) { return [...op1code, 0xa7]; }\n    i32_clz(op1code) { return [...op1code, 0x67]; }\n    i32_ctz(op1code) { return [...op1code, 0x68]; }\n\n    unreachable() { return [ 0x0 ]; }\n\n    current_memory() { return [ 0x3f, 0]; }\n\n    comment() { return []; }\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst typeCodes = {\n    \"i32\": 0x7f,\n    \"i64\": 0x7e,\n    \"f32\": 0x7d,\n    \"f64\": 0x7c,\n    \"anyfunc\": 0x70,\n    \"func\": 0x60,\n    \"emptyblock\": 0x40\n};\n\n\nclass FunctionBuilder {\n\n    constructor (module, fnName, fnType, moduleName, fieldName) {\n        if (fnType == \"import\") {\n            this.fnType = \"import\";\n            this.moduleName = moduleName;\n            this.fieldName = fieldName;\n        } else if (fnType == \"internal\") {\n            this.fnType = \"internal\";\n        } else {\n            throw new Error(\"Invalid function fnType: \" + fnType);\n        }\n        this.module = module;\n        this.fnName = fnName;\n        this.params = [];\n        this.locals = [];\n        this.localIdxByName = {};\n        this.code = [];\n        this.returnType = null;\n        this.nextLocal =0;\n    }\n\n    addParam(paramName, paramType) {\n        if (this.localIdxByName[paramName])\n            throw new Error(`param already exists. Function: ${this.fnName}, Param: ${paramName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[paramName] = idx;\n        this.params.push({\n            type: paramType\n        });\n    }\n\n    addLocal(localName, localType, _length) {\n        const length = _length || 1;\n        if (this.localIdxByName[localName])\n            throw new Error(`local already exists. Function: ${this.fnName}, Param: ${localName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[localName] = idx;\n        this.locals.push({\n            type: localType,\n            length: length\n        });\n    }\n\n    setReturnType(returnType) {\n        if (this.returnType)\n            throw new Error(`returnType already defined. Function: ${this.fnName}`);\n        this.returnType = returnType;\n    }\n\n    getSignature() {\n        const params = [...varuint32(this.params.length), ...this.params.map((p) => typeCodes[p.type])];\n        const returns = this.returnType ? [0x01, typeCodes[this.returnType]] : [0];\n        return [0x60, ...params, ...returns];\n    }\n\n    getBody() {\n        const locals = this.locals.map((l) => [\n            ...varuint32(l.length),\n            typeCodes[l.type]\n        ]);\n\n        const body = [\n            ...varuint32(this.locals.length),\n            ...[].concat(...locals),\n            ...this.code,\n            0x0b\n        ];\n        return [\n            ...varuint32(body.length),\n            ...body\n        ];\n    }\n\n    addCode(...code) {\n        this.code.push(...[].concat(...[...code]));\n    }\n\n    getCodeBuilder() {\n        return new CodeBuilder(this);\n    }\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass ModuleBuilder {\n\n    constructor() {\n        this.functions = [];\n        this.functionIdxByName = {};\n        this.nImportFunctions = 0;\n        this.nInternalFunctions =0;\n        this.memory = {\n            pagesSize: 1,\n            moduleName: \"env\",\n            fieldName: \"memory\"\n        };\n        this.free = 8;\n        this.datas = [];\n        this.modules = {};\n        this.exports = [];\n        this.functionsTable = [];\n    }\n\n    build() {\n        this._setSignatures();\n        return new Uint8Array([\n            ...u32(0x6d736100),\n            ...u32(1),\n            ...this._buildType(),\n            ...this._buildImport(),\n            ...this._buildFunctionDeclarations(),\n            ...this._buildFunctionsTable(),\n            ...this._buildExports(),\n            ...this._buildElements(),\n            ...this._buildCode(),\n            ...this._buildData()\n        ]);\n    }\n\n    addFunction(fnName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilder(this, fnName, \"internal\"));\n\n        this.nInternalFunctions++;\n        return this.functions[idx];\n    }\n\n    addIimportFunction(fnName, moduleName, _fieldName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        if (  (this.functions.length>0)\n            &&(this.functions[this.functions.length-1].type == \"internal\"))\n            throw new Error(`Import functions must be declared before internal: ${fnName}`);\n\n        let fieldName = _fieldName || fnName;\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilder(this, fnName, \"import\", moduleName, fieldName));\n\n        this.nImportFunctions ++;\n        return this.functions[idx];\n    }\n\n    setMemory(pagesSize, moduleName, fieldName) {\n        this.memory = {\n            pagesSize: pagesSize,\n            moduleName: moduleName || \"env\",\n            fieldName: fieldName || \"memory\"\n        };\n    }\n\n    exportFunction(fnName, _exportName) {\n        const exportName = _exportName || fnName;\n        if (typeof(this.functionIdxByName[fnName]) === \"undefined\")\n            throw new Error(`Function not defined: ${fnName}`);\n        const idx = this.functionIdxByName[fnName];\n        if (exportName != fnName) {\n            this.functionIdxByName[exportName] = idx;\n        }\n        this.exports.push({\n            exportName: exportName,\n            idx: idx\n        });\n    }\n\n    addFunctionToTable(fnName) {\n        const idx = this.functionIdxByName[fnName];\n        this.functionsTable.push(idx);\n    }\n\n    addData(offset, bytes) {\n        this.datas.push({\n            offset: offset,\n            bytes: bytes\n        });\n    }\n\n    alloc(a, b) {\n        let size;\n        let bytes;\n        if ((Array.isArray(a) || ArrayBuffer.isView(a)) && (typeof(b) === \"undefined\")) {\n            size = a.length;\n            bytes = a;\n        } else {\n            size = a;\n            bytes = b;\n        }\n        size = (((size-1)>>3) +1)<<3;       // Align to 64 bits.\n        const p = this.free;\n        this.free += size;\n        if (bytes) {\n            this.addData(p, bytes);\n        }\n        return p;\n    }\n\n    allocString(s) {\n        const encoder = new globalThis.TextEncoder();\n        const uint8array = encoder.encode(s);\n        return this.alloc([...uint8array, 0]);\n    }\n\n    _setSignatures() {\n        this.signatures = [];\n        const signatureIdxByName = {};\n        if (this.functionsTable.length>0) {\n            const signature = this.functions[this.functionsTable[0]].getSignature();\n            const signatureName = \"s_\"+toHexString(signature);\n            signatureIdxByName[signatureName] = 0;\n            this.signatures.push(signature);\n        }\n        for (let i=0; i<this.functions.length; i++) {\n            const signature = this.functions[i].getSignature();\n            const signatureName = \"s_\"+toHexString(signature);\n            if (typeof(signatureIdxByName[signatureName]) === \"undefined\") {\n                signatureIdxByName[signatureName] = this.signatures.length;\n                this.signatures.push(signature);\n            }\n\n            this.functions[i].signatureIdx = signatureIdxByName[signatureName];\n        }\n\n    }\n\n    _buildSection(sectionType, section) {\n        return [sectionType, ...varuint32(section.length), ...section];\n    }\n\n    _buildType() {\n        return this._buildSection(\n            0x01,\n            [\n                ...varuint32(this.signatures.length),\n                ...[].concat(...this.signatures)\n            ]\n        );\n    }\n\n    _buildImport() {\n        const entries = [];\n        entries.push([\n            ...string(this.memory.moduleName),\n            ...string(this.memory.fieldName),\n            0x02,\n            0x00,   //Flags no init valua\n            ...varuint32(this.memory.pagesSize)\n        ]);\n        for (let i=0; i< this.nImportFunctions; i++) {\n            entries.push([\n                ...string(this.functions[i].moduleName),\n                ...string(this.functions[i].fieldName),\n                0x00,\n                ...varuint32(this.functions[i].signatureIdx)\n            ]);\n        }\n        return this._buildSection(\n            0x02,\n            varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildFunctionDeclarations() {\n        const entries = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            entries.push(...varuint32(this.functions[i].signatureIdx));\n        }\n        return this._buildSection(\n            0x03,\n            [\n                ...varuint32(entries.length),\n                ...[...entries]\n            ]\n        );\n    }\n\n    _buildFunctionsTable() {\n        if (this.functionsTable.length == 0) return [];\n        return this._buildSection(\n            0x04,\n            [\n                ...varuint32(1),\n                0x70, 0, ...varuint32(this.functionsTable.length)\n            ]\n        );\n    }\n\n    _buildElements() {\n        if (this.functionsTable.length == 0) return [];\n        const entries = [];\n        for (let i=0; i<this.functionsTable.length; i++) {\n            entries.push(...varuint32(this.functionsTable[i]));\n        }\n        return this._buildSection(\n            0x09,\n            [\n                ...varuint32(1),      // 1 entry\n                ...varuint32(0),      // Table (0 in MVP)\n                0x41,                       // offset 0\n                ...varint32(0),\n                0x0b,\n                ...varuint32(this.functionsTable.length), // Number of elements\n                ...[...entries]\n            ]\n        );\n    }\n\n    _buildExports() {\n        const entries = [];\n        for (let i=0; i< this.exports.length; i++) {\n            entries.push([\n                ...string(this.exports[i].exportName),\n                0x00,\n                ...varuint32(this.exports[i].idx)\n            ]);\n        }\n        return this._buildSection(\n            0x07,\n            varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildCode() {\n        const entries = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            entries.push(this.functions[i].getBody());\n        }\n        return this._buildSection(\n            0x0a,\n            varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildData() {\n        const entries = [];\n        entries.push([\n            0x00,\n            0x41,\n            0x00,\n            0x0b,\n            0x04,\n            ...u32(this.free)\n        ]);\n        for (let i=0; i< this.datas.length; i++) {\n            entries.push([\n                0x00,\n                0x41,\n                ...varint32(this.datas[i].offset),\n                0x0b,\n                ...varuint32(this.datas[i].bytes.length),\n                ...this.datas[i].bytes,\n            ]);\n        }\n        return this._buildSection(\n            0x0b,\n            varuint32(entries.length).concat(...entries)\n        );\n    }\n\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass CodeBuilderWat {\n    constructor(func) {\n        this.func = func;\n        this.functionName = func.functionName;\n        this.module = func.module;\n    }\n\n    setLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [valCode, `set_local $${localName}`];\n    }\n\n    teeLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [valCode, `tee_local $${localName}`];\n    }\n\n    getLocal(localName) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return `get_local $${localName}`;\n    }\n\n    genLoad(inst, def_align, idxCode, _offset, _align) {\n        let S = inst;\n        const offset = _offset || 0;\n        if (offset>0) S += ` offset=${offset}`;\n        const align = (_align === undefined) ? def_align : _align;  // 8 bits alignment by default\n        if (align!=def_align) S += ` align=${1 << align}`;\n        return [idxCode, S];\n    }\n\n\n    genStore(inst, def_align, idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (typeof _align === \"undefined\") {\n            offset = 0;\n            align = def_align;\n            codeVal = _offset;\n        } else if (typeof _codeVal === \"undefined\") {\n            offset = _offset;\n            align = def_align;\n            codeVal = _align;\n        } else {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        let S = inst;\n        if (offset>0) S += ` offset=${offset}`;\n        if (align!=def_align) S += ` align=${1 << align}`;\n        return [idxCode, codeVal, S];\n    }\n\n    i64_load8_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load8_s\", 0, idxCode, _offset, _align);\n    }\n\n    i64_load8_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load8_u\", 0, idxCode, _offset, _align);\n    }\n\n    i64_load16_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load16_s\", 1,idxCode, _offset, _align);\n    }\n\n    i64_load16_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load16_u\", 1, idxCode, _offset, _align);\n    }\n\n    i64_load32_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load32_s\", 2, idxCode, _offset, _align);\n    }\n\n    i64_load32_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load32_u\", 2, idxCode, _offset, _align);\n    }\n\n    i64_load(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load\", 3, idxCode, _offset, _align);\n    }\n\n\n    i64_store(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store\", 3, idxCode, _offset, _align, _codeVal);\n    }\n\n    i64_store32(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store32\", 2, idxCode, _offset, _align, _codeVal);\n    }\n\n    i64_store16(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store16\", 1, idxCode, _offset, _align, _codeVal);\n    }\n\n    i64_store8(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store8\", 0, idxCode, _offset, _align, _codeVal);\n    }\n\n    i32_load8_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load8_s\", 0, idxCode, _offset, _align);\n    }\n\n    i32_load8_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load8_u\", 0, idxCode, _offset, _align);\n    }\n\n    i32_load16_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load16_s\", 1, idxCode, _offset, _align);\n    }\n\n    i32_load16_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load16_u\", 1, idxCode, _offset, _align);\n    }\n\n    i32_load(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load\", 2, idxCode, _offset, _align);\n    }\n\n    i32_store(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i32.store\", 2, idxCode, _offset, _align, _codeVal);\n    }\n\n    i32_store16(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i32.store16\", 1, idxCode, _offset, _align, _codeVal);\n    }\n\n    i32_store8(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i32.store8\", 0, idxCode, _offset, _align, _codeVal);\n    }\n\n    call(fnName, ...args) {\n        const idx = this.module.functionIdxByName[fnName];\n        if (idx === undefined)\n            throw new Error(`Function not defined: Function: ${fnName}`);\n        return [args, `call $${fnName}`];\n    }\n\n    call_indirect(fnIdx, ...args) {\n        return [args, fnIdx, \"call_indirect (type 0)\"];\n    }\n\n    if(condCode, thenCode, elseCode) {\n        if (elseCode) {\n            return [condCode, \"if\", ident(thenCode), \"else\", ident(elseCode), \"end\"];\n        } else {\n            return [condCode, \"if\", ident(thenCode), \"end\"];\n        }\n    }\n\n    block(bCode) { return [\"block\", ident(bCode), \"end\"]; }\n    loop(...args) { return [\"loop\", ident(args), \"end\"]; }\n    br_if(relPath, condCode) { return [condCode, `br_if ${relPath}`]; }\n    br(relPath) { return `br ${relPath}`; }\n    ret(rCode) { return [rCode, \"return\"]; }\n    drop(dCode) { return [dCode,  \"drop\"]; }\n\n    i64_const(num) { return `i64.const ${num}`; }\n    i32_const(num) { return `i32.const ${num}`; }\n\n    i64_eqz(opcode) { return [opcode, \"i64.eqz\"]; }\n    i64_eq(op1code, op2code) { return [op1code, op2code, \"i64.eq\"]; }\n    i64_ne(op1code, op2code) { return [op1code, op2code, \"i64.ne\"]; }\n    i64_lt_s(op1code, op2code) { return [op1code, op2code, \"i64.lt_s\"]; }\n    i64_lt_u(op1code, op2code) { return [op1code, op2code, \"i64.lt_u\"]; }\n    i64_gt_s(op1code, op2code) { return [op1code, op2code, \"i64.gt_s\"]; }\n    i64_gt_u(op1code, op2code) { return [op1code, op2code, \"i64.gt_u\"]; }\n    i64_le_s(op1code, op2code) { return [op1code, op2code, \"i64.le_s\"]; }\n    i64_le_u(op1code, op2code) { return [op1code, op2code, \"i64.le_u\"]; }\n    i64_ge_s(op1code, op2code) { return [op1code, op2code, \"i64.ge_s\"]; }\n    i64_ge_u(op1code, op2code) { return [op1code, op2code, \"i64.ge_u\"]; }\n    i64_add(op1code, op2code) { return [op1code, op2code, \"i64.add\"]; }\n    i64_sub(op1code, op2code) { return [op1code, op2code, \"i64.sub\"]; }\n    i64_mul(op1code, op2code) { return [op1code, op2code, \"i64.mul\"]; }\n    i64_div_s(op1code, op2code) { return [op1code, op2code, \"i64.div_s\"]; }\n    i64_div_u(op1code, op2code) { return [op1code, op2code, \"i64.div_u\"]; }\n    i64_rem_s(op1code, op2code) { return [op1code, op2code, \"i64.rem_s\"]; }\n    i64_rem_u(op1code, op2code) { return [op1code, op2code, \"i64.rem_u\"]; }\n    i64_and(op1code, op2code) { return [op1code, op2code, \"i64.and\"]; }\n    i64_or(op1code, op2code) { return [op1code, op2code, \"i64.or\"]; }\n    i64_xor(op1code, op2code) { return [op1code, op2code, \"i64.xor\"]; }\n    i64_shl(op1code, op2code) { return [op1code, op2code, \"i64.shl\"]; }\n    i64_shr_s(op1code, op2code) { return [op1code, op2code, \"i64.shr_s\"]; }\n    i64_shr_u(op1code, op2code) { return [op1code, op2code, \"i64.shr_u\"]; }\n    i64_extend_i32_s(op1code) { return [op1code, \"i64.extend_s/i32\"]; }\n    i64_extend_i32_u(op1code) { return [op1code, \"i64.extend_u/i32\"]; }\n\n\n    i32_eqz(op1code) { return [op1code, \"i32.eqz\"]; }\n    i32_eq(op1code, op2code) { return [op1code, op2code, \"i32.eq\"]; }\n    i32_ne(op1code, op2code) { return [op1code, op2code, \"i32.ne\"]; }\n    i32_lt_s(op1code, op2code) { return [op1code, op2code, \"i32.lt_s\"]; }\n    i32_lt_u(op1code, op2code) { return [op1code, op2code, \"i32.lt_u\"]; }\n    i32_gt_s(op1code, op2code) { return [op1code, op2code, \"i32.gt_s\"]; }\n    i32_gt_u(op1code, op2code) { return [op1code, op2code, \"i32.gt_u\"]; }\n    i32_le_s(op1code, op2code) { return [op1code, op2code, \"i32.le_s\"]; }\n    i32_le_u(op1code, op2code) { return [op1code, op2code, \"i32.le_u\"]; }\n    i32_ge_s(op1code, op2code) { return [op1code, op2code, \"i32.ge_s\"]; }\n    i32_ge_u(op1code, op2code) { return [op1code, op2code, \"i32.ge_u\"]; }\n    i32_add(op1code, op2code) { return [op1code, op2code, \"i32.add\"]; }\n    i32_sub(op1code, op2code) { return [op1code, op2code, \"i32.sub\"]; }\n    i32_mul(op1code, op2code) { return [op1code, op2code, \"i32.mul\"]; }\n    i32_div_s(op1code, op2code) { return [op1code, op2code, \"i32.div_s\"]; }\n    i32_div_u(op1code, op2code) { return [op1code, op2code, \"i32.div_u\"]; }\n    i32_rem_s(op1code, op2code) { return [op1code, op2code, \"i32.rem_s\"]; }\n    i32_rem_u(op1code, op2code) { return [op1code, op2code, \"i32.rem_u\"]; }\n    i32_and(op1code, op2code) { return [op1code, op2code, \"i32.and\"]; }\n    i32_or(op1code, op2code) { return [op1code, op2code, \"i32.or\"]; }\n    i32_xor(op1code, op2code) { return [op1code, op2code, \"i32.xor\"]; }\n    i32_shl(op1code, op2code) { return [op1code, op2code, \"i32.shl\"]; }\n    i32_shr_s(op1code, op2code) { return [op1code, op2code, \"i32.shr_s\"]; }\n    i32_shr_u(op1code, op2code) { return [op1code, op2code, \"i32.shr_u\"]; }\n    i32_rotl(op1code, op2code) { return [op1code, op2code, \"i32.rotl\"]; }\n    i32_rotr(op1code, op2code) { return [op1code, op2code, \"i32.rotr\"]; }\n    i32_wrap_i64(op1code) { return [op1code, \"i32.wrap/i64\"]; }\n\n    ureachable() { return \"unreachable\"; }\n\n    current_memory() { return \"current_memory\"; }\n\n    comment(c) { return \";; \" + c; }\n\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass FunctionBuilderWat {\n\n    constructor (module, fnName, fnType, moduleName, fieldName) {\n        if (fnType == \"import\") {\n            this.fnType = \"import\";\n            this.moduleName = moduleName;\n            this.fieldName = fieldName;\n        } else if (fnType == \"internal\") {\n            this.fnType = \"internal\";\n            this.comment = moduleName;\n        } else {\n            throw new Error(\"Invalid function fnType: \" + fnType);\n        }\n        this.module = module;\n        this.fnName = fnName;\n        this.params = [];\n        this.locals = [];\n        this.localIdxByName = {};\n        this.code = [];\n        this.returnType = null;\n        this.nextLocal =0;\n    }\n\n    addParam(paramName, paramType) {\n        if (this.localIdxByName[paramName])\n            throw new Error(`param already exists. Function: ${this.fnName}, Param: ${paramName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[paramName] = idx;\n        this.params.push({\n            type: paramType,\n            name: paramName\n        });\n    }\n\n    addLocal(localName, localType, _length) {\n        if ((typeof _length != \"undefined\") && (_length != 1)) {\n            throw new Error(\"Locals greater than 1 not implemented\");\n        }\n        if (this.localIdxByName[localName])\n            throw new Error(`local already exists. Function: ${this.fnName}, Param: ${localName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[localName] = idx;\n        this.locals.push({\n            type: localType,\n            name: localName,\n        });\n    }\n\n    setReturnType(returnType) {\n        if (this.returnType)\n            throw new Error(`returnType already defined. Function: ${this.fnName}`);\n        this.returnType = returnType;\n    }\n\n    getSignature() {\n        let p = \"\";\n        for (let i=0; i<this.params.length; i++) {\n            if (i==0) p += \" (param\";\n            p += \" \" + this.params[i].type;\n        }\n        if (p!=\"\") p+= \")\";\n        let r = \"\";\n        if (this.returnType) {\n            r += ` (result ${this.returnType})`;\n        }\n        return `(type $${this.getSignatureName()} (func ${p}${r}))`;\n    }\n\n    getSignatureName() {\n        let s = \"_sig_\";\n        for (let i=0; i<this.params.length; i++) {\n            s += this.params[i].type;\n        }\n        if (this.returnType) {\n            s+=\"r\"+this.returnType;\n        }\n        return s;\n    }\n\n    getBody() {\n        const src = [];\n\n        for (let i=0; i<this.params.length; i++) {\n            src.push(` (param $${this.params[i].name} ${this.params[i].type})`);\n        }\n        if (this.returnType) {\n            src.push(`(result ${this.returnType})`);\n        }\n        for (let i=0; i<this.locals.length; i++) {\n            src.push(` (local $${this.locals[i].name} ${this.locals[i].type})`);\n        }\n        src.push(this.code);\n\n        let Ss;\n        if (this.comment) {\n            Ss = this.comment.split(\"\\n\");\n            for (let i=0; i<Ss.length; i++) {\n                Ss[i] = \";; \" + Ss[i];\n            }\n        } else {\n            Ss = [];\n        }\n\n        return [\n            ...Ss,\n            `(func $${this.fnName} (type $${this.getSignatureName()})`,\n            ident(src),\n            \")\"\n        ];\n\n    }\n\n    addCode(...code) {\n        this.code.push(code);\n    }\n\n    getCodeBuilder() {\n        return new CodeBuilderWat(this);\n    }\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nclass ModuleBuilderWat {\n\n    constructor() {\n        this.functions = [];\n        this.functionIdxByName = {};\n        this.nImportFunctions = 0;\n        this.nInternalFunctions =0;\n        this.memory = {\n            pagesSize: 1,\n            moduleName: \"env\",\n            fieldName: \"memory\"\n        };\n        this.free = 8;\n        this.datas = [];\n        this.modules = {};\n        this.exports = [];\n        this.functionsTable = [];\n    }\n\n    build() {\n        const src = [];\n        this._setSignatures();\n        src.push(this._buildType());\n        src.push(this._buildImport());\n        if (this.functionsTable.length>0) {\n            src.push(this._buildFunctionsTable());\n        }\n        if (this.exports.length > 0) {\n            src.push(this._buildExports());\n        }\n        if (this.functionsTable.length>0) {\n            src.push(this._buildElements());\n        }\n        if (this.nInternalFunctions>0) {\n            src.push(this._buildFunctions());\n        }\n        src.push(this._buildData());\n        return [\n            \"(module\",\n            ident(src),\n            \")\"\n        ];\n    }\n\n    addFunction(fnName, comment) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilderWat(this, fnName, \"internal\", comment));\n\n        this.nInternalFunctions++;\n        return this.functions[idx];\n    }\n\n    addIimportFunction(fnName, moduleName, _fieldName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        if (  (this.functions.length>0)\n            &&(this.functions[this.functions.length-1].type == \"internal\"))\n            throw new Error(`Import functions must be declared before internal: ${fnName}`);\n\n        let fieldName = _fieldName || fnName;\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilderWat(this, fnName, \"import\", moduleName, fieldName));\n\n        this.nImportFunctions ++;\n        return this.functions[idx];\n    }\n\n    setMemory(pagesSize, moduleName, fieldName) {\n        this.memory = {\n            pagesSize: pagesSize,\n            moduleName: moduleName || \"env\",\n            fieldName: fieldName || \"memory\"\n        };\n    }\n\n    exportFunction(fnName, _exportName) {\n        const exportName = _exportName || fnName;\n        if (typeof(this.functionIdxByName[fnName]) === \"undefined\")\n            throw new Error(`Function not defined: ${fnName}`);\n        const idx = this.functionIdxByName[fnName];\n        if (exportName != fnName) {\n            this.functionIdxByName[exportName] = idx;\n        }\n        this.exports.push({\n            exportName: exportName,\n            idx: idx\n        });\n    }\n\n    addFunctionToTable(fnName) {\n        const idx = this.functionIdxByName[fnName];\n        this.functionsTable.push(idx);\n    }\n\n    addData(offset, bytes) {\n        this.datas.push({\n            offset: offset,\n            bytes: bytes\n        });\n    }\n\n    alloc(a, b) {\n        let size;\n        let bytes;\n        if ((Array.isArray(a) || ArrayBuffer.isView(a)) && (typeof(b) === \"undefined\")) {\n            size = a.length;\n            bytes = a;\n        } else {\n            size = a;\n            bytes = b;\n        }\n        size = (((size-1)>>3) +1)<<3;       // Align to 64 bits.\n        const p = this.free;\n        this.free += size;\n        if (bytes) {\n            this.addData(p, bytes);\n        }\n        return p;\n    }\n\n    allocString(s) {\n        const encoder = new TextEncoder();\n        const uint8array = encoder.encode(s);\n        return this.alloc([...uint8array, 0]);\n    }\n\n    _setSignatures() {\n        this.signatures = [];\n        const signatureIdxByName = {};\n        if (this.functionsTable.length>0) {\n            const signature = this.functions[this.functionsTable[0]].getSignature();\n            const signatureName = this.functions[this.functionsTable[0]].getSignatureName();\n            signatureIdxByName[signatureName] = 0;\n            this.signatures.push(signature);\n        }\n        for (let i=0; i<this.functions.length; i++) {\n            const signature = this.functions[i].getSignature();\n            const signatureName = this.functions[i].getSignatureName();\n            if (typeof(signatureIdxByName[signatureName]) === \"undefined\") {\n                signatureIdxByName[signatureName] = this.signatures.length;\n                this.signatures.push(signature);\n            }\n\n            this.functions[i].signatureIdx = signatureIdxByName[signatureName];\n            this.functions[i].signatureName = signatureName;\n        }\n\n    }\n\n    _buildType() {\n        return this.signatures;\n    }\n\n    _buildImport() {\n        const src = [];\n        src.push(`(import \"${this.memory.moduleName}\" \"${this.memory.fieldName}\" (memory ${this.memory.pagesSize}))`);\n        for (let i=0; i< this.nImportFunctions; i++) {\n            src.push(`(import \"${this.functions[i].moduleName}\" \"${this.functions[i].fieldName}\" (func $${this.functions[i].fnName} (type $${this.functions[i].getSignatureName()})))`);\n        }\n        return src;\n    }\n\n    _buildFunctionsTable() {\n        return `(table ${this.functionsTable.length} anyfunc)`;\n    }\n\n    _buildElements() {\n        let funcs=\"\";\n        for (let i=0; i<this.functionsTable.length; i++) {\n            funcs += \" $\"+this.functions[this.functionsTable[i]].fnName;\n        }\n        return `(elem (i32.const 0) ${funcs})`;\n    }\n\n    _buildExports() {\n        const src = [];\n        for (let i=0; i< this.exports.length; i++) {\n            src.push(`(export \"${this.exports[i].exportName}\" (func $${this.functions[this.exports[i].idx].fnName}))`);\n        }\n        return src;\n    }\n\n    _buildFunctions() {\n        const src = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            src.push(this.functions[i].getBody());\n        }\n        return src;\n    }\n\n    _buildData() {\n        const src = [];\n        const buf = Buffer.alloc(4);\n        buf.writeUInt32LE(this.free, 0);\n        src.push(`(data (i32.const 0) ${bytes2string(buf)})`);\n        for (let i=0; i< this.datas.length; i++) {\n            src.push(`(data (i32.const ${this.datas[i].offset}) ${bytes2string(this.datas[i].bytes)})`);\n        }\n        return src;\n\n        function bytes2string(b) {\n            let S = \"\\\"\";\n            for (let i=0; i<b.length; i++) {\n                if (b[i]<32 || b[i] >126 || b[i] == 34 || b[i]==92) {\n                    let h=b[i].toString(16);\n                    while (h.length<2) h = \"0\"+h;\n                    S += \"\\\\\" + h;\n                } else {\n                    S += String.fromCharCode(b[i]);\n                }\n            }\n            S +=  \"\\\"\";\n            return S;\n        }\n    }\n\n}\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of websnark (Web Assembly zkSnark Prover).\n\n    websnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    websnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with websnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nasync function buildProtoboard(builder, defBytes, bitsPerBytes) {\n    const protoboard = new Protoboard();\n\n    protoboard.defBytes = defBytes;\n    protoboard.bitsPerBytes = bitsPerBytes || 32;\n\n    protoboard.memory = new WebAssembly.Memory({initial:20000});\n    protoboard.i32 = new Uint32Array(protoboard.memory.buffer);\n    protoboard.i8 = new Uint8Array(protoboard.memory.buffer);\n\n    const moduleBuilder = new ModuleBuilder();\n\n    const fLog32 = moduleBuilder.addIimportFunction(\"debug_log32\", \"debug\", \"log32\");\n    fLog32.addParam(\"x\", \"i32\");\n    const fLog64 = moduleBuilder.addIimportFunction(\"debug_log64\", \"debug\", \"log64\");\n    fLog64.addParam(\"x\", \"i32\");\n    fLog64.addParam(\"y\", \"i32\");\n\n    buildLog32(moduleBuilder);\n    buildLog64(moduleBuilder);\n\n    builder(moduleBuilder, protoboard);\n\n\n    const code = moduleBuilder.build();\n\n    const wasmModule = await WebAssembly.compile(code);\n\n    protoboard.log = console.log;\n\n    protoboard.instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": protoboard.memory\n        },\n        debug: {\n            log32: function (c1) {\n                if (c1<0) c1 = 0x100000000+c1;\n                let s=c1.toString(16);\n                while (s.length<8) s = \"0\"+s;\n                protoboard.log(s + \": \" + c1.toString());\n            },\n            log64: function (c1, c2) {\n                if (c1<0) c1 = 0x100000000+c1;\n                if (c2<0) c2 = 0x100000000+c2;\n                const n = BigInt(c1) + (BigInt(c2) << 32n);\n                let s=n.toString(16);\n                while (s.length<16) s = \"0\"+s;\n                protoboard.log(s + \": \" + n.toString());\n            }\n        }\n    });\n\n    Object.assign(protoboard, protoboard.instance.exports);\n    Object.assign(protoboard, moduleBuilder.modules);\n\n    return protoboard;\n\n    function buildLog32(module) {\n\n        const f = module.addFunction(\"log32\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(\"debug_log32\", c.getLocal(\"x\")));\n    }\n\n    function buildLog64(module) {\n\n        const f = module.addFunction(\"log64\");\n        f.addParam(\"x\", \"i64\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(\n            \"debug_log64\",\n            c.i32_wrap_i64(c.getLocal(\"x\")),\n            c.i32_wrap_i64(\n                c.i64_shr_u(\n                    c.getLocal(\"x\"),\n                    c.i64_const(32)\n                )\n            )\n        ));\n    }\n\n}\n\nclass Protoboard {\n\n    constructor() {\n\n    }\n\n    alloc(length) {\n        if (typeof length === \"undefined\") {\n            length = this.defBytes;\n        }\n        length = (((length-1)>>3) +1)<<3;       // Align to 64 bits.\n\n        const res = this.i32[0];\n        this.i32[0] += length;\n        return res;\n    }\n\n    set(pos, nums, nBytes) {\n        if (!Array.isArray(nums)) {\n            nums = [nums];\n        }\n        if (typeof nBytes === \"undefined\") {\n            nBytes = this.defBytes;\n        }\n\n        const words = Math.floor((nBytes -1)/4)+1;\n        let p = pos;\n\n        const CHUNK = 1n << BigInt(this.bitsPerBytes);\n\n        for (let i=0; i<nums.length; i++) {\n            let v = BigInt(nums[i]);\n            for (let j=0; j<words; j++) {\n                const quotient = v / CHUNK;\n                const remainder = v % CHUNK;\n                this.i32[p>>2] = Number(remainder);\n                v = quotient;\n                p += 4;\n            }\n            if (v !== 0n) {\n                throw new Error(\"Expected v to be 0\");\n            }\n        }\n\n        return pos;\n    }\n\n    get(pos, nElements, nBytes) {\n        if (typeof nBytes == \"undefined\") {\n            if (typeof nElements == \"undefined\") {\n                nElements = 1;\n                nBytes = this.defBytes;\n            } else {\n                nElements = nBytes;\n                nBytes = this.defBytes;\n            }\n        }\n\n        const words = Math.floor((nBytes -1)/4)+1;\n\n        const CHUNK = 1n << BigInt(this.bitsPerBytes);\n\n\n        const nums = [];\n        for (let i=0; i<nElements; i++) {\n            let acc = 0n;\n            for (let j=words-1; j>=0; j--) {\n                acc = acc * CHUNK;\n                let v = this.i32[(pos>>2)+j];\n                if (this.bitsPerBytes <32) {\n                    if (v&0x80000000) v = v-0x100000000;\n                }\n                acc = acc + BigInt(v);\n            }\n            nums.push(acc);\n            pos += words*4;\n        }\n\n        if (nums.length == 1) return nums[0];\n        return nums;\n    }\n}\n\nexports.ModuleBuilder = ModuleBuilder;\nexports.ModuleBuilderWat = ModuleBuilderWat;\nexports.buildProtoboard = buildProtoboard;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wasmbuilder/build/main.cjs\n");

/***/ })

};
;
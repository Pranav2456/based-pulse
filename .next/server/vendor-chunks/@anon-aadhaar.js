"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@anon-aadhaar";
exports.ids = ["vendor-chunks/@anon-aadhaar"];
exports.modules = {

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/dist/index.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// ../../node_modules/node-forge/lib/forge.js\nvar require_forge = __commonJS({\n  \"../../node_modules/node-forge/lib/forge.js\"(exports, module2) {\n    \"use strict\";\n    module2.exports = {\n      // default options\n      options: {\n        usePureJavaScript: false\n      }\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/baseN.js\nvar require_baseN = __commonJS({\n  \"../../node_modules/node-forge/lib/baseN.js\"(exports, module2) {\n    \"use strict\";\n    var api = {};\n    module2.exports = api;\n    var _reverseAlphabets = {};\n    api.encode = function(input, alphabet, maxline) {\n      if (typeof alphabet !== \"string\") {\n        throw new TypeError('\"alphabet\" must be a string.');\n      }\n      if (maxline !== void 0 && typeof maxline !== \"number\") {\n        throw new TypeError('\"maxline\" must be a number.');\n      }\n      var output = \"\";\n      if (!(input instanceof Uint8Array)) {\n        output = _encodeWithByteBuffer(input, alphabet);\n      } else {\n        var i = 0;\n        var base = alphabet.length;\n        var first = alphabet.charAt(0);\n        var digits = [0];\n        for (i = 0; i < input.length; ++i) {\n          for (var j = 0, carry = input[i]; j < digits.length; ++j) {\n            carry += digits[j] << 8;\n            digits[j] = carry % base;\n            carry = carry / base | 0;\n          }\n          while (carry > 0) {\n            digits.push(carry % base);\n            carry = carry / base | 0;\n          }\n        }\n        for (i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n          output += first;\n        }\n        for (i = digits.length - 1; i >= 0; --i) {\n          output += alphabet[digits[i]];\n        }\n      }\n      if (maxline) {\n        var regex = new RegExp(\".{1,\" + maxline + \"}\", \"g\");\n        output = output.match(regex).join(\"\\r\\n\");\n      }\n      return output;\n    };\n    api.decode = function(input, alphabet) {\n      if (typeof input !== \"string\") {\n        throw new TypeError('\"input\" must be a string.');\n      }\n      if (typeof alphabet !== \"string\") {\n        throw new TypeError('\"alphabet\" must be a string.');\n      }\n      var table = _reverseAlphabets[alphabet];\n      if (!table) {\n        table = _reverseAlphabets[alphabet] = [];\n        for (var i = 0; i < alphabet.length; ++i) {\n          table[alphabet.charCodeAt(i)] = i;\n        }\n      }\n      input = input.replace(/\\s/g, \"\");\n      var base = alphabet.length;\n      var first = alphabet.charAt(0);\n      var bytes = [0];\n      for (var i = 0; i < input.length; i++) {\n        var value = table[input.charCodeAt(i)];\n        if (value === void 0) {\n          return;\n        }\n        for (var j = 0, carry = value; j < bytes.length; ++j) {\n          carry += bytes[j] * base;\n          bytes[j] = carry & 255;\n          carry >>= 8;\n        }\n        while (carry > 0) {\n          bytes.push(carry & 255);\n          carry >>= 8;\n        }\n      }\n      for (var k = 0; input[k] === first && k < input.length - 1; ++k) {\n        bytes.push(0);\n      }\n      if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(bytes.reverse());\n      }\n      return new Uint8Array(bytes.reverse());\n    };\n    function _encodeWithByteBuffer(input, alphabet) {\n      var i = 0;\n      var base = alphabet.length;\n      var first = alphabet.charAt(0);\n      var digits = [0];\n      for (i = 0; i < input.length(); ++i) {\n        for (var j = 0, carry = input.at(i); j < digits.length; ++j) {\n          carry += digits[j] << 8;\n          digits[j] = carry % base;\n          carry = carry / base | 0;\n        }\n        while (carry > 0) {\n          digits.push(carry % base);\n          carry = carry / base | 0;\n        }\n      }\n      var output = \"\";\n      for (i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {\n        output += first;\n      }\n      for (i = digits.length - 1; i >= 0; --i) {\n        output += alphabet[digits[i]];\n      }\n      return output;\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/util.js\nvar require_util = __commonJS({\n  \"../../node_modules/node-forge/lib/util.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    var baseN = require_baseN();\n    var util = module2.exports = forge.util = forge.util || {};\n    (function() {\n      if (typeof process !== \"undefined\" && process.nextTick && !false) {\n        util.nextTick = process.nextTick;\n        if (typeof setImmediate === \"function\") {\n          util.setImmediate = setImmediate;\n        } else {\n          util.setImmediate = util.nextTick;\n        }\n        return;\n      }\n      if (typeof setImmediate === \"function\") {\n        util.setImmediate = function() {\n          return setImmediate.apply(void 0, arguments);\n        };\n        util.nextTick = function(callback) {\n          return setImmediate(callback);\n        };\n        return;\n      }\n      util.setImmediate = function(callback) {\n        setTimeout(callback, 0);\n      };\n      if (typeof window !== \"undefined\" && typeof window.postMessage === \"function\") {\n        let handler2 = function(event) {\n          if (event.source === window && event.data === msg) {\n            event.stopPropagation();\n            var copy = callbacks.slice();\n            callbacks.length = 0;\n            copy.forEach(function(callback) {\n              callback();\n            });\n          }\n        };\n        var handler = handler2;\n        var msg = \"forge.setImmediate\";\n        var callbacks = [];\n        util.setImmediate = function(callback) {\n          callbacks.push(callback);\n          if (callbacks.length === 1) {\n            window.postMessage(msg, \"*\");\n          }\n        };\n        window.addEventListener(\"message\", handler2, true);\n      }\n      if (typeof MutationObserver !== \"undefined\") {\n        var now = Date.now();\n        var attr = true;\n        var div = document.createElement(\"div\");\n        var callbacks = [];\n        new MutationObserver(function() {\n          var copy = callbacks.slice();\n          callbacks.length = 0;\n          copy.forEach(function(callback) {\n            callback();\n          });\n        }).observe(div, { attributes: true });\n        var oldSetImmediate = util.setImmediate;\n        util.setImmediate = function(callback) {\n          if (Date.now() - now > 15) {\n            now = Date.now();\n            oldSetImmediate(callback);\n          } else {\n            callbacks.push(callback);\n            if (callbacks.length === 1) {\n              div.setAttribute(\"a\", attr = !attr);\n            }\n          }\n        };\n      }\n      util.nextTick = util.setImmediate;\n    })();\n    util.isNodejs = typeof process !== \"undefined\" && process.versions && process.versions.node;\n    util.globalScope = function() {\n      if (util.isNodejs) {\n        return global;\n      }\n      return typeof self === \"undefined\" ? window : self;\n    }();\n    util.isArray = Array.isArray || function(x) {\n      return Object.prototype.toString.call(x) === \"[object Array]\";\n    };\n    util.isArrayBuffer = function(x) {\n      return typeof ArrayBuffer !== \"undefined\" && x instanceof ArrayBuffer;\n    };\n    util.isArrayBufferView = function(x) {\n      return x && util.isArrayBuffer(x.buffer) && x.byteLength !== void 0;\n    };\n    function _checkBitsParam(n) {\n      if (!(n === 8 || n === 16 || n === 24 || n === 32)) {\n        throw new Error(\"Only 8, 16, 24, or 32 bits supported: \" + n);\n      }\n    }\n    util.ByteBuffer = ByteStringBuffer;\n    function ByteStringBuffer(b) {\n      this.data = \"\";\n      this.read = 0;\n      if (typeof b === \"string\") {\n        this.data = b;\n      } else if (util.isArrayBuffer(b) || util.isArrayBufferView(b)) {\n        if (typeof Buffer !== \"undefined\" && b instanceof Buffer) {\n          this.data = b.toString(\"binary\");\n        } else {\n          var arr = new Uint8Array(b);\n          try {\n            this.data = String.fromCharCode.apply(null, arr);\n          } catch (e) {\n            for (var i = 0; i < arr.length; ++i) {\n              this.putByte(arr[i]);\n            }\n          }\n        }\n      } else if (b instanceof ByteStringBuffer || typeof b === \"object\" && typeof b.data === \"string\" && typeof b.read === \"number\") {\n        this.data = b.data;\n        this.read = b.read;\n      }\n      this._constructedStringLength = 0;\n    }\n    util.ByteStringBuffer = ByteStringBuffer;\n    var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;\n    util.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {\n      this._constructedStringLength += x;\n      if (this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {\n        this.data.substr(0, 1);\n        this._constructedStringLength = 0;\n      }\n    };\n    util.ByteStringBuffer.prototype.length = function() {\n      return this.data.length - this.read;\n    };\n    util.ByteStringBuffer.prototype.isEmpty = function() {\n      return this.length() <= 0;\n    };\n    util.ByteStringBuffer.prototype.putByte = function(b) {\n      return this.putBytes(String.fromCharCode(b));\n    };\n    util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {\n      b = String.fromCharCode(b);\n      var d = this.data;\n      while (n > 0) {\n        if (n & 1) {\n          d += b;\n        }\n        n >>>= 1;\n        if (n > 0) {\n          b += b;\n        }\n      }\n      this.data = d;\n      this._optimizeConstructedString(n);\n      return this;\n    };\n    util.ByteStringBuffer.prototype.putBytes = function(bytes) {\n      this.data += bytes;\n      this._optimizeConstructedString(bytes.length);\n      return this;\n    };\n    util.ByteStringBuffer.prototype.putString = function(str) {\n      return this.putBytes(util.encodeUtf8(str));\n    };\n    util.ByteStringBuffer.prototype.putInt16 = function(i) {\n      return this.putBytes(\n        String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255)\n      );\n    };\n    util.ByteStringBuffer.prototype.putInt24 = function(i) {\n      return this.putBytes(\n        String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255)\n      );\n    };\n    util.ByteStringBuffer.prototype.putInt32 = function(i) {\n      return this.putBytes(\n        String.fromCharCode(i >> 24 & 255) + String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255)\n      );\n    };\n    util.ByteStringBuffer.prototype.putInt16Le = function(i) {\n      return this.putBytes(\n        String.fromCharCode(i & 255) + String.fromCharCode(i >> 8 & 255)\n      );\n    };\n    util.ByteStringBuffer.prototype.putInt24Le = function(i) {\n      return this.putBytes(\n        String.fromCharCode(i & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i >> 16 & 255)\n      );\n    };\n    util.ByteStringBuffer.prototype.putInt32Le = function(i) {\n      return this.putBytes(\n        String.fromCharCode(i & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 24 & 255)\n      );\n    };\n    util.ByteStringBuffer.prototype.putInt = function(i, n) {\n      _checkBitsParam(n);\n      var bytes = \"\";\n      do {\n        n -= 8;\n        bytes += String.fromCharCode(i >> n & 255);\n      } while (n > 0);\n      return this.putBytes(bytes);\n    };\n    util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {\n      if (i < 0) {\n        i += 2 << n - 1;\n      }\n      return this.putInt(i, n);\n    };\n    util.ByteStringBuffer.prototype.putBuffer = function(buffer) {\n      return this.putBytes(buffer.getBytes());\n    };\n    util.ByteStringBuffer.prototype.getByte = function() {\n      return this.data.charCodeAt(this.read++);\n    };\n    util.ByteStringBuffer.prototype.getInt16 = function() {\n      var rval = this.data.charCodeAt(this.read) << 8 ^ this.data.charCodeAt(this.read + 1);\n      this.read += 2;\n      return rval;\n    };\n    util.ByteStringBuffer.prototype.getInt24 = function() {\n      var rval = this.data.charCodeAt(this.read) << 16 ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2);\n      this.read += 3;\n      return rval;\n    };\n    util.ByteStringBuffer.prototype.getInt32 = function() {\n      var rval = this.data.charCodeAt(this.read) << 24 ^ this.data.charCodeAt(this.read + 1) << 16 ^ this.data.charCodeAt(this.read + 2) << 8 ^ this.data.charCodeAt(this.read + 3);\n      this.read += 4;\n      return rval;\n    };\n    util.ByteStringBuffer.prototype.getInt16Le = function() {\n      var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8;\n      this.read += 2;\n      return rval;\n    };\n    util.ByteStringBuffer.prototype.getInt24Le = function() {\n      var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16;\n      this.read += 3;\n      return rval;\n    };\n    util.ByteStringBuffer.prototype.getInt32Le = function() {\n      var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16 ^ this.data.charCodeAt(this.read + 3) << 24;\n      this.read += 4;\n      return rval;\n    };\n    util.ByteStringBuffer.prototype.getInt = function(n) {\n      _checkBitsParam(n);\n      var rval = 0;\n      do {\n        rval = (rval << 8) + this.data.charCodeAt(this.read++);\n        n -= 8;\n      } while (n > 0);\n      return rval;\n    };\n    util.ByteStringBuffer.prototype.getSignedInt = function(n) {\n      var x = this.getInt(n);\n      var max = 2 << n - 2;\n      if (x >= max) {\n        x -= max << 1;\n      }\n      return x;\n    };\n    util.ByteStringBuffer.prototype.getBytes = function(count) {\n      var rval;\n      if (count) {\n        count = Math.min(this.length(), count);\n        rval = this.data.slice(this.read, this.read + count);\n        this.read += count;\n      } else if (count === 0) {\n        rval = \"\";\n      } else {\n        rval = this.read === 0 ? this.data : this.data.slice(this.read);\n        this.clear();\n      }\n      return rval;\n    };\n    util.ByteStringBuffer.prototype.bytes = function(count) {\n      return typeof count === \"undefined\" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);\n    };\n    util.ByteStringBuffer.prototype.at = function(i) {\n      return this.data.charCodeAt(this.read + i);\n    };\n    util.ByteStringBuffer.prototype.setAt = function(i, b) {\n      this.data = this.data.substr(0, this.read + i) + String.fromCharCode(b) + this.data.substr(this.read + i + 1);\n      return this;\n    };\n    util.ByteStringBuffer.prototype.last = function() {\n      return this.data.charCodeAt(this.data.length - 1);\n    };\n    util.ByteStringBuffer.prototype.copy = function() {\n      var c = util.createBuffer(this.data);\n      c.read = this.read;\n      return c;\n    };\n    util.ByteStringBuffer.prototype.compact = function() {\n      if (this.read > 0) {\n        this.data = this.data.slice(this.read);\n        this.read = 0;\n      }\n      return this;\n    };\n    util.ByteStringBuffer.prototype.clear = function() {\n      this.data = \"\";\n      this.read = 0;\n      return this;\n    };\n    util.ByteStringBuffer.prototype.truncate = function(count) {\n      var len = Math.max(0, this.length() - count);\n      this.data = this.data.substr(this.read, len);\n      this.read = 0;\n      return this;\n    };\n    util.ByteStringBuffer.prototype.toHex = function() {\n      var rval = \"\";\n      for (var i = this.read; i < this.data.length; ++i) {\n        var b = this.data.charCodeAt(i);\n        if (b < 16) {\n          rval += \"0\";\n        }\n        rval += b.toString(16);\n      }\n      return rval;\n    };\n    util.ByteStringBuffer.prototype.toString = function() {\n      return util.decodeUtf8(this.bytes());\n    };\n    function DataBuffer(b, options) {\n      options = options || {};\n      this.read = options.readOffset || 0;\n      this.growSize = options.growSize || 1024;\n      var isArrayBuffer = util.isArrayBuffer(b);\n      var isArrayBufferView = util.isArrayBufferView(b);\n      if (isArrayBuffer || isArrayBufferView) {\n        if (isArrayBuffer) {\n          this.data = new DataView(b);\n        } else {\n          this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);\n        }\n        this.write = \"writeOffset\" in options ? options.writeOffset : this.data.byteLength;\n        return;\n      }\n      this.data = new DataView(new ArrayBuffer(0));\n      this.write = 0;\n      if (b !== null && b !== void 0) {\n        this.putBytes(b);\n      }\n      if (\"writeOffset\" in options) {\n        this.write = options.writeOffset;\n      }\n    }\n    util.DataBuffer = DataBuffer;\n    util.DataBuffer.prototype.length = function() {\n      return this.write - this.read;\n    };\n    util.DataBuffer.prototype.isEmpty = function() {\n      return this.length() <= 0;\n    };\n    util.DataBuffer.prototype.accommodate = function(amount, growSize) {\n      if (this.length() >= amount) {\n        return this;\n      }\n      growSize = Math.max(growSize || this.growSize, amount);\n      var src = new Uint8Array(\n        this.data.buffer,\n        this.data.byteOffset,\n        this.data.byteLength\n      );\n      var dst = new Uint8Array(this.length() + growSize);\n      dst.set(src);\n      this.data = new DataView(dst.buffer);\n      return this;\n    };\n    util.DataBuffer.prototype.putByte = function(b) {\n      this.accommodate(1);\n      this.data.setUint8(this.write++, b);\n      return this;\n    };\n    util.DataBuffer.prototype.fillWithByte = function(b, n) {\n      this.accommodate(n);\n      for (var i = 0; i < n; ++i) {\n        this.data.setUint8(b);\n      }\n      return this;\n    };\n    util.DataBuffer.prototype.putBytes = function(bytes, encoding) {\n      if (util.isArrayBufferView(bytes)) {\n        var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n        var len = src.byteLength - src.byteOffset;\n        this.accommodate(len);\n        var dst = new Uint8Array(this.data.buffer, this.write);\n        dst.set(src);\n        this.write += len;\n        return this;\n      }\n      if (util.isArrayBuffer(bytes)) {\n        var src = new Uint8Array(bytes);\n        this.accommodate(src.byteLength);\n        var dst = new Uint8Array(this.data.buffer);\n        dst.set(src, this.write);\n        this.write += src.byteLength;\n        return this;\n      }\n      if (bytes instanceof util.DataBuffer || typeof bytes === \"object\" && typeof bytes.read === \"number\" && typeof bytes.write === \"number\" && util.isArrayBufferView(bytes.data)) {\n        var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());\n        this.accommodate(src.byteLength);\n        var dst = new Uint8Array(bytes.data.byteLength, this.write);\n        dst.set(src);\n        this.write += src.byteLength;\n        return this;\n      }\n      if (bytes instanceof util.ByteStringBuffer) {\n        bytes = bytes.data;\n        encoding = \"binary\";\n      }\n      encoding = encoding || \"binary\";\n      if (typeof bytes === \"string\") {\n        var view;\n        if (encoding === \"hex\") {\n          this.accommodate(Math.ceil(bytes.length / 2));\n          view = new Uint8Array(this.data.buffer, this.write);\n          this.write += util.binary.hex.decode(bytes, view, this.write);\n          return this;\n        }\n        if (encoding === \"base64\") {\n          this.accommodate(Math.ceil(bytes.length / 4) * 3);\n          view = new Uint8Array(this.data.buffer, this.write);\n          this.write += util.binary.base64.decode(bytes, view, this.write);\n          return this;\n        }\n        if (encoding === \"utf8\") {\n          bytes = util.encodeUtf8(bytes);\n          encoding = \"binary\";\n        }\n        if (encoding === \"binary\" || encoding === \"raw\") {\n          this.accommodate(bytes.length);\n          view = new Uint8Array(this.data.buffer, this.write);\n          this.write += util.binary.raw.decode(view);\n          return this;\n        }\n        if (encoding === \"utf16\") {\n          this.accommodate(bytes.length * 2);\n          view = new Uint16Array(this.data.buffer, this.write);\n          this.write += util.text.utf16.encode(view);\n          return this;\n        }\n        throw new Error(\"Invalid encoding: \" + encoding);\n      }\n      throw Error(\"Invalid parameter: \" + bytes);\n    };\n    util.DataBuffer.prototype.putBuffer = function(buffer) {\n      this.putBytes(buffer);\n      buffer.clear();\n      return this;\n    };\n    util.DataBuffer.prototype.putString = function(str) {\n      return this.putBytes(str, \"utf16\");\n    };\n    util.DataBuffer.prototype.putInt16 = function(i) {\n      this.accommodate(2);\n      this.data.setInt16(this.write, i);\n      this.write += 2;\n      return this;\n    };\n    util.DataBuffer.prototype.putInt24 = function(i) {\n      this.accommodate(3);\n      this.data.setInt16(this.write, i >> 8 & 65535);\n      this.data.setInt8(this.write, i >> 16 & 255);\n      this.write += 3;\n      return this;\n    };\n    util.DataBuffer.prototype.putInt32 = function(i) {\n      this.accommodate(4);\n      this.data.setInt32(this.write, i);\n      this.write += 4;\n      return this;\n    };\n    util.DataBuffer.prototype.putInt16Le = function(i) {\n      this.accommodate(2);\n      this.data.setInt16(this.write, i, true);\n      this.write += 2;\n      return this;\n    };\n    util.DataBuffer.prototype.putInt24Le = function(i) {\n      this.accommodate(3);\n      this.data.setInt8(this.write, i >> 16 & 255);\n      this.data.setInt16(this.write, i >> 8 & 65535, true);\n      this.write += 3;\n      return this;\n    };\n    util.DataBuffer.prototype.putInt32Le = function(i) {\n      this.accommodate(4);\n      this.data.setInt32(this.write, i, true);\n      this.write += 4;\n      return this;\n    };\n    util.DataBuffer.prototype.putInt = function(i, n) {\n      _checkBitsParam(n);\n      this.accommodate(n / 8);\n      do {\n        n -= 8;\n        this.data.setInt8(this.write++, i >> n & 255);\n      } while (n > 0);\n      return this;\n    };\n    util.DataBuffer.prototype.putSignedInt = function(i, n) {\n      _checkBitsParam(n);\n      this.accommodate(n / 8);\n      if (i < 0) {\n        i += 2 << n - 1;\n      }\n      return this.putInt(i, n);\n    };\n    util.DataBuffer.prototype.getByte = function() {\n      return this.data.getInt8(this.read++);\n    };\n    util.DataBuffer.prototype.getInt16 = function() {\n      var rval = this.data.getInt16(this.read);\n      this.read += 2;\n      return rval;\n    };\n    util.DataBuffer.prototype.getInt24 = function() {\n      var rval = this.data.getInt16(this.read) << 8 ^ this.data.getInt8(this.read + 2);\n      this.read += 3;\n      return rval;\n    };\n    util.DataBuffer.prototype.getInt32 = function() {\n      var rval = this.data.getInt32(this.read);\n      this.read += 4;\n      return rval;\n    };\n    util.DataBuffer.prototype.getInt16Le = function() {\n      var rval = this.data.getInt16(this.read, true);\n      this.read += 2;\n      return rval;\n    };\n    util.DataBuffer.prototype.getInt24Le = function() {\n      var rval = this.data.getInt8(this.read) ^ this.data.getInt16(this.read + 1, true) << 8;\n      this.read += 3;\n      return rval;\n    };\n    util.DataBuffer.prototype.getInt32Le = function() {\n      var rval = this.data.getInt32(this.read, true);\n      this.read += 4;\n      return rval;\n    };\n    util.DataBuffer.prototype.getInt = function(n) {\n      _checkBitsParam(n);\n      var rval = 0;\n      do {\n        rval = (rval << 8) + this.data.getInt8(this.read++);\n        n -= 8;\n      } while (n > 0);\n      return rval;\n    };\n    util.DataBuffer.prototype.getSignedInt = function(n) {\n      var x = this.getInt(n);\n      var max = 2 << n - 2;\n      if (x >= max) {\n        x -= max << 1;\n      }\n      return x;\n    };\n    util.DataBuffer.prototype.getBytes = function(count) {\n      var rval;\n      if (count) {\n        count = Math.min(this.length(), count);\n        rval = this.data.slice(this.read, this.read + count);\n        this.read += count;\n      } else if (count === 0) {\n        rval = \"\";\n      } else {\n        rval = this.read === 0 ? this.data : this.data.slice(this.read);\n        this.clear();\n      }\n      return rval;\n    };\n    util.DataBuffer.prototype.bytes = function(count) {\n      return typeof count === \"undefined\" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);\n    };\n    util.DataBuffer.prototype.at = function(i) {\n      return this.data.getUint8(this.read + i);\n    };\n    util.DataBuffer.prototype.setAt = function(i, b) {\n      this.data.setUint8(i, b);\n      return this;\n    };\n    util.DataBuffer.prototype.last = function() {\n      return this.data.getUint8(this.write - 1);\n    };\n    util.DataBuffer.prototype.copy = function() {\n      return new util.DataBuffer(this);\n    };\n    util.DataBuffer.prototype.compact = function() {\n      if (this.read > 0) {\n        var src = new Uint8Array(this.data.buffer, this.read);\n        var dst = new Uint8Array(src.byteLength);\n        dst.set(src);\n        this.data = new DataView(dst);\n        this.write -= this.read;\n        this.read = 0;\n      }\n      return this;\n    };\n    util.DataBuffer.prototype.clear = function() {\n      this.data = new DataView(new ArrayBuffer(0));\n      this.read = this.write = 0;\n      return this;\n    };\n    util.DataBuffer.prototype.truncate = function(count) {\n      this.write = Math.max(0, this.length() - count);\n      this.read = Math.min(this.read, this.write);\n      return this;\n    };\n    util.DataBuffer.prototype.toHex = function() {\n      var rval = \"\";\n      for (var i = this.read; i < this.data.byteLength; ++i) {\n        var b = this.data.getUint8(i);\n        if (b < 16) {\n          rval += \"0\";\n        }\n        rval += b.toString(16);\n      }\n      return rval;\n    };\n    util.DataBuffer.prototype.toString = function(encoding) {\n      var view = new Uint8Array(this.data, this.read, this.length());\n      encoding = encoding || \"utf8\";\n      if (encoding === \"binary\" || encoding === \"raw\") {\n        return util.binary.raw.encode(view);\n      }\n      if (encoding === \"hex\") {\n        return util.binary.hex.encode(view);\n      }\n      if (encoding === \"base64\") {\n        return util.binary.base64.encode(view);\n      }\n      if (encoding === \"utf8\") {\n        return util.text.utf8.decode(view);\n      }\n      if (encoding === \"utf16\") {\n        return util.text.utf16.decode(view);\n      }\n      throw new Error(\"Invalid encoding: \" + encoding);\n    };\n    util.createBuffer = function(input, encoding) {\n      encoding = encoding || \"raw\";\n      if (input !== void 0 && encoding === \"utf8\") {\n        input = util.encodeUtf8(input);\n      }\n      return new util.ByteBuffer(input);\n    };\n    util.fillString = function(c, n) {\n      var s = \"\";\n      while (n > 0) {\n        if (n & 1) {\n          s += c;\n        }\n        n >>>= 1;\n        if (n > 0) {\n          c += c;\n        }\n      }\n      return s;\n    };\n    util.xorBytes = function(s1, s2, n) {\n      var s3 = \"\";\n      var b = \"\";\n      var t = \"\";\n      var i = 0;\n      var c = 0;\n      for (; n > 0; --n, ++i) {\n        b = s1.charCodeAt(i) ^ s2.charCodeAt(i);\n        if (c >= 10) {\n          s3 += t;\n          t = \"\";\n          c = 0;\n        }\n        t += String.fromCharCode(b);\n        ++c;\n      }\n      s3 += t;\n      return s3;\n    };\n    util.hexToBytes = function(hex) {\n      var rval = \"\";\n      var i = 0;\n      if (hex.length & true) {\n        i = 1;\n        rval += String.fromCharCode(parseInt(hex[0], 16));\n      }\n      for (; i < hex.length; i += 2) {\n        rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n      }\n      return rval;\n    };\n    util.bytesToHex = function(bytes) {\n      return util.createBuffer(bytes).toHex();\n    };\n    util.int32ToBytes = function(i) {\n      return String.fromCharCode(i >> 24 & 255) + String.fromCharCode(i >> 16 & 255) + String.fromCharCode(i >> 8 & 255) + String.fromCharCode(i & 255);\n    };\n    var _base64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var _base64Idx = [\n      /*43 -43 = 0*/\n      /*'+',  1,  2,  3,'/' */\n      62,\n      -1,\n      -1,\n      -1,\n      63,\n      /*'0','1','2','3','4','5','6','7','8','9' */\n      52,\n      53,\n      54,\n      55,\n      56,\n      57,\n      58,\n      59,\n      60,\n      61,\n      /*15, 16, 17,'=', 19, 20, 21 */\n      -1,\n      -1,\n      -1,\n      64,\n      -1,\n      -1,\n      -1,\n      /*65 - 43 = 22*/\n      /*'A','B','C','D','E','F','G','H','I','J','K','L','M', */\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      /*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */\n      13,\n      14,\n      15,\n      16,\n      17,\n      18,\n      19,\n      20,\n      21,\n      22,\n      23,\n      24,\n      25,\n      /*91 - 43 = 48 */\n      /*48, 49, 50, 51, 52, 53 */\n      -1,\n      -1,\n      -1,\n      -1,\n      -1,\n      -1,\n      /*97 - 43 = 54*/\n      /*'a','b','c','d','e','f','g','h','i','j','k','l','m' */\n      26,\n      27,\n      28,\n      29,\n      30,\n      31,\n      32,\n      33,\n      34,\n      35,\n      36,\n      37,\n      38,\n      /*'n','o','p','q','r','s','t','u','v','w','x','y','z' */\n      39,\n      40,\n      41,\n      42,\n      43,\n      44,\n      45,\n      46,\n      47,\n      48,\n      49,\n      50,\n      51\n    ];\n    var _base58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n    util.encode64 = function(input, maxline) {\n      var line = \"\";\n      var output = \"\";\n      var chr1, chr2, chr3;\n      var i = 0;\n      while (i < input.length) {\n        chr1 = input.charCodeAt(i++);\n        chr2 = input.charCodeAt(i++);\n        chr3 = input.charCodeAt(i++);\n        line += _base64.charAt(chr1 >> 2);\n        line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);\n        if (isNaN(chr2)) {\n          line += \"==\";\n        } else {\n          line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);\n          line += isNaN(chr3) ? \"=\" : _base64.charAt(chr3 & 63);\n        }\n        if (maxline && line.length > maxline) {\n          output += line.substr(0, maxline) + \"\\r\\n\";\n          line = line.substr(maxline);\n        }\n      }\n      output += line;\n      return output;\n    };\n    util.decode64 = function(input) {\n      input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n      var output = \"\";\n      var enc1, enc2, enc3, enc4;\n      var i = 0;\n      while (i < input.length) {\n        enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n        output += String.fromCharCode(enc1 << 2 | enc2 >> 4);\n        if (enc3 !== 64) {\n          output += String.fromCharCode((enc2 & 15) << 4 | enc3 >> 2);\n          if (enc4 !== 64) {\n            output += String.fromCharCode((enc3 & 3) << 6 | enc4);\n          }\n        }\n      }\n      return output;\n    };\n    util.encodeUtf8 = function(str) {\n      return unescape(encodeURIComponent(str));\n    };\n    util.decodeUtf8 = function(str) {\n      return decodeURIComponent(escape(str));\n    };\n    util.binary = {\n      raw: {},\n      hex: {},\n      base64: {},\n      base58: {},\n      baseN: {\n        encode: baseN.encode,\n        decode: baseN.decode\n      }\n    };\n    util.binary.raw.encode = function(bytes) {\n      return String.fromCharCode.apply(null, bytes);\n    };\n    util.binary.raw.decode = function(str, output, offset) {\n      var out = output;\n      if (!out) {\n        out = new Uint8Array(str.length);\n      }\n      offset = offset || 0;\n      var j = offset;\n      for (var i = 0; i < str.length; ++i) {\n        out[j++] = str.charCodeAt(i);\n      }\n      return output ? j - offset : out;\n    };\n    util.binary.hex.encode = util.bytesToHex;\n    util.binary.hex.decode = function(hex, output, offset) {\n      var out = output;\n      if (!out) {\n        out = new Uint8Array(Math.ceil(hex.length / 2));\n      }\n      offset = offset || 0;\n      var i = 0, j = offset;\n      if (hex.length & 1) {\n        i = 1;\n        out[j++] = parseInt(hex[0], 16);\n      }\n      for (; i < hex.length; i += 2) {\n        out[j++] = parseInt(hex.substr(i, 2), 16);\n      }\n      return output ? j - offset : out;\n    };\n    util.binary.base64.encode = function(input, maxline) {\n      var line = \"\";\n      var output = \"\";\n      var chr1, chr2, chr3;\n      var i = 0;\n      while (i < input.byteLength) {\n        chr1 = input[i++];\n        chr2 = input[i++];\n        chr3 = input[i++];\n        line += _base64.charAt(chr1 >> 2);\n        line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);\n        if (isNaN(chr2)) {\n          line += \"==\";\n        } else {\n          line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);\n          line += isNaN(chr3) ? \"=\" : _base64.charAt(chr3 & 63);\n        }\n        if (maxline && line.length > maxline) {\n          output += line.substr(0, maxline) + \"\\r\\n\";\n          line = line.substr(maxline);\n        }\n      }\n      output += line;\n      return output;\n    };\n    util.binary.base64.decode = function(input, output, offset) {\n      var out = output;\n      if (!out) {\n        out = new Uint8Array(Math.ceil(input.length / 4) * 3);\n      }\n      input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n      offset = offset || 0;\n      var enc1, enc2, enc3, enc4;\n      var i = 0, j = offset;\n      while (i < input.length) {\n        enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n        out[j++] = enc1 << 2 | enc2 >> 4;\n        if (enc3 !== 64) {\n          out[j++] = (enc2 & 15) << 4 | enc3 >> 2;\n          if (enc4 !== 64) {\n            out[j++] = (enc3 & 3) << 6 | enc4;\n          }\n        }\n      }\n      return output ? j - offset : out.subarray(0, j);\n    };\n    util.binary.base58.encode = function(input, maxline) {\n      return util.binary.baseN.encode(input, _base58, maxline);\n    };\n    util.binary.base58.decode = function(input, maxline) {\n      return util.binary.baseN.decode(input, _base58, maxline);\n    };\n    util.text = {\n      utf8: {},\n      utf16: {}\n    };\n    util.text.utf8.encode = function(str, output, offset) {\n      str = util.encodeUtf8(str);\n      var out = output;\n      if (!out) {\n        out = new Uint8Array(str.length);\n      }\n      offset = offset || 0;\n      var j = offset;\n      for (var i = 0; i < str.length; ++i) {\n        out[j++] = str.charCodeAt(i);\n      }\n      return output ? j - offset : out;\n    };\n    util.text.utf8.decode = function(bytes) {\n      return util.decodeUtf8(String.fromCharCode.apply(null, bytes));\n    };\n    util.text.utf16.encode = function(str, output, offset) {\n      var out = output;\n      if (!out) {\n        out = new Uint8Array(str.length * 2);\n      }\n      var view = new Uint16Array(out.buffer);\n      offset = offset || 0;\n      var j = offset;\n      var k = offset;\n      for (var i = 0; i < str.length; ++i) {\n        view[k++] = str.charCodeAt(i);\n        j += 2;\n      }\n      return output ? j - offset : out;\n    };\n    util.text.utf16.decode = function(bytes) {\n      return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n    };\n    util.deflate = function(api, bytes, raw) {\n      bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);\n      if (raw) {\n        var start = 2;\n        var flg = bytes.charCodeAt(1);\n        if (flg & 32) {\n          start = 6;\n        }\n        bytes = bytes.substring(start, bytes.length - 4);\n      }\n      return bytes;\n    };\n    util.inflate = function(api, bytes, raw) {\n      var rval = api.inflate(util.encode64(bytes)).rval;\n      return rval === null ? null : util.decode64(rval);\n    };\n    var _setStorageObject = function(api, id, obj) {\n      if (!api) {\n        throw new Error(\"WebStorage not available.\");\n      }\n      var rval;\n      if (obj === null) {\n        rval = api.removeItem(id);\n      } else {\n        obj = util.encode64(JSON.stringify(obj));\n        rval = api.setItem(id, obj);\n      }\n      if (typeof rval !== \"undefined\" && rval.rval !== true) {\n        var error = new Error(rval.error.message);\n        error.id = rval.error.id;\n        error.name = rval.error.name;\n        throw error;\n      }\n    };\n    var _getStorageObject = function(api, id) {\n      if (!api) {\n        throw new Error(\"WebStorage not available.\");\n      }\n      var rval = api.getItem(id);\n      if (api.init) {\n        if (rval.rval === null) {\n          if (rval.error) {\n            var error = new Error(rval.error.message);\n            error.id = rval.error.id;\n            error.name = rval.error.name;\n            throw error;\n          }\n          rval = null;\n        } else {\n          rval = rval.rval;\n        }\n      }\n      if (rval !== null) {\n        rval = JSON.parse(util.decode64(rval));\n      }\n      return rval;\n    };\n    var _setItem = function(api, id, key, data) {\n      var obj = _getStorageObject(api, id);\n      if (obj === null) {\n        obj = {};\n      }\n      obj[key] = data;\n      _setStorageObject(api, id, obj);\n    };\n    var _getItem = function(api, id, key) {\n      var rval = _getStorageObject(api, id);\n      if (rval !== null) {\n        rval = key in rval ? rval[key] : null;\n      }\n      return rval;\n    };\n    var _removeItem = function(api, id, key) {\n      var obj = _getStorageObject(api, id);\n      if (obj !== null && key in obj) {\n        delete obj[key];\n        var empty = true;\n        for (var prop in obj) {\n          empty = false;\n          break;\n        }\n        if (empty) {\n          obj = null;\n        }\n        _setStorageObject(api, id, obj);\n      }\n    };\n    var _clearItems = function(api, id) {\n      _setStorageObject(api, id, null);\n    };\n    var _callStorageFunction = function(func, args, location) {\n      var rval = null;\n      if (typeof location === \"undefined\") {\n        location = [\"web\", \"flash\"];\n      }\n      var type;\n      var done = false;\n      var exception = null;\n      for (var idx in location) {\n        type = location[idx];\n        try {\n          if (type === \"flash\" || type === \"both\") {\n            if (args[0] === null) {\n              throw new Error(\"Flash local storage not available.\");\n            }\n            rval = func.apply(this, args);\n            done = type === \"flash\";\n          }\n          if (type === \"web\" || type === \"both\") {\n            args[0] = localStorage;\n            rval = func.apply(this, args);\n            done = true;\n          }\n        } catch (ex) {\n          exception = ex;\n        }\n        if (done) {\n          break;\n        }\n      }\n      if (!done) {\n        throw exception;\n      }\n      return rval;\n    };\n    util.setItem = function(api, id, key, data, location) {\n      _callStorageFunction(_setItem, arguments, location);\n    };\n    util.getItem = function(api, id, key, location) {\n      return _callStorageFunction(_getItem, arguments, location);\n    };\n    util.removeItem = function(api, id, key, location) {\n      _callStorageFunction(_removeItem, arguments, location);\n    };\n    util.clearItems = function(api, id, location) {\n      _callStorageFunction(_clearItems, arguments, location);\n    };\n    util.isEmpty = function(obj) {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          return false;\n        }\n      }\n      return true;\n    };\n    util.format = function(format) {\n      var re = /%./g;\n      var match;\n      var part;\n      var argi = 0;\n      var parts = [];\n      var last = 0;\n      while (match = re.exec(format)) {\n        part = format.substring(last, re.lastIndex - 2);\n        if (part.length > 0) {\n          parts.push(part);\n        }\n        last = re.lastIndex;\n        var code = match[0][1];\n        switch (code) {\n          case \"s\":\n          case \"o\":\n            if (argi < arguments.length) {\n              parts.push(arguments[argi++ + 1]);\n            } else {\n              parts.push(\"<?>\");\n            }\n            break;\n          case \"%\":\n            parts.push(\"%\");\n            break;\n          default:\n            parts.push(\"<%\" + code + \"?>\");\n        }\n      }\n      parts.push(format.substring(last));\n      return parts.join(\"\");\n    };\n    util.formatNumber = function(number, decimals, dec_point, thousands_sep) {\n      var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;\n      var d = dec_point === void 0 ? \",\" : dec_point;\n      var t = thousands_sep === void 0 ? \".\" : thousands_sep, s = n < 0 ? \"-\" : \"\";\n      var i = parseInt(n = Math.abs(+n || 0).toFixed(c), 10) + \"\";\n      var j = i.length > 3 ? i.length % 3 : 0;\n      return s + (j ? i.substr(0, j) + t : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : \"\");\n    };\n    util.formatSize = function(size) {\n      if (size >= 1073741824) {\n        size = util.formatNumber(size / 1073741824, 2, \".\", \"\") + \" GiB\";\n      } else if (size >= 1048576) {\n        size = util.formatNumber(size / 1048576, 2, \".\", \"\") + \" MiB\";\n      } else if (size >= 1024) {\n        size = util.formatNumber(size / 1024, 0) + \" KiB\";\n      } else {\n        size = util.formatNumber(size, 0) + \" bytes\";\n      }\n      return size;\n    };\n    util.bytesFromIP = function(ip) {\n      if (ip.indexOf(\".\") !== -1) {\n        return util.bytesFromIPv4(ip);\n      }\n      if (ip.indexOf(\":\") !== -1) {\n        return util.bytesFromIPv6(ip);\n      }\n      return null;\n    };\n    util.bytesFromIPv4 = function(ip) {\n      ip = ip.split(\".\");\n      if (ip.length !== 4) {\n        return null;\n      }\n      var b = util.createBuffer();\n      for (var i = 0; i < ip.length; ++i) {\n        var num = parseInt(ip[i], 10);\n        if (isNaN(num)) {\n          return null;\n        }\n        b.putByte(num);\n      }\n      return b.getBytes();\n    };\n    util.bytesFromIPv6 = function(ip) {\n      var blanks = 0;\n      ip = ip.split(\":\").filter(function(e) {\n        if (e.length === 0)\n          ++blanks;\n        return true;\n      });\n      var zeros = (8 - ip.length + blanks) * 2;\n      var b = util.createBuffer();\n      for (var i = 0; i < 8; ++i) {\n        if (!ip[i] || ip[i].length === 0) {\n          b.fillWithByte(0, zeros);\n          zeros = 0;\n          continue;\n        }\n        var bytes = util.hexToBytes(ip[i]);\n        if (bytes.length < 2) {\n          b.putByte(0);\n        }\n        b.putBytes(bytes);\n      }\n      return b.getBytes();\n    };\n    util.bytesToIP = function(bytes) {\n      if (bytes.length === 4) {\n        return util.bytesToIPv4(bytes);\n      }\n      if (bytes.length === 16) {\n        return util.bytesToIPv6(bytes);\n      }\n      return null;\n    };\n    util.bytesToIPv4 = function(bytes) {\n      if (bytes.length !== 4) {\n        return null;\n      }\n      var ip = [];\n      for (var i = 0; i < bytes.length; ++i) {\n        ip.push(bytes.charCodeAt(i));\n      }\n      return ip.join(\".\");\n    };\n    util.bytesToIPv6 = function(bytes) {\n      if (bytes.length !== 16) {\n        return null;\n      }\n      var ip = [];\n      var zeroGroups = [];\n      var zeroMaxGroup = 0;\n      for (var i = 0; i < bytes.length; i += 2) {\n        var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);\n        while (hex[0] === \"0\" && hex !== \"0\") {\n          hex = hex.substr(1);\n        }\n        if (hex === \"0\") {\n          var last = zeroGroups[zeroGroups.length - 1];\n          var idx = ip.length;\n          if (!last || idx !== last.end + 1) {\n            zeroGroups.push({ start: idx, end: idx });\n          } else {\n            last.end = idx;\n            if (last.end - last.start > zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start) {\n              zeroMaxGroup = zeroGroups.length - 1;\n            }\n          }\n        }\n        ip.push(hex);\n      }\n      if (zeroGroups.length > 0) {\n        var group = zeroGroups[zeroMaxGroup];\n        if (group.end - group.start > 0) {\n          ip.splice(group.start, group.end - group.start + 1, \"\");\n          if (group.start === 0) {\n            ip.unshift(\"\");\n          }\n          if (group.end === 7) {\n            ip.push(\"\");\n          }\n        }\n      }\n      return ip.join(\":\");\n    };\n    util.estimateCores = function(options, callback) {\n      if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n      }\n      options = options || {};\n      if (\"cores\" in util && !options.update) {\n        return callback(null, util.cores);\n      }\n      if (typeof navigator !== \"undefined\" && \"hardwareConcurrency\" in navigator && navigator.hardwareConcurrency > 0) {\n        util.cores = navigator.hardwareConcurrency;\n        return callback(null, util.cores);\n      }\n      if (typeof Worker === \"undefined\") {\n        util.cores = 1;\n        return callback(null, util.cores);\n      }\n      if (typeof Blob === \"undefined\") {\n        util.cores = 2;\n        return callback(null, util.cores);\n      }\n      var blobUrl = URL.createObjectURL(new Blob([\n        \"(\",\n        function() {\n          self.addEventListener(\"message\", function(e) {\n            var st = Date.now();\n            var et = st + 4;\n            while (Date.now() < et)\n              ;\n            self.postMessage({ st, et });\n          });\n        }.toString(),\n        \")()\"\n      ], { type: \"application/javascript\" }));\n      sample([], 5, 16);\n      function sample(max, samples, numWorkers) {\n        if (samples === 0) {\n          var avg = Math.floor(max.reduce(function(avg2, x) {\n            return avg2 + x;\n          }, 0) / max.length);\n          util.cores = Math.max(1, avg);\n          URL.revokeObjectURL(blobUrl);\n          return callback(null, util.cores);\n        }\n        map(numWorkers, function(err, results) {\n          max.push(reduce(numWorkers, results));\n          sample(max, samples - 1, numWorkers);\n        });\n      }\n      function map(numWorkers, callback2) {\n        var workers = [];\n        var results = [];\n        for (var i = 0; i < numWorkers; ++i) {\n          var worker = new Worker(blobUrl);\n          worker.addEventListener(\"message\", function(e) {\n            results.push(e.data);\n            if (results.length === numWorkers) {\n              for (var i2 = 0; i2 < numWorkers; ++i2) {\n                workers[i2].terminate();\n              }\n              callback2(null, results);\n            }\n          });\n          workers.push(worker);\n        }\n        for (var i = 0; i < numWorkers; ++i) {\n          workers[i].postMessage(i);\n        }\n      }\n      function reduce(numWorkers, results) {\n        var overlaps = [];\n        for (var n = 0; n < numWorkers; ++n) {\n          var r1 = results[n];\n          var overlap = overlaps[n] = [];\n          for (var i = 0; i < numWorkers; ++i) {\n            if (n === i) {\n              continue;\n            }\n            var r2 = results[i];\n            if (r1.st > r2.st && r1.st < r2.et || r2.st > r1.st && r2.st < r1.et) {\n              overlap.push(i);\n            }\n          }\n        }\n        return overlaps.reduce(function(max, overlap2) {\n          return Math.max(max, overlap2.length);\n        }, 0);\n      }\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/cipher.js\nvar require_cipher = __commonJS({\n  \"../../node_modules/node-forge/lib/cipher.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    module2.exports = forge.cipher = forge.cipher || {};\n    forge.cipher.algorithms = forge.cipher.algorithms || {};\n    forge.cipher.createCipher = function(algorithm, key) {\n      var api = algorithm;\n      if (typeof api === \"string\") {\n        api = forge.cipher.getAlgorithm(api);\n        if (api) {\n          api = api();\n        }\n      }\n      if (!api) {\n        throw new Error(\"Unsupported algorithm: \" + algorithm);\n      }\n      return new forge.cipher.BlockCipher({\n        algorithm: api,\n        key,\n        decrypt: false\n      });\n    };\n    forge.cipher.createDecipher = function(algorithm, key) {\n      var api = algorithm;\n      if (typeof api === \"string\") {\n        api = forge.cipher.getAlgorithm(api);\n        if (api) {\n          api = api();\n        }\n      }\n      if (!api) {\n        throw new Error(\"Unsupported algorithm: \" + algorithm);\n      }\n      return new forge.cipher.BlockCipher({\n        algorithm: api,\n        key,\n        decrypt: true\n      });\n    };\n    forge.cipher.registerAlgorithm = function(name, algorithm) {\n      name = name.toUpperCase();\n      forge.cipher.algorithms[name] = algorithm;\n    };\n    forge.cipher.getAlgorithm = function(name) {\n      name = name.toUpperCase();\n      if (name in forge.cipher.algorithms) {\n        return forge.cipher.algorithms[name];\n      }\n      return null;\n    };\n    var BlockCipher = forge.cipher.BlockCipher = function(options) {\n      this.algorithm = options.algorithm;\n      this.mode = this.algorithm.mode;\n      this.blockSize = this.mode.blockSize;\n      this._finish = false;\n      this._input = null;\n      this.output = null;\n      this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;\n      this._decrypt = options.decrypt;\n      this.algorithm.initialize(options);\n    };\n    BlockCipher.prototype.start = function(options) {\n      options = options || {};\n      var opts = {};\n      for (var key in options) {\n        opts[key] = options[key];\n      }\n      opts.decrypt = this._decrypt;\n      this._finish = false;\n      this._input = forge.util.createBuffer();\n      this.output = options.output || forge.util.createBuffer();\n      this.mode.start(opts);\n    };\n    BlockCipher.prototype.update = function(input) {\n      if (input) {\n        this._input.putBuffer(input);\n      }\n      while (!this._op.call(this.mode, this._input, this.output, this._finish) && !this._finish) {\n      }\n      this._input.compact();\n    };\n    BlockCipher.prototype.finish = function(pad) {\n      if (pad && (this.mode.name === \"ECB\" || this.mode.name === \"CBC\")) {\n        this.mode.pad = function(input) {\n          return pad(this.blockSize, input, false);\n        };\n        this.mode.unpad = function(output) {\n          return pad(this.blockSize, output, true);\n        };\n      }\n      var options = {};\n      options.decrypt = this._decrypt;\n      options.overflow = this._input.length() % this.blockSize;\n      if (!this._decrypt && this.mode.pad) {\n        if (!this.mode.pad(this._input, options)) {\n          return false;\n        }\n      }\n      this._finish = true;\n      this.update();\n      if (this._decrypt && this.mode.unpad) {\n        if (!this.mode.unpad(this.output, options)) {\n          return false;\n        }\n      }\n      if (this.mode.afterFinish) {\n        if (!this.mode.afterFinish(this.output, options)) {\n          return false;\n        }\n      }\n      return true;\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/cipherModes.js\nvar require_cipherModes = __commonJS({\n  \"../../node_modules/node-forge/lib/cipherModes.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    forge.cipher = forge.cipher || {};\n    var modes = module2.exports = forge.cipher.modes = forge.cipher.modes || {};\n    modes.ecb = function(options) {\n      options = options || {};\n      this.name = \"ECB\";\n      this.cipher = options.cipher;\n      this.blockSize = options.blockSize || 16;\n      this._ints = this.blockSize / 4;\n      this._inBlock = new Array(this._ints);\n      this._outBlock = new Array(this._ints);\n    };\n    modes.ecb.prototype.start = function(options) {\n    };\n    modes.ecb.prototype.encrypt = function(input, output, finish) {\n      if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n        return true;\n      }\n      for (var i = 0; i < this._ints; ++i) {\n        this._inBlock[i] = input.getInt32();\n      }\n      this.cipher.encrypt(this._inBlock, this._outBlock);\n      for (var i = 0; i < this._ints; ++i) {\n        output.putInt32(this._outBlock[i]);\n      }\n    };\n    modes.ecb.prototype.decrypt = function(input, output, finish) {\n      if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n        return true;\n      }\n      for (var i = 0; i < this._ints; ++i) {\n        this._inBlock[i] = input.getInt32();\n      }\n      this.cipher.decrypt(this._inBlock, this._outBlock);\n      for (var i = 0; i < this._ints; ++i) {\n        output.putInt32(this._outBlock[i]);\n      }\n    };\n    modes.ecb.prototype.pad = function(input, options) {\n      var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();\n      input.fillWithByte(padding, padding);\n      return true;\n    };\n    modes.ecb.prototype.unpad = function(output, options) {\n      if (options.overflow > 0) {\n        return false;\n      }\n      var len = output.length();\n      var count = output.at(len - 1);\n      if (count > this.blockSize << 2) {\n        return false;\n      }\n      output.truncate(count);\n      return true;\n    };\n    modes.cbc = function(options) {\n      options = options || {};\n      this.name = \"CBC\";\n      this.cipher = options.cipher;\n      this.blockSize = options.blockSize || 16;\n      this._ints = this.blockSize / 4;\n      this._inBlock = new Array(this._ints);\n      this._outBlock = new Array(this._ints);\n    };\n    modes.cbc.prototype.start = function(options) {\n      if (options.iv === null) {\n        if (!this._prev) {\n          throw new Error(\"Invalid IV parameter.\");\n        }\n        this._iv = this._prev.slice(0);\n      } else if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n      } else {\n        this._iv = transformIV(options.iv, this.blockSize);\n        this._prev = this._iv.slice(0);\n      }\n    };\n    modes.cbc.prototype.encrypt = function(input, output, finish) {\n      if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n        return true;\n      }\n      for (var i = 0; i < this._ints; ++i) {\n        this._inBlock[i] = this._prev[i] ^ input.getInt32();\n      }\n      this.cipher.encrypt(this._inBlock, this._outBlock);\n      for (var i = 0; i < this._ints; ++i) {\n        output.putInt32(this._outBlock[i]);\n      }\n      this._prev = this._outBlock;\n    };\n    modes.cbc.prototype.decrypt = function(input, output, finish) {\n      if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n        return true;\n      }\n      for (var i = 0; i < this._ints; ++i) {\n        this._inBlock[i] = input.getInt32();\n      }\n      this.cipher.decrypt(this._inBlock, this._outBlock);\n      for (var i = 0; i < this._ints; ++i) {\n        output.putInt32(this._prev[i] ^ this._outBlock[i]);\n      }\n      this._prev = this._inBlock.slice(0);\n    };\n    modes.cbc.prototype.pad = function(input, options) {\n      var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();\n      input.fillWithByte(padding, padding);\n      return true;\n    };\n    modes.cbc.prototype.unpad = function(output, options) {\n      if (options.overflow > 0) {\n        return false;\n      }\n      var len = output.length();\n      var count = output.at(len - 1);\n      if (count > this.blockSize << 2) {\n        return false;\n      }\n      output.truncate(count);\n      return true;\n    };\n    modes.cfb = function(options) {\n      options = options || {};\n      this.name = \"CFB\";\n      this.cipher = options.cipher;\n      this.blockSize = options.blockSize || 16;\n      this._ints = this.blockSize / 4;\n      this._inBlock = null;\n      this._outBlock = new Array(this._ints);\n      this._partialBlock = new Array(this._ints);\n      this._partialOutput = forge.util.createBuffer();\n      this._partialBytes = 0;\n    };\n    modes.cfb.prototype.start = function(options) {\n      if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n      }\n      this._iv = transformIV(options.iv, this.blockSize);\n      this._inBlock = this._iv.slice(0);\n      this._partialBytes = 0;\n    };\n    modes.cfb.prototype.encrypt = function(input, output, finish) {\n      var inputLength = input.length();\n      if (inputLength === 0) {\n        return true;\n      }\n      this.cipher.encrypt(this._inBlock, this._outBlock);\n      if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        for (var i = 0; i < this._ints; ++i) {\n          this._inBlock[i] = input.getInt32() ^ this._outBlock[i];\n          output.putInt32(this._inBlock[i]);\n        }\n        return;\n      }\n      var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n      if (partialBytes > 0) {\n        partialBytes = this.blockSize - partialBytes;\n      }\n      this._partialOutput.clear();\n      for (var i = 0; i < this._ints; ++i) {\n        this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];\n        this._partialOutput.putInt32(this._partialBlock[i]);\n      }\n      if (partialBytes > 0) {\n        input.read -= this.blockSize;\n      } else {\n        for (var i = 0; i < this._ints; ++i) {\n          this._inBlock[i] = this._partialBlock[i];\n        }\n      }\n      if (this._partialBytes > 0) {\n        this._partialOutput.getBytes(this._partialBytes);\n      }\n      if (partialBytes > 0 && !finish) {\n        output.putBytes(this._partialOutput.getBytes(\n          partialBytes - this._partialBytes\n        ));\n        this._partialBytes = partialBytes;\n        return true;\n      }\n      output.putBytes(this._partialOutput.getBytes(\n        inputLength - this._partialBytes\n      ));\n      this._partialBytes = 0;\n    };\n    modes.cfb.prototype.decrypt = function(input, output, finish) {\n      var inputLength = input.length();\n      if (inputLength === 0) {\n        return true;\n      }\n      this.cipher.encrypt(this._inBlock, this._outBlock);\n      if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        for (var i = 0; i < this._ints; ++i) {\n          this._inBlock[i] = input.getInt32();\n          output.putInt32(this._inBlock[i] ^ this._outBlock[i]);\n        }\n        return;\n      }\n      var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n      if (partialBytes > 0) {\n        partialBytes = this.blockSize - partialBytes;\n      }\n      this._partialOutput.clear();\n      for (var i = 0; i < this._ints; ++i) {\n        this._partialBlock[i] = input.getInt32();\n        this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);\n      }\n      if (partialBytes > 0) {\n        input.read -= this.blockSize;\n      } else {\n        for (var i = 0; i < this._ints; ++i) {\n          this._inBlock[i] = this._partialBlock[i];\n        }\n      }\n      if (this._partialBytes > 0) {\n        this._partialOutput.getBytes(this._partialBytes);\n      }\n      if (partialBytes > 0 && !finish) {\n        output.putBytes(this._partialOutput.getBytes(\n          partialBytes - this._partialBytes\n        ));\n        this._partialBytes = partialBytes;\n        return true;\n      }\n      output.putBytes(this._partialOutput.getBytes(\n        inputLength - this._partialBytes\n      ));\n      this._partialBytes = 0;\n    };\n    modes.ofb = function(options) {\n      options = options || {};\n      this.name = \"OFB\";\n      this.cipher = options.cipher;\n      this.blockSize = options.blockSize || 16;\n      this._ints = this.blockSize / 4;\n      this._inBlock = null;\n      this._outBlock = new Array(this._ints);\n      this._partialOutput = forge.util.createBuffer();\n      this._partialBytes = 0;\n    };\n    modes.ofb.prototype.start = function(options) {\n      if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n      }\n      this._iv = transformIV(options.iv, this.blockSize);\n      this._inBlock = this._iv.slice(0);\n      this._partialBytes = 0;\n    };\n    modes.ofb.prototype.encrypt = function(input, output, finish) {\n      var inputLength = input.length();\n      if (input.length() === 0) {\n        return true;\n      }\n      this.cipher.encrypt(this._inBlock, this._outBlock);\n      if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        for (var i = 0; i < this._ints; ++i) {\n          output.putInt32(input.getInt32() ^ this._outBlock[i]);\n          this._inBlock[i] = this._outBlock[i];\n        }\n        return;\n      }\n      var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n      if (partialBytes > 0) {\n        partialBytes = this.blockSize - partialBytes;\n      }\n      this._partialOutput.clear();\n      for (var i = 0; i < this._ints; ++i) {\n        this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n      }\n      if (partialBytes > 0) {\n        input.read -= this.blockSize;\n      } else {\n        for (var i = 0; i < this._ints; ++i) {\n          this._inBlock[i] = this._outBlock[i];\n        }\n      }\n      if (this._partialBytes > 0) {\n        this._partialOutput.getBytes(this._partialBytes);\n      }\n      if (partialBytes > 0 && !finish) {\n        output.putBytes(this._partialOutput.getBytes(\n          partialBytes - this._partialBytes\n        ));\n        this._partialBytes = partialBytes;\n        return true;\n      }\n      output.putBytes(this._partialOutput.getBytes(\n        inputLength - this._partialBytes\n      ));\n      this._partialBytes = 0;\n    };\n    modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;\n    modes.ctr = function(options) {\n      options = options || {};\n      this.name = \"CTR\";\n      this.cipher = options.cipher;\n      this.blockSize = options.blockSize || 16;\n      this._ints = this.blockSize / 4;\n      this._inBlock = null;\n      this._outBlock = new Array(this._ints);\n      this._partialOutput = forge.util.createBuffer();\n      this._partialBytes = 0;\n    };\n    modes.ctr.prototype.start = function(options) {\n      if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n      }\n      this._iv = transformIV(options.iv, this.blockSize);\n      this._inBlock = this._iv.slice(0);\n      this._partialBytes = 0;\n    };\n    modes.ctr.prototype.encrypt = function(input, output, finish) {\n      var inputLength = input.length();\n      if (inputLength === 0) {\n        return true;\n      }\n      this.cipher.encrypt(this._inBlock, this._outBlock);\n      if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        for (var i = 0; i < this._ints; ++i) {\n          output.putInt32(input.getInt32() ^ this._outBlock[i]);\n        }\n      } else {\n        var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n        if (partialBytes > 0) {\n          partialBytes = this.blockSize - partialBytes;\n        }\n        this._partialOutput.clear();\n        for (var i = 0; i < this._ints; ++i) {\n          this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n        }\n        if (partialBytes > 0) {\n          input.read -= this.blockSize;\n        }\n        if (this._partialBytes > 0) {\n          this._partialOutput.getBytes(this._partialBytes);\n        }\n        if (partialBytes > 0 && !finish) {\n          output.putBytes(this._partialOutput.getBytes(\n            partialBytes - this._partialBytes\n          ));\n          this._partialBytes = partialBytes;\n          return true;\n        }\n        output.putBytes(this._partialOutput.getBytes(\n          inputLength - this._partialBytes\n        ));\n        this._partialBytes = 0;\n      }\n      inc32(this._inBlock);\n    };\n    modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;\n    modes.gcm = function(options) {\n      options = options || {};\n      this.name = \"GCM\";\n      this.cipher = options.cipher;\n      this.blockSize = options.blockSize || 16;\n      this._ints = this.blockSize / 4;\n      this._inBlock = new Array(this._ints);\n      this._outBlock = new Array(this._ints);\n      this._partialOutput = forge.util.createBuffer();\n      this._partialBytes = 0;\n      this._R = 3774873600;\n    };\n    modes.gcm.prototype.start = function(options) {\n      if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n      }\n      var iv = forge.util.createBuffer(options.iv);\n      this._cipherLength = 0;\n      var additionalData;\n      if (\"additionalData\" in options) {\n        additionalData = forge.util.createBuffer(options.additionalData);\n      } else {\n        additionalData = forge.util.createBuffer();\n      }\n      if (\"tagLength\" in options) {\n        this._tagLength = options.tagLength;\n      } else {\n        this._tagLength = 128;\n      }\n      this._tag = null;\n      if (options.decrypt) {\n        this._tag = forge.util.createBuffer(options.tag).getBytes();\n        if (this._tag.length !== this._tagLength / 8) {\n          throw new Error(\"Authentication tag does not match tag length.\");\n        }\n      }\n      this._hashBlock = new Array(this._ints);\n      this.tag = null;\n      this._hashSubkey = new Array(this._ints);\n      this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);\n      this.componentBits = 4;\n      this._m = this.generateHashTable(this._hashSubkey, this.componentBits);\n      var ivLength = iv.length();\n      if (ivLength === 12) {\n        this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];\n      } else {\n        this._j0 = [0, 0, 0, 0];\n        while (iv.length() > 0) {\n          this._j0 = this.ghash(\n            this._hashSubkey,\n            this._j0,\n            [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]\n          );\n        }\n        this._j0 = this.ghash(\n          this._hashSubkey,\n          this._j0,\n          [0, 0].concat(from64To32(ivLength * 8))\n        );\n      }\n      this._inBlock = this._j0.slice(0);\n      inc32(this._inBlock);\n      this._partialBytes = 0;\n      additionalData = forge.util.createBuffer(additionalData);\n      this._aDataLength = from64To32(additionalData.length() * 8);\n      var overflow = additionalData.length() % this.blockSize;\n      if (overflow) {\n        additionalData.fillWithByte(0, this.blockSize - overflow);\n      }\n      this._s = [0, 0, 0, 0];\n      while (additionalData.length() > 0) {\n        this._s = this.ghash(this._hashSubkey, this._s, [\n          additionalData.getInt32(),\n          additionalData.getInt32(),\n          additionalData.getInt32(),\n          additionalData.getInt32()\n        ]);\n      }\n    };\n    modes.gcm.prototype.encrypt = function(input, output, finish) {\n      var inputLength = input.length();\n      if (inputLength === 0) {\n        return true;\n      }\n      this.cipher.encrypt(this._inBlock, this._outBlock);\n      if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        for (var i = 0; i < this._ints; ++i) {\n          output.putInt32(this._outBlock[i] ^= input.getInt32());\n        }\n        this._cipherLength += this.blockSize;\n      } else {\n        var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n        if (partialBytes > 0) {\n          partialBytes = this.blockSize - partialBytes;\n        }\n        this._partialOutput.clear();\n        for (var i = 0; i < this._ints; ++i) {\n          this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n        }\n        if (partialBytes <= 0 || finish) {\n          if (finish) {\n            var overflow = inputLength % this.blockSize;\n            this._cipherLength += overflow;\n            this._partialOutput.truncate(this.blockSize - overflow);\n          } else {\n            this._cipherLength += this.blockSize;\n          }\n          for (var i = 0; i < this._ints; ++i) {\n            this._outBlock[i] = this._partialOutput.getInt32();\n          }\n          this._partialOutput.read -= this.blockSize;\n        }\n        if (this._partialBytes > 0) {\n          this._partialOutput.getBytes(this._partialBytes);\n        }\n        if (partialBytes > 0 && !finish) {\n          input.read -= this.blockSize;\n          output.putBytes(this._partialOutput.getBytes(\n            partialBytes - this._partialBytes\n          ));\n          this._partialBytes = partialBytes;\n          return true;\n        }\n        output.putBytes(this._partialOutput.getBytes(\n          inputLength - this._partialBytes\n        ));\n        this._partialBytes = 0;\n      }\n      this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);\n      inc32(this._inBlock);\n    };\n    modes.gcm.prototype.decrypt = function(input, output, finish) {\n      var inputLength = input.length();\n      if (inputLength < this.blockSize && !(finish && inputLength > 0)) {\n        return true;\n      }\n      this.cipher.encrypt(this._inBlock, this._outBlock);\n      inc32(this._inBlock);\n      this._hashBlock[0] = input.getInt32();\n      this._hashBlock[1] = input.getInt32();\n      this._hashBlock[2] = input.getInt32();\n      this._hashBlock[3] = input.getInt32();\n      this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);\n      for (var i = 0; i < this._ints; ++i) {\n        output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);\n      }\n      if (inputLength < this.blockSize) {\n        this._cipherLength += inputLength % this.blockSize;\n      } else {\n        this._cipherLength += this.blockSize;\n      }\n    };\n    modes.gcm.prototype.afterFinish = function(output, options) {\n      var rval = true;\n      if (options.decrypt && options.overflow) {\n        output.truncate(this.blockSize - options.overflow);\n      }\n      this.tag = forge.util.createBuffer();\n      var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));\n      this._s = this.ghash(this._hashSubkey, this._s, lengths);\n      var tag = [];\n      this.cipher.encrypt(this._j0, tag);\n      for (var i = 0; i < this._ints; ++i) {\n        this.tag.putInt32(this._s[i] ^ tag[i]);\n      }\n      this.tag.truncate(this.tag.length() % (this._tagLength / 8));\n      if (options.decrypt && this.tag.bytes() !== this._tag) {\n        rval = false;\n      }\n      return rval;\n    };\n    modes.gcm.prototype.multiply = function(x, y) {\n      var z_i = [0, 0, 0, 0];\n      var v_i = y.slice(0);\n      for (var i = 0; i < 128; ++i) {\n        var x_i = x[i / 32 | 0] & 1 << 31 - i % 32;\n        if (x_i) {\n          z_i[0] ^= v_i[0];\n          z_i[1] ^= v_i[1];\n          z_i[2] ^= v_i[2];\n          z_i[3] ^= v_i[3];\n        }\n        this.pow(v_i, v_i);\n      }\n      return z_i;\n    };\n    modes.gcm.prototype.pow = function(x, out) {\n      var lsb = x[3] & 1;\n      for (var i = 3; i > 0; --i) {\n        out[i] = x[i] >>> 1 | (x[i - 1] & 1) << 31;\n      }\n      out[0] = x[0] >>> 1;\n      if (lsb) {\n        out[0] ^= this._R;\n      }\n    };\n    modes.gcm.prototype.tableMultiply = function(x) {\n      var z = [0, 0, 0, 0];\n      for (var i = 0; i < 32; ++i) {\n        var idx = i / 8 | 0;\n        var x_i = x[idx] >>> (7 - i % 8) * 4 & 15;\n        var ah = this._m[i][x_i];\n        z[0] ^= ah[0];\n        z[1] ^= ah[1];\n        z[2] ^= ah[2];\n        z[3] ^= ah[3];\n      }\n      return z;\n    };\n    modes.gcm.prototype.ghash = function(h, y, x) {\n      y[0] ^= x[0];\n      y[1] ^= x[1];\n      y[2] ^= x[2];\n      y[3] ^= x[3];\n      return this.tableMultiply(y);\n    };\n    modes.gcm.prototype.generateHashTable = function(h, bits) {\n      var multiplier = 8 / bits;\n      var perInt = 4 * multiplier;\n      var size = 16 * multiplier;\n      var m = new Array(size);\n      for (var i = 0; i < size; ++i) {\n        var tmp = [0, 0, 0, 0];\n        var idx = i / perInt | 0;\n        var shft = (perInt - 1 - i % perInt) * bits;\n        tmp[idx] = 1 << bits - 1 << shft;\n        m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);\n      }\n      return m;\n    };\n    modes.gcm.prototype.generateSubHashTable = function(mid, bits) {\n      var size = 1 << bits;\n      var half = size >>> 1;\n      var m = new Array(size);\n      m[half] = mid.slice(0);\n      var i = half >>> 1;\n      while (i > 0) {\n        this.pow(m[2 * i], m[i] = []);\n        i >>= 1;\n      }\n      i = 2;\n      while (i < half) {\n        for (var j = 1; j < i; ++j) {\n          var m_i = m[i];\n          var m_j = m[j];\n          m[i + j] = [\n            m_i[0] ^ m_j[0],\n            m_i[1] ^ m_j[1],\n            m_i[2] ^ m_j[2],\n            m_i[3] ^ m_j[3]\n          ];\n        }\n        i *= 2;\n      }\n      m[0] = [0, 0, 0, 0];\n      for (i = half + 1; i < size; ++i) {\n        var c = m[i ^ half];\n        m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];\n      }\n      return m;\n    };\n    function transformIV(iv, blockSize) {\n      if (typeof iv === \"string\") {\n        iv = forge.util.createBuffer(iv);\n      }\n      if (forge.util.isArray(iv) && iv.length > 4) {\n        var tmp = iv;\n        iv = forge.util.createBuffer();\n        for (var i = 0; i < tmp.length; ++i) {\n          iv.putByte(tmp[i]);\n        }\n      }\n      if (iv.length() < blockSize) {\n        throw new Error(\n          \"Invalid IV length; got \" + iv.length() + \" bytes and expected \" + blockSize + \" bytes.\"\n        );\n      }\n      if (!forge.util.isArray(iv)) {\n        var ints = [];\n        var blocks = blockSize / 4;\n        for (var i = 0; i < blocks; ++i) {\n          ints.push(iv.getInt32());\n        }\n        iv = ints;\n      }\n      return iv;\n    }\n    function inc32(block) {\n      block[block.length - 1] = block[block.length - 1] + 1 & 4294967295;\n    }\n    function from64To32(num) {\n      return [num / 4294967296 | 0, num & 4294967295];\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/aes.js\nvar require_aes = __commonJS({\n  \"../../node_modules/node-forge/lib/aes.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_cipher();\n    require_cipherModes();\n    require_util();\n    module2.exports = forge.aes = forge.aes || {};\n    forge.aes.startEncrypting = function(key, iv, output, mode) {\n      var cipher = _createCipher({\n        key,\n        output,\n        decrypt: false,\n        mode\n      });\n      cipher.start(iv);\n      return cipher;\n    };\n    forge.aes.createEncryptionCipher = function(key, mode) {\n      return _createCipher({\n        key,\n        output: null,\n        decrypt: false,\n        mode\n      });\n    };\n    forge.aes.startDecrypting = function(key, iv, output, mode) {\n      var cipher = _createCipher({\n        key,\n        output,\n        decrypt: true,\n        mode\n      });\n      cipher.start(iv);\n      return cipher;\n    };\n    forge.aes.createDecryptionCipher = function(key, mode) {\n      return _createCipher({\n        key,\n        output: null,\n        decrypt: true,\n        mode\n      });\n    };\n    forge.aes.Algorithm = function(name, mode) {\n      if (!init2) {\n        initialize();\n      }\n      var self2 = this;\n      self2.name = name;\n      self2.mode = new mode({\n        blockSize: 16,\n        cipher: {\n          encrypt: function(inBlock, outBlock) {\n            return _updateBlock(self2._w, inBlock, outBlock, false);\n          },\n          decrypt: function(inBlock, outBlock) {\n            return _updateBlock(self2._w, inBlock, outBlock, true);\n          }\n        }\n      });\n      self2._init = false;\n    };\n    forge.aes.Algorithm.prototype.initialize = function(options) {\n      if (this._init) {\n        return;\n      }\n      var key = options.key;\n      var tmp;\n      if (typeof key === \"string\" && (key.length === 16 || key.length === 24 || key.length === 32)) {\n        key = forge.util.createBuffer(key);\n      } else if (forge.util.isArray(key) && (key.length === 16 || key.length === 24 || key.length === 32)) {\n        tmp = key;\n        key = forge.util.createBuffer();\n        for (var i = 0; i < tmp.length; ++i) {\n          key.putByte(tmp[i]);\n        }\n      }\n      if (!forge.util.isArray(key)) {\n        tmp = key;\n        key = [];\n        var len = tmp.length();\n        if (len === 16 || len === 24 || len === 32) {\n          len = len >>> 2;\n          for (var i = 0; i < len; ++i) {\n            key.push(tmp.getInt32());\n          }\n        }\n      }\n      if (!forge.util.isArray(key) || !(key.length === 4 || key.length === 6 || key.length === 8)) {\n        throw new Error(\"Invalid key parameter.\");\n      }\n      var mode = this.mode.name;\n      var encryptOp = [\"CFB\", \"OFB\", \"CTR\", \"GCM\"].indexOf(mode) !== -1;\n      this._w = _expandKey(key, options.decrypt && !encryptOp);\n      this._init = true;\n    };\n    forge.aes._expandKey = function(key, decrypt) {\n      if (!init2) {\n        initialize();\n      }\n      return _expandKey(key, decrypt);\n    };\n    forge.aes._updateBlock = _updateBlock;\n    registerAlgorithm(\"AES-ECB\", forge.cipher.modes.ecb);\n    registerAlgorithm(\"AES-CBC\", forge.cipher.modes.cbc);\n    registerAlgorithm(\"AES-CFB\", forge.cipher.modes.cfb);\n    registerAlgorithm(\"AES-OFB\", forge.cipher.modes.ofb);\n    registerAlgorithm(\"AES-CTR\", forge.cipher.modes.ctr);\n    registerAlgorithm(\"AES-GCM\", forge.cipher.modes.gcm);\n    function registerAlgorithm(name, mode) {\n      var factory = function() {\n        return new forge.aes.Algorithm(name, mode);\n      };\n      forge.cipher.registerAlgorithm(name, factory);\n    }\n    var init2 = false;\n    var Nb = 4;\n    var sbox;\n    var isbox;\n    var rcon;\n    var mix;\n    var imix;\n    function initialize() {\n      init2 = true;\n      rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];\n      var xtime = new Array(256);\n      for (var i = 0; i < 128; ++i) {\n        xtime[i] = i << 1;\n        xtime[i + 128] = i + 128 << 1 ^ 283;\n      }\n      sbox = new Array(256);\n      isbox = new Array(256);\n      mix = new Array(4);\n      imix = new Array(4);\n      for (var i = 0; i < 4; ++i) {\n        mix[i] = new Array(256);\n        imix[i] = new Array(256);\n      }\n      var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;\n      for (var i = 0; i < 256; ++i) {\n        sx = ei ^ ei << 1 ^ ei << 2 ^ ei << 3 ^ ei << 4;\n        sx = sx >> 8 ^ sx & 255 ^ 99;\n        sbox[e] = sx;\n        isbox[sx] = e;\n        sx2 = xtime[sx];\n        e2 = xtime[e];\n        e4 = xtime[e2];\n        e8 = xtime[e4];\n        me = sx2 << 24 ^ // 2\n        sx << 16 ^ // 1\n        sx << 8 ^ // 1\n        (sx ^ sx2);\n        ime = (e2 ^ e4 ^ e8) << 24 ^ // E (14)\n        (e ^ e8) << 16 ^ // 9\n        (e ^ e4 ^ e8) << 8 ^ // D (13)\n        (e ^ e2 ^ e8);\n        for (var n = 0; n < 4; ++n) {\n          mix[n][e] = me;\n          imix[n][sx] = ime;\n          me = me << 24 | me >>> 8;\n          ime = ime << 24 | ime >>> 8;\n        }\n        if (e === 0) {\n          e = ei = 1;\n        } else {\n          e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];\n          ei ^= xtime[xtime[ei]];\n        }\n      }\n    }\n    function _expandKey(key, decrypt) {\n      var w = key.slice(0);\n      var temp, iNk = 1;\n      var Nk = w.length;\n      var Nr1 = Nk + 6 + 1;\n      var end = Nb * Nr1;\n      for (var i = Nk; i < end; ++i) {\n        temp = w[i - 1];\n        if (i % Nk === 0) {\n          temp = sbox[temp >>> 16 & 255] << 24 ^ sbox[temp >>> 8 & 255] << 16 ^ sbox[temp & 255] << 8 ^ sbox[temp >>> 24] ^ rcon[iNk] << 24;\n          iNk++;\n        } else if (Nk > 6 && i % Nk === 4) {\n          temp = sbox[temp >>> 24] << 24 ^ sbox[temp >>> 16 & 255] << 16 ^ sbox[temp >>> 8 & 255] << 8 ^ sbox[temp & 255];\n        }\n        w[i] = w[i - Nk] ^ temp;\n      }\n      if (decrypt) {\n        var tmp;\n        var m0 = imix[0];\n        var m1 = imix[1];\n        var m2 = imix[2];\n        var m3 = imix[3];\n        var wnew = w.slice(0);\n        end = w.length;\n        for (var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {\n          if (i === 0 || i === end - Nb) {\n            wnew[i] = w[wi];\n            wnew[i + 1] = w[wi + 3];\n            wnew[i + 2] = w[wi + 2];\n            wnew[i + 3] = w[wi + 1];\n          } else {\n            for (var n = 0; n < Nb; ++n) {\n              tmp = w[wi + n];\n              wnew[i + (3 & -n)] = m0[sbox[tmp >>> 24]] ^ m1[sbox[tmp >>> 16 & 255]] ^ m2[sbox[tmp >>> 8 & 255]] ^ m3[sbox[tmp & 255]];\n            }\n          }\n        }\n        w = wnew;\n      }\n      return w;\n    }\n    function _updateBlock(w, input, output, decrypt) {\n      var Nr = w.length / 4 - 1;\n      var m0, m1, m2, m3, sub;\n      if (decrypt) {\n        m0 = imix[0];\n        m1 = imix[1];\n        m2 = imix[2];\n        m3 = imix[3];\n        sub = isbox;\n      } else {\n        m0 = mix[0];\n        m1 = mix[1];\n        m2 = mix[2];\n        m3 = mix[3];\n        sub = sbox;\n      }\n      var a, b, c, d, a2, b2, c2;\n      a = input[0] ^ w[0];\n      b = input[decrypt ? 3 : 1] ^ w[1];\n      c = input[2] ^ w[2];\n      d = input[decrypt ? 1 : 3] ^ w[3];\n      var i = 3;\n      for (var round = 1; round < Nr; ++round) {\n        a2 = m0[a >>> 24] ^ m1[b >>> 16 & 255] ^ m2[c >>> 8 & 255] ^ m3[d & 255] ^ w[++i];\n        b2 = m0[b >>> 24] ^ m1[c >>> 16 & 255] ^ m2[d >>> 8 & 255] ^ m3[a & 255] ^ w[++i];\n        c2 = m0[c >>> 24] ^ m1[d >>> 16 & 255] ^ m2[a >>> 8 & 255] ^ m3[b & 255] ^ w[++i];\n        d = m0[d >>> 24] ^ m1[a >>> 16 & 255] ^ m2[b >>> 8 & 255] ^ m3[c & 255] ^ w[++i];\n        a = a2;\n        b = b2;\n        c = c2;\n      }\n      output[0] = sub[a >>> 24] << 24 ^ sub[b >>> 16 & 255] << 16 ^ sub[c >>> 8 & 255] << 8 ^ sub[d & 255] ^ w[++i];\n      output[decrypt ? 3 : 1] = sub[b >>> 24] << 24 ^ sub[c >>> 16 & 255] << 16 ^ sub[d >>> 8 & 255] << 8 ^ sub[a & 255] ^ w[++i];\n      output[2] = sub[c >>> 24] << 24 ^ sub[d >>> 16 & 255] << 16 ^ sub[a >>> 8 & 255] << 8 ^ sub[b & 255] ^ w[++i];\n      output[decrypt ? 1 : 3] = sub[d >>> 24] << 24 ^ sub[a >>> 16 & 255] << 16 ^ sub[b >>> 8 & 255] << 8 ^ sub[c & 255] ^ w[++i];\n    }\n    function _createCipher(options) {\n      options = options || {};\n      var mode = (options.mode || \"CBC\").toUpperCase();\n      var algorithm = \"AES-\" + mode;\n      var cipher;\n      if (options.decrypt) {\n        cipher = forge.cipher.createDecipher(algorithm, options.key);\n      } else {\n        cipher = forge.cipher.createCipher(algorithm, options.key);\n      }\n      var start = cipher.start;\n      cipher.start = function(iv, options2) {\n        var output = null;\n        if (options2 instanceof forge.util.ByteBuffer) {\n          output = options2;\n          options2 = {};\n        }\n        options2 = options2 || {};\n        options2.output = output;\n        options2.iv = iv;\n        start.call(cipher, options2);\n      };\n      return cipher;\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/oids.js\nvar require_oids = __commonJS({\n  \"../../node_modules/node-forge/lib/oids.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    forge.pki = forge.pki || {};\n    var oids = module2.exports = forge.pki.oids = forge.oids = forge.oids || {};\n    function _IN(id, name) {\n      oids[id] = name;\n      oids[name] = id;\n    }\n    function _I_(id, name) {\n      oids[id] = name;\n    }\n    _IN(\"1.2.840.113549.1.1.1\", \"rsaEncryption\");\n    _IN(\"1.2.840.113549.1.1.4\", \"md5WithRSAEncryption\");\n    _IN(\"1.2.840.113549.1.1.5\", \"sha1WithRSAEncryption\");\n    _IN(\"1.2.840.113549.1.1.7\", \"RSAES-OAEP\");\n    _IN(\"1.2.840.113549.1.1.8\", \"mgf1\");\n    _IN(\"1.2.840.113549.1.1.9\", \"pSpecified\");\n    _IN(\"1.2.840.113549.1.1.10\", \"RSASSA-PSS\");\n    _IN(\"1.2.840.113549.1.1.11\", \"sha256WithRSAEncryption\");\n    _IN(\"1.2.840.113549.1.1.12\", \"sha384WithRSAEncryption\");\n    _IN(\"1.2.840.113549.1.1.13\", \"sha512WithRSAEncryption\");\n    _IN(\"1.3.101.112\", \"EdDSA25519\");\n    _IN(\"1.2.840.10040.4.3\", \"dsa-with-sha1\");\n    _IN(\"1.3.14.3.2.7\", \"desCBC\");\n    _IN(\"1.3.14.3.2.26\", \"sha1\");\n    _IN(\"1.3.14.3.2.29\", \"sha1WithRSASignature\");\n    _IN(\"2.16.840.1.101.3.4.2.1\", \"sha256\");\n    _IN(\"2.16.840.1.101.3.4.2.2\", \"sha384\");\n    _IN(\"2.16.840.1.101.3.4.2.3\", \"sha512\");\n    _IN(\"2.16.840.1.101.3.4.2.4\", \"sha224\");\n    _IN(\"2.16.840.1.101.3.4.2.5\", \"sha512-224\");\n    _IN(\"2.16.840.1.101.3.4.2.6\", \"sha512-256\");\n    _IN(\"1.2.840.113549.2.2\", \"md2\");\n    _IN(\"1.2.840.113549.2.5\", \"md5\");\n    _IN(\"1.2.840.113549.1.7.1\", \"data\");\n    _IN(\"1.2.840.113549.1.7.2\", \"signedData\");\n    _IN(\"1.2.840.113549.1.7.3\", \"envelopedData\");\n    _IN(\"1.2.840.113549.1.7.4\", \"signedAndEnvelopedData\");\n    _IN(\"1.2.840.113549.1.7.5\", \"digestedData\");\n    _IN(\"1.2.840.113549.1.7.6\", \"encryptedData\");\n    _IN(\"1.2.840.113549.1.9.1\", \"emailAddress\");\n    _IN(\"1.2.840.113549.1.9.2\", \"unstructuredName\");\n    _IN(\"1.2.840.113549.1.9.3\", \"contentType\");\n    _IN(\"1.2.840.113549.1.9.4\", \"messageDigest\");\n    _IN(\"1.2.840.113549.1.9.5\", \"signingTime\");\n    _IN(\"1.2.840.113549.1.9.6\", \"counterSignature\");\n    _IN(\"1.2.840.113549.1.9.7\", \"challengePassword\");\n    _IN(\"1.2.840.113549.1.9.8\", \"unstructuredAddress\");\n    _IN(\"1.2.840.113549.1.9.14\", \"extensionRequest\");\n    _IN(\"1.2.840.113549.1.9.20\", \"friendlyName\");\n    _IN(\"1.2.840.113549.1.9.21\", \"localKeyId\");\n    _IN(\"1.2.840.113549.1.9.22.1\", \"x509Certificate\");\n    _IN(\"1.2.840.113549.1.12.10.1.1\", \"keyBag\");\n    _IN(\"1.2.840.113549.1.12.10.1.2\", \"pkcs8ShroudedKeyBag\");\n    _IN(\"1.2.840.113549.1.12.10.1.3\", \"certBag\");\n    _IN(\"1.2.840.113549.1.12.10.1.4\", \"crlBag\");\n    _IN(\"1.2.840.113549.1.12.10.1.5\", \"secretBag\");\n    _IN(\"1.2.840.113549.1.12.10.1.6\", \"safeContentsBag\");\n    _IN(\"1.2.840.113549.1.5.13\", \"pkcs5PBES2\");\n    _IN(\"1.2.840.113549.1.5.12\", \"pkcs5PBKDF2\");\n    _IN(\"1.2.840.113549.1.12.1.1\", \"pbeWithSHAAnd128BitRC4\");\n    _IN(\"1.2.840.113549.1.12.1.2\", \"pbeWithSHAAnd40BitRC4\");\n    _IN(\"1.2.840.113549.1.12.1.3\", \"pbeWithSHAAnd3-KeyTripleDES-CBC\");\n    _IN(\"1.2.840.113549.1.12.1.4\", \"pbeWithSHAAnd2-KeyTripleDES-CBC\");\n    _IN(\"1.2.840.113549.1.12.1.5\", \"pbeWithSHAAnd128BitRC2-CBC\");\n    _IN(\"1.2.840.113549.1.12.1.6\", \"pbewithSHAAnd40BitRC2-CBC\");\n    _IN(\"1.2.840.113549.2.7\", \"hmacWithSHA1\");\n    _IN(\"1.2.840.113549.2.8\", \"hmacWithSHA224\");\n    _IN(\"1.2.840.113549.2.9\", \"hmacWithSHA256\");\n    _IN(\"1.2.840.113549.2.10\", \"hmacWithSHA384\");\n    _IN(\"1.2.840.113549.2.11\", \"hmacWithSHA512\");\n    _IN(\"1.2.840.113549.3.7\", \"des-EDE3-CBC\");\n    _IN(\"2.16.840.1.101.3.4.1.2\", \"aes128-CBC\");\n    _IN(\"2.16.840.1.101.3.4.1.22\", \"aes192-CBC\");\n    _IN(\"2.16.840.1.101.3.4.1.42\", \"aes256-CBC\");\n    _IN(\"2.5.4.3\", \"commonName\");\n    _IN(\"2.5.4.4\", \"surname\");\n    _IN(\"2.5.4.5\", \"serialNumber\");\n    _IN(\"2.5.4.6\", \"countryName\");\n    _IN(\"2.5.4.7\", \"localityName\");\n    _IN(\"2.5.4.8\", \"stateOrProvinceName\");\n    _IN(\"2.5.4.9\", \"streetAddress\");\n    _IN(\"2.5.4.10\", \"organizationName\");\n    _IN(\"2.5.4.11\", \"organizationalUnitName\");\n    _IN(\"2.5.4.12\", \"title\");\n    _IN(\"2.5.4.13\", \"description\");\n    _IN(\"2.5.4.15\", \"businessCategory\");\n    _IN(\"2.5.4.17\", \"postalCode\");\n    _IN(\"2.5.4.42\", \"givenName\");\n    _IN(\"1.3.6.1.4.1.311.60.2.1.2\", \"jurisdictionOfIncorporationStateOrProvinceName\");\n    _IN(\"1.3.6.1.4.1.311.60.2.1.3\", \"jurisdictionOfIncorporationCountryName\");\n    _IN(\"2.16.840.1.113730.1.1\", \"nsCertType\");\n    _IN(\"2.16.840.1.113730.1.13\", \"nsComment\");\n    _I_(\"2.5.29.1\", \"authorityKeyIdentifier\");\n    _I_(\"2.5.29.2\", \"keyAttributes\");\n    _I_(\"2.5.29.3\", \"certificatePolicies\");\n    _I_(\"2.5.29.4\", \"keyUsageRestriction\");\n    _I_(\"2.5.29.5\", \"policyMapping\");\n    _I_(\"2.5.29.6\", \"subtreesConstraint\");\n    _I_(\"2.5.29.7\", \"subjectAltName\");\n    _I_(\"2.5.29.8\", \"issuerAltName\");\n    _I_(\"2.5.29.9\", \"subjectDirectoryAttributes\");\n    _I_(\"2.5.29.10\", \"basicConstraints\");\n    _I_(\"2.5.29.11\", \"nameConstraints\");\n    _I_(\"2.5.29.12\", \"policyConstraints\");\n    _I_(\"2.5.29.13\", \"basicConstraints\");\n    _IN(\"2.5.29.14\", \"subjectKeyIdentifier\");\n    _IN(\"2.5.29.15\", \"keyUsage\");\n    _I_(\"2.5.29.16\", \"privateKeyUsagePeriod\");\n    _IN(\"2.5.29.17\", \"subjectAltName\");\n    _IN(\"2.5.29.18\", \"issuerAltName\");\n    _IN(\"2.5.29.19\", \"basicConstraints\");\n    _I_(\"2.5.29.20\", \"cRLNumber\");\n    _I_(\"2.5.29.21\", \"cRLReason\");\n    _I_(\"2.5.29.22\", \"expirationDate\");\n    _I_(\"2.5.29.23\", \"instructionCode\");\n    _I_(\"2.5.29.24\", \"invalidityDate\");\n    _I_(\"2.5.29.25\", \"cRLDistributionPoints\");\n    _I_(\"2.5.29.26\", \"issuingDistributionPoint\");\n    _I_(\"2.5.29.27\", \"deltaCRLIndicator\");\n    _I_(\"2.5.29.28\", \"issuingDistributionPoint\");\n    _I_(\"2.5.29.29\", \"certificateIssuer\");\n    _I_(\"2.5.29.30\", \"nameConstraints\");\n    _IN(\"2.5.29.31\", \"cRLDistributionPoints\");\n    _IN(\"2.5.29.32\", \"certificatePolicies\");\n    _I_(\"2.5.29.33\", \"policyMappings\");\n    _I_(\"2.5.29.34\", \"policyConstraints\");\n    _IN(\"2.5.29.35\", \"authorityKeyIdentifier\");\n    _I_(\"2.5.29.36\", \"policyConstraints\");\n    _IN(\"2.5.29.37\", \"extKeyUsage\");\n    _I_(\"2.5.29.46\", \"freshestCRL\");\n    _I_(\"2.5.29.54\", \"inhibitAnyPolicy\");\n    _IN(\"1.3.6.1.4.1.11129.2.4.2\", \"timestampList\");\n    _IN(\"1.3.6.1.5.5.7.1.1\", \"authorityInfoAccess\");\n    _IN(\"1.3.6.1.5.5.7.3.1\", \"serverAuth\");\n    _IN(\"1.3.6.1.5.5.7.3.2\", \"clientAuth\");\n    _IN(\"1.3.6.1.5.5.7.3.3\", \"codeSigning\");\n    _IN(\"1.3.6.1.5.5.7.3.4\", \"emailProtection\");\n    _IN(\"1.3.6.1.5.5.7.3.8\", \"timeStamping\");\n  }\n});\n\n// ../../node_modules/node-forge/lib/asn1.js\nvar require_asn1 = __commonJS({\n  \"../../node_modules/node-forge/lib/asn1.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    require_oids();\n    var asn1 = module2.exports = forge.asn1 = forge.asn1 || {};\n    asn1.Class = {\n      UNIVERSAL: 0,\n      APPLICATION: 64,\n      CONTEXT_SPECIFIC: 128,\n      PRIVATE: 192\n    };\n    asn1.Type = {\n      NONE: 0,\n      BOOLEAN: 1,\n      INTEGER: 2,\n      BITSTRING: 3,\n      OCTETSTRING: 4,\n      NULL: 5,\n      OID: 6,\n      ODESC: 7,\n      EXTERNAL: 8,\n      REAL: 9,\n      ENUMERATED: 10,\n      EMBEDDED: 11,\n      UTF8: 12,\n      ROID: 13,\n      SEQUENCE: 16,\n      SET: 17,\n      PRINTABLESTRING: 19,\n      IA5STRING: 22,\n      UTCTIME: 23,\n      GENERALIZEDTIME: 24,\n      BMPSTRING: 30\n    };\n    asn1.create = function(tagClass, type, constructed, value, options) {\n      if (forge.util.isArray(value)) {\n        var tmp = [];\n        for (var i = 0; i < value.length; ++i) {\n          if (value[i] !== void 0) {\n            tmp.push(value[i]);\n          }\n        }\n        value = tmp;\n      }\n      var obj = {\n        tagClass,\n        type,\n        constructed,\n        composed: constructed || forge.util.isArray(value),\n        value\n      };\n      if (options && \"bitStringContents\" in options) {\n        obj.bitStringContents = options.bitStringContents;\n        obj.original = asn1.copy(obj);\n      }\n      return obj;\n    };\n    asn1.copy = function(obj, options) {\n      var copy;\n      if (forge.util.isArray(obj)) {\n        copy = [];\n        for (var i = 0; i < obj.length; ++i) {\n          copy.push(asn1.copy(obj[i], options));\n        }\n        return copy;\n      }\n      if (typeof obj === \"string\") {\n        return obj;\n      }\n      copy = {\n        tagClass: obj.tagClass,\n        type: obj.type,\n        constructed: obj.constructed,\n        composed: obj.composed,\n        value: asn1.copy(obj.value, options)\n      };\n      if (options && !options.excludeBitStringContents) {\n        copy.bitStringContents = obj.bitStringContents;\n      }\n      return copy;\n    };\n    asn1.equals = function(obj1, obj2, options) {\n      if (forge.util.isArray(obj1)) {\n        if (!forge.util.isArray(obj2)) {\n          return false;\n        }\n        if (obj1.length !== obj2.length) {\n          return false;\n        }\n        for (var i = 0; i < obj1.length; ++i) {\n          if (!asn1.equals(obj1[i], obj2[i])) {\n            return false;\n          }\n        }\n        return true;\n      }\n      if (typeof obj1 !== typeof obj2) {\n        return false;\n      }\n      if (typeof obj1 === \"string\") {\n        return obj1 === obj2;\n      }\n      var equal = obj1.tagClass === obj2.tagClass && obj1.type === obj2.type && obj1.constructed === obj2.constructed && obj1.composed === obj2.composed && asn1.equals(obj1.value, obj2.value);\n      if (options && options.includeBitStringContents) {\n        equal = equal && obj1.bitStringContents === obj2.bitStringContents;\n      }\n      return equal;\n    };\n    asn1.getBerValueLength = function(b) {\n      var b2 = b.getByte();\n      if (b2 === 128) {\n        return void 0;\n      }\n      var length;\n      var longForm = b2 & 128;\n      if (!longForm) {\n        length = b2;\n      } else {\n        length = b.getInt((b2 & 127) << 3);\n      }\n      return length;\n    };\n    function _checkBufferLength(bytes, remaining, n) {\n      if (n > remaining) {\n        var error = new Error(\"Too few bytes to parse DER.\");\n        error.available = bytes.length();\n        error.remaining = remaining;\n        error.requested = n;\n        throw error;\n      }\n    }\n    var _getValueLength = function(bytes, remaining) {\n      var b2 = bytes.getByte();\n      remaining--;\n      if (b2 === 128) {\n        return void 0;\n      }\n      var length;\n      var longForm = b2 & 128;\n      if (!longForm) {\n        length = b2;\n      } else {\n        var longFormBytes = b2 & 127;\n        _checkBufferLength(bytes, remaining, longFormBytes);\n        length = bytes.getInt(longFormBytes << 3);\n      }\n      if (length < 0) {\n        throw new Error(\"Negative length: \" + length);\n      }\n      return length;\n    };\n    asn1.fromDer = function(bytes, options) {\n      if (options === void 0) {\n        options = {\n          strict: true,\n          parseAllBytes: true,\n          decodeBitStrings: true\n        };\n      }\n      if (typeof options === \"boolean\") {\n        options = {\n          strict: options,\n          parseAllBytes: true,\n          decodeBitStrings: true\n        };\n      }\n      if (!(\"strict\" in options)) {\n        options.strict = true;\n      }\n      if (!(\"parseAllBytes\" in options)) {\n        options.parseAllBytes = true;\n      }\n      if (!(\"decodeBitStrings\" in options)) {\n        options.decodeBitStrings = true;\n      }\n      if (typeof bytes === \"string\") {\n        bytes = forge.util.createBuffer(bytes);\n      }\n      var byteCount = bytes.length();\n      var value = _fromDer(bytes, bytes.length(), 0, options);\n      if (options.parseAllBytes && bytes.length() !== 0) {\n        var error = new Error(\"Unparsed DER bytes remain after ASN.1 parsing.\");\n        error.byteCount = byteCount;\n        error.remaining = bytes.length();\n        throw error;\n      }\n      return value;\n    };\n    function _fromDer(bytes, remaining, depth, options) {\n      var start;\n      _checkBufferLength(bytes, remaining, 2);\n      var b1 = bytes.getByte();\n      remaining--;\n      var tagClass = b1 & 192;\n      var type = b1 & 31;\n      start = bytes.length();\n      var length = _getValueLength(bytes, remaining);\n      remaining -= start - bytes.length();\n      if (length !== void 0 && length > remaining) {\n        if (options.strict) {\n          var error = new Error(\"Too few bytes to read ASN.1 value.\");\n          error.available = bytes.length();\n          error.remaining = remaining;\n          error.requested = length;\n          throw error;\n        }\n        length = remaining;\n      }\n      var value;\n      var bitStringContents;\n      var constructed = (b1 & 32) === 32;\n      if (constructed) {\n        value = [];\n        if (length === void 0) {\n          for (; ; ) {\n            _checkBufferLength(bytes, remaining, 2);\n            if (bytes.bytes(2) === String.fromCharCode(0, 0)) {\n              bytes.getBytes(2);\n              remaining -= 2;\n              break;\n            }\n            start = bytes.length();\n            value.push(_fromDer(bytes, remaining, depth + 1, options));\n            remaining -= start - bytes.length();\n          }\n        } else {\n          while (length > 0) {\n            start = bytes.length();\n            value.push(_fromDer(bytes, length, depth + 1, options));\n            remaining -= start - bytes.length();\n            length -= start - bytes.length();\n          }\n        }\n      }\n      if (value === void 0 && tagClass === asn1.Class.UNIVERSAL && type === asn1.Type.BITSTRING) {\n        bitStringContents = bytes.bytes(length);\n      }\n      if (value === void 0 && options.decodeBitStrings && tagClass === asn1.Class.UNIVERSAL && // FIXME: OCTET STRINGs not yet supported here\n      // .. other parts of forge expect to decode OCTET STRINGs manually\n      type === asn1.Type.BITSTRING && length > 1) {\n        var savedRead = bytes.read;\n        var savedRemaining = remaining;\n        var unused = 0;\n        if (type === asn1.Type.BITSTRING) {\n          _checkBufferLength(bytes, remaining, 1);\n          unused = bytes.getByte();\n          remaining--;\n        }\n        if (unused === 0) {\n          try {\n            start = bytes.length();\n            var subOptions = {\n              // enforce strict mode to avoid parsing ASN.1 from plain data\n              strict: true,\n              decodeBitStrings: true\n            };\n            var composed = _fromDer(bytes, remaining, depth + 1, subOptions);\n            var used = start - bytes.length();\n            remaining -= used;\n            if (type == asn1.Type.BITSTRING) {\n              used++;\n            }\n            var tc = composed.tagClass;\n            if (used === length && (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC)) {\n              value = [composed];\n            }\n          } catch (ex) {\n          }\n        }\n        if (value === void 0) {\n          bytes.read = savedRead;\n          remaining = savedRemaining;\n        }\n      }\n      if (value === void 0) {\n        if (length === void 0) {\n          if (options.strict) {\n            throw new Error(\"Non-constructed ASN.1 object of indefinite length.\");\n          }\n          length = remaining;\n        }\n        if (type === asn1.Type.BMPSTRING) {\n          value = \"\";\n          for (; length > 0; length -= 2) {\n            _checkBufferLength(bytes, remaining, 2);\n            value += String.fromCharCode(bytes.getInt16());\n            remaining -= 2;\n          }\n        } else {\n          value = bytes.getBytes(length);\n          remaining -= length;\n        }\n      }\n      var asn1Options = bitStringContents === void 0 ? null : {\n        bitStringContents\n      };\n      return asn1.create(tagClass, type, constructed, value, asn1Options);\n    }\n    asn1.toDer = function(obj) {\n      var bytes = forge.util.createBuffer();\n      var b1 = obj.tagClass | obj.type;\n      var value = forge.util.createBuffer();\n      var useBitStringContents = false;\n      if (\"bitStringContents\" in obj) {\n        useBitStringContents = true;\n        if (obj.original) {\n          useBitStringContents = asn1.equals(obj, obj.original);\n        }\n      }\n      if (useBitStringContents) {\n        value.putBytes(obj.bitStringContents);\n      } else if (obj.composed) {\n        if (obj.constructed) {\n          b1 |= 32;\n        } else {\n          value.putByte(0);\n        }\n        for (var i = 0; i < obj.value.length; ++i) {\n          if (obj.value[i] !== void 0) {\n            value.putBuffer(asn1.toDer(obj.value[i]));\n          }\n        }\n      } else {\n        if (obj.type === asn1.Type.BMPSTRING) {\n          for (var i = 0; i < obj.value.length; ++i) {\n            value.putInt16(obj.value.charCodeAt(i));\n          }\n        } else {\n          if (obj.type === asn1.Type.INTEGER && obj.value.length > 1 && // leading 0x00 for positive integer\n          (obj.value.charCodeAt(0) === 0 && (obj.value.charCodeAt(1) & 128) === 0 || // leading 0xFF for negative integer\n          obj.value.charCodeAt(0) === 255 && (obj.value.charCodeAt(1) & 128) === 128)) {\n            value.putBytes(obj.value.substr(1));\n          } else {\n            value.putBytes(obj.value);\n          }\n        }\n      }\n      bytes.putByte(b1);\n      if (value.length() <= 127) {\n        bytes.putByte(value.length() & 127);\n      } else {\n        var len = value.length();\n        var lenBytes = \"\";\n        do {\n          lenBytes += String.fromCharCode(len & 255);\n          len = len >>> 8;\n        } while (len > 0);\n        bytes.putByte(lenBytes.length | 128);\n        for (var i = lenBytes.length - 1; i >= 0; --i) {\n          bytes.putByte(lenBytes.charCodeAt(i));\n        }\n      }\n      bytes.putBuffer(value);\n      return bytes;\n    };\n    asn1.oidToDer = function(oid) {\n      var values = oid.split(\".\");\n      var bytes = forge.util.createBuffer();\n      bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));\n      var last, valueBytes, value, b;\n      for (var i = 2; i < values.length; ++i) {\n        last = true;\n        valueBytes = [];\n        value = parseInt(values[i], 10);\n        do {\n          b = value & 127;\n          value = value >>> 7;\n          if (!last) {\n            b |= 128;\n          }\n          valueBytes.push(b);\n          last = false;\n        } while (value > 0);\n        for (var n = valueBytes.length - 1; n >= 0; --n) {\n          bytes.putByte(valueBytes[n]);\n        }\n      }\n      return bytes;\n    };\n    asn1.derToOid = function(bytes) {\n      var oid;\n      if (typeof bytes === \"string\") {\n        bytes = forge.util.createBuffer(bytes);\n      }\n      var b = bytes.getByte();\n      oid = Math.floor(b / 40) + \".\" + b % 40;\n      var value = 0;\n      while (bytes.length() > 0) {\n        b = bytes.getByte();\n        value = value << 7;\n        if (b & 128) {\n          value += b & 127;\n        } else {\n          oid += \".\" + (value + b);\n          value = 0;\n        }\n      }\n      return oid;\n    };\n    asn1.utcTimeToDate = function(utc) {\n      var date = /* @__PURE__ */ new Date();\n      var year = parseInt(utc.substr(0, 2), 10);\n      year = year >= 50 ? 1900 + year : 2e3 + year;\n      var MM = parseInt(utc.substr(2, 2), 10) - 1;\n      var DD = parseInt(utc.substr(4, 2), 10);\n      var hh = parseInt(utc.substr(6, 2), 10);\n      var mm = parseInt(utc.substr(8, 2), 10);\n      var ss = 0;\n      if (utc.length > 11) {\n        var c = utc.charAt(10);\n        var end = 10;\n        if (c !== \"+\" && c !== \"-\") {\n          ss = parseInt(utc.substr(10, 2), 10);\n          end += 2;\n        }\n      }\n      date.setUTCFullYear(year, MM, DD);\n      date.setUTCHours(hh, mm, ss, 0);\n      if (end) {\n        c = utc.charAt(end);\n        if (c === \"+\" || c === \"-\") {\n          var hhoffset = parseInt(utc.substr(end + 1, 2), 10);\n          var mmoffset = parseInt(utc.substr(end + 4, 2), 10);\n          var offset = hhoffset * 60 + mmoffset;\n          offset *= 6e4;\n          if (c === \"+\") {\n            date.setTime(+date - offset);\n          } else {\n            date.setTime(+date + offset);\n          }\n        }\n      }\n      return date;\n    };\n    asn1.generalizedTimeToDate = function(gentime) {\n      var date = /* @__PURE__ */ new Date();\n      var YYYY = parseInt(gentime.substr(0, 4), 10);\n      var MM = parseInt(gentime.substr(4, 2), 10) - 1;\n      var DD = parseInt(gentime.substr(6, 2), 10);\n      var hh = parseInt(gentime.substr(8, 2), 10);\n      var mm = parseInt(gentime.substr(10, 2), 10);\n      var ss = parseInt(gentime.substr(12, 2), 10);\n      var fff = 0;\n      var offset = 0;\n      var isUTC = false;\n      if (gentime.charAt(gentime.length - 1) === \"Z\") {\n        isUTC = true;\n      }\n      var end = gentime.length - 5, c = gentime.charAt(end);\n      if (c === \"+\" || c === \"-\") {\n        var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);\n        var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);\n        offset = hhoffset * 60 + mmoffset;\n        offset *= 6e4;\n        if (c === \"+\") {\n          offset *= -1;\n        }\n        isUTC = true;\n      }\n      if (gentime.charAt(14) === \".\") {\n        fff = parseFloat(gentime.substr(14), 10) * 1e3;\n      }\n      if (isUTC) {\n        date.setUTCFullYear(YYYY, MM, DD);\n        date.setUTCHours(hh, mm, ss, fff);\n        date.setTime(+date + offset);\n      } else {\n        date.setFullYear(YYYY, MM, DD);\n        date.setHours(hh, mm, ss, fff);\n      }\n      return date;\n    };\n    asn1.dateToUtcTime = function(date) {\n      if (typeof date === \"string\") {\n        return date;\n      }\n      var rval = \"\";\n      var format = [];\n      format.push((\"\" + date.getUTCFullYear()).substr(2));\n      format.push(\"\" + (date.getUTCMonth() + 1));\n      format.push(\"\" + date.getUTCDate());\n      format.push(\"\" + date.getUTCHours());\n      format.push(\"\" + date.getUTCMinutes());\n      format.push(\"\" + date.getUTCSeconds());\n      for (var i = 0; i < format.length; ++i) {\n        if (format[i].length < 2) {\n          rval += \"0\";\n        }\n        rval += format[i];\n      }\n      rval += \"Z\";\n      return rval;\n    };\n    asn1.dateToGeneralizedTime = function(date) {\n      if (typeof date === \"string\") {\n        return date;\n      }\n      var rval = \"\";\n      var format = [];\n      format.push(\"\" + date.getUTCFullYear());\n      format.push(\"\" + (date.getUTCMonth() + 1));\n      format.push(\"\" + date.getUTCDate());\n      format.push(\"\" + date.getUTCHours());\n      format.push(\"\" + date.getUTCMinutes());\n      format.push(\"\" + date.getUTCSeconds());\n      for (var i = 0; i < format.length; ++i) {\n        if (format[i].length < 2) {\n          rval += \"0\";\n        }\n        rval += format[i];\n      }\n      rval += \"Z\";\n      return rval;\n    };\n    asn1.integerToDer = function(x) {\n      var rval = forge.util.createBuffer();\n      if (x >= -128 && x < 128) {\n        return rval.putSignedInt(x, 8);\n      }\n      if (x >= -32768 && x < 32768) {\n        return rval.putSignedInt(x, 16);\n      }\n      if (x >= -8388608 && x < 8388608) {\n        return rval.putSignedInt(x, 24);\n      }\n      if (x >= -2147483648 && x < 2147483648) {\n        return rval.putSignedInt(x, 32);\n      }\n      var error = new Error(\"Integer too large; max is 32-bits.\");\n      error.integer = x;\n      throw error;\n    };\n    asn1.derToInteger = function(bytes) {\n      if (typeof bytes === \"string\") {\n        bytes = forge.util.createBuffer(bytes);\n      }\n      var n = bytes.length() * 8;\n      if (n > 32) {\n        throw new Error(\"Integer too large; max is 32-bits.\");\n      }\n      return bytes.getSignedInt(n);\n    };\n    asn1.validate = function(obj, v, capture, errors) {\n      var rval = false;\n      if ((obj.tagClass === v.tagClass || typeof v.tagClass === \"undefined\") && (obj.type === v.type || typeof v.type === \"undefined\")) {\n        if (obj.constructed === v.constructed || typeof v.constructed === \"undefined\") {\n          rval = true;\n          if (v.value && forge.util.isArray(v.value)) {\n            var j = 0;\n            for (var i = 0; rval && i < v.value.length; ++i) {\n              rval = v.value[i].optional || false;\n              if (obj.value[j]) {\n                rval = asn1.validate(obj.value[j], v.value[i], capture, errors);\n                if (rval) {\n                  ++j;\n                } else if (v.value[i].optional) {\n                  rval = true;\n                }\n              }\n              if (!rval && errors) {\n                errors.push(\n                  \"[\" + v.name + '] Tag class \"' + v.tagClass + '\", type \"' + v.type + '\" expected value length \"' + v.value.length + '\", got \"' + obj.value.length + '\"'\n                );\n              }\n            }\n          }\n          if (rval && capture) {\n            if (v.capture) {\n              capture[v.capture] = obj.value;\n            }\n            if (v.captureAsn1) {\n              capture[v.captureAsn1] = obj;\n            }\n            if (v.captureBitStringContents && \"bitStringContents\" in obj) {\n              capture[v.captureBitStringContents] = obj.bitStringContents;\n            }\n            if (v.captureBitStringValue && \"bitStringContents\" in obj) {\n              var value;\n              if (obj.bitStringContents.length < 2) {\n                capture[v.captureBitStringValue] = \"\";\n              } else {\n                var unused = obj.bitStringContents.charCodeAt(0);\n                if (unused !== 0) {\n                  throw new Error(\n                    \"captureBitStringValue only supported for zero unused bits\"\n                  );\n                }\n                capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);\n              }\n            }\n          }\n        } else if (errors) {\n          errors.push(\n            \"[\" + v.name + '] Expected constructed \"' + v.constructed + '\", got \"' + obj.constructed + '\"'\n          );\n        }\n      } else if (errors) {\n        if (obj.tagClass !== v.tagClass) {\n          errors.push(\n            \"[\" + v.name + '] Expected tag class \"' + v.tagClass + '\", got \"' + obj.tagClass + '\"'\n          );\n        }\n        if (obj.type !== v.type) {\n          errors.push(\n            \"[\" + v.name + '] Expected type \"' + v.type + '\", got \"' + obj.type + '\"'\n          );\n        }\n      }\n      return rval;\n    };\n    var _nonLatinRegex = /[^\\\\u0000-\\\\u00ff]/;\n    asn1.prettyPrint = function(obj, level, indentation) {\n      var rval = \"\";\n      level = level || 0;\n      indentation = indentation || 2;\n      if (level > 0) {\n        rval += \"\\n\";\n      }\n      var indent = \"\";\n      for (var i = 0; i < level * indentation; ++i) {\n        indent += \" \";\n      }\n      rval += indent + \"Tag: \";\n      switch (obj.tagClass) {\n        case asn1.Class.UNIVERSAL:\n          rval += \"Universal:\";\n          break;\n        case asn1.Class.APPLICATION:\n          rval += \"Application:\";\n          break;\n        case asn1.Class.CONTEXT_SPECIFIC:\n          rval += \"Context-Specific:\";\n          break;\n        case asn1.Class.PRIVATE:\n          rval += \"Private:\";\n          break;\n      }\n      if (obj.tagClass === asn1.Class.UNIVERSAL) {\n        rval += obj.type;\n        switch (obj.type) {\n          case asn1.Type.NONE:\n            rval += \" (None)\";\n            break;\n          case asn1.Type.BOOLEAN:\n            rval += \" (Boolean)\";\n            break;\n          case asn1.Type.INTEGER:\n            rval += \" (Integer)\";\n            break;\n          case asn1.Type.BITSTRING:\n            rval += \" (Bit string)\";\n            break;\n          case asn1.Type.OCTETSTRING:\n            rval += \" (Octet string)\";\n            break;\n          case asn1.Type.NULL:\n            rval += \" (Null)\";\n            break;\n          case asn1.Type.OID:\n            rval += \" (Object Identifier)\";\n            break;\n          case asn1.Type.ODESC:\n            rval += \" (Object Descriptor)\";\n            break;\n          case asn1.Type.EXTERNAL:\n            rval += \" (External or Instance of)\";\n            break;\n          case asn1.Type.REAL:\n            rval += \" (Real)\";\n            break;\n          case asn1.Type.ENUMERATED:\n            rval += \" (Enumerated)\";\n            break;\n          case asn1.Type.EMBEDDED:\n            rval += \" (Embedded PDV)\";\n            break;\n          case asn1.Type.UTF8:\n            rval += \" (UTF8)\";\n            break;\n          case asn1.Type.ROID:\n            rval += \" (Relative Object Identifier)\";\n            break;\n          case asn1.Type.SEQUENCE:\n            rval += \" (Sequence)\";\n            break;\n          case asn1.Type.SET:\n            rval += \" (Set)\";\n            break;\n          case asn1.Type.PRINTABLESTRING:\n            rval += \" (Printable String)\";\n            break;\n          case asn1.Type.IA5String:\n            rval += \" (IA5String (ASCII))\";\n            break;\n          case asn1.Type.UTCTIME:\n            rval += \" (UTC time)\";\n            break;\n          case asn1.Type.GENERALIZEDTIME:\n            rval += \" (Generalized time)\";\n            break;\n          case asn1.Type.BMPSTRING:\n            rval += \" (BMP String)\";\n            break;\n        }\n      } else {\n        rval += obj.type;\n      }\n      rval += \"\\n\";\n      rval += indent + \"Constructed: \" + obj.constructed + \"\\n\";\n      if (obj.composed) {\n        var subvalues = 0;\n        var sub = \"\";\n        for (var i = 0; i < obj.value.length; ++i) {\n          if (obj.value[i] !== void 0) {\n            subvalues += 1;\n            sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);\n            if (i + 1 < obj.value.length) {\n              sub += \",\";\n            }\n          }\n        }\n        rval += indent + \"Sub values: \" + subvalues + sub;\n      } else {\n        rval += indent + \"Value: \";\n        if (obj.type === asn1.Type.OID) {\n          var oid = asn1.derToOid(obj.value);\n          rval += oid;\n          if (forge.pki && forge.pki.oids) {\n            if (oid in forge.pki.oids) {\n              rval += \" (\" + forge.pki.oids[oid] + \") \";\n            }\n          }\n        }\n        if (obj.type === asn1.Type.INTEGER) {\n          try {\n            rval += asn1.derToInteger(obj.value);\n          } catch (ex) {\n            rval += \"0x\" + forge.util.bytesToHex(obj.value);\n          }\n        } else if (obj.type === asn1.Type.BITSTRING) {\n          if (obj.value.length > 1) {\n            rval += \"0x\" + forge.util.bytesToHex(obj.value.slice(1));\n          } else {\n            rval += \"(none)\";\n          }\n          if (obj.value.length > 0) {\n            var unused = obj.value.charCodeAt(0);\n            if (unused == 1) {\n              rval += \" (1 unused bit shown)\";\n            } else if (unused > 1) {\n              rval += \" (\" + unused + \" unused bits shown)\";\n            }\n          }\n        } else if (obj.type === asn1.Type.OCTETSTRING) {\n          if (!_nonLatinRegex.test(obj.value)) {\n            rval += \"(\" + obj.value + \") \";\n          }\n          rval += \"0x\" + forge.util.bytesToHex(obj.value);\n        } else if (obj.type === asn1.Type.UTF8) {\n          try {\n            rval += forge.util.decodeUtf8(obj.value);\n          } catch (e) {\n            if (e.message === \"URI malformed\") {\n              rval += \"0x\" + forge.util.bytesToHex(obj.value) + \" (malformed UTF8)\";\n            } else {\n              throw e;\n            }\n          }\n        } else if (obj.type === asn1.Type.PRINTABLESTRING || obj.type === asn1.Type.IA5String) {\n          rval += obj.value;\n        } else if (_nonLatinRegex.test(obj.value)) {\n          rval += \"0x\" + forge.util.bytesToHex(obj.value);\n        } else if (obj.value.length === 0) {\n          rval += \"[null]\";\n        } else {\n          rval += obj.value;\n        }\n      }\n      return rval;\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/md.js\nvar require_md = __commonJS({\n  \"../../node_modules/node-forge/lib/md.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    module2.exports = forge.md = forge.md || {};\n    forge.md.algorithms = forge.md.algorithms || {};\n  }\n});\n\n// ../../node_modules/node-forge/lib/hmac.js\nvar require_hmac = __commonJS({\n  \"../../node_modules/node-forge/lib/hmac.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_md();\n    require_util();\n    var hmac = module2.exports = forge.hmac = forge.hmac || {};\n    hmac.create = function() {\n      var _key = null;\n      var _md = null;\n      var _ipadding = null;\n      var _opadding = null;\n      var ctx = {};\n      ctx.start = function(md, key) {\n        if (md !== null) {\n          if (typeof md === \"string\") {\n            md = md.toLowerCase();\n            if (md in forge.md.algorithms) {\n              _md = forge.md.algorithms[md].create();\n            } else {\n              throw new Error('Unknown hash algorithm \"' + md + '\"');\n            }\n          } else {\n            _md = md;\n          }\n        }\n        if (key === null) {\n          key = _key;\n        } else {\n          if (typeof key === \"string\") {\n            key = forge.util.createBuffer(key);\n          } else if (forge.util.isArray(key)) {\n            var tmp = key;\n            key = forge.util.createBuffer();\n            for (var i = 0; i < tmp.length; ++i) {\n              key.putByte(tmp[i]);\n            }\n          }\n          var keylen = key.length();\n          if (keylen > _md.blockLength) {\n            _md.start();\n            _md.update(key.bytes());\n            key = _md.digest();\n          }\n          _ipadding = forge.util.createBuffer();\n          _opadding = forge.util.createBuffer();\n          keylen = key.length();\n          for (var i = 0; i < keylen; ++i) {\n            var tmp = key.at(i);\n            _ipadding.putByte(54 ^ tmp);\n            _opadding.putByte(92 ^ tmp);\n          }\n          if (keylen < _md.blockLength) {\n            var tmp = _md.blockLength - keylen;\n            for (var i = 0; i < tmp; ++i) {\n              _ipadding.putByte(54);\n              _opadding.putByte(92);\n            }\n          }\n          _key = key;\n          _ipadding = _ipadding.bytes();\n          _opadding = _opadding.bytes();\n        }\n        _md.start();\n        _md.update(_ipadding);\n      };\n      ctx.update = function(bytes) {\n        _md.update(bytes);\n      };\n      ctx.getMac = function() {\n        var inner = _md.digest().bytes();\n        _md.start();\n        _md.update(_opadding);\n        _md.update(inner);\n        return _md.digest();\n      };\n      ctx.digest = ctx.getMac;\n      return ctx;\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/md5.js\nvar require_md5 = __commonJS({\n  \"../../node_modules/node-forge/lib/md5.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_md();\n    require_util();\n    var md5 = module2.exports = forge.md5 = forge.md5 || {};\n    forge.md.md5 = forge.md.algorithms.md5 = md5;\n    md5.create = function() {\n      if (!_initialized) {\n        _init();\n      }\n      var _state = null;\n      var _input = forge.util.createBuffer();\n      var _w = new Array(16);\n      var md = {\n        algorithm: \"md5\",\n        blockLength: 64,\n        digestLength: 16,\n        // 56-bit length of message so far (does not including padding)\n        messageLength: 0,\n        // true message length\n        fullMessageLength: null,\n        // size of message length in bytes\n        messageLengthSize: 8\n      };\n      md.start = function() {\n        md.messageLength = 0;\n        md.fullMessageLength = md.messageLength64 = [];\n        var int32s = md.messageLengthSize / 4;\n        for (var i = 0; i < int32s; ++i) {\n          md.fullMessageLength.push(0);\n        }\n        _input = forge.util.createBuffer();\n        _state = {\n          h0: 1732584193,\n          h1: 4023233417,\n          h2: 2562383102,\n          h3: 271733878\n        };\n        return md;\n      };\n      md.start();\n      md.update = function(msg, encoding) {\n        if (encoding === \"utf8\") {\n          msg = forge.util.encodeUtf8(msg);\n        }\n        var len = msg.length;\n        md.messageLength += len;\n        len = [len / 4294967296 >>> 0, len >>> 0];\n        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n          md.fullMessageLength[i] += len[1];\n          len[1] = len[0] + (md.fullMessageLength[i] / 4294967296 >>> 0);\n          md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n          len[0] = len[1] / 4294967296 >>> 0;\n        }\n        _input.putBytes(msg);\n        _update(_state, _w, _input);\n        if (_input.read > 2048 || _input.length() === 0) {\n          _input.compact();\n        }\n        return md;\n      };\n      md.digest = function() {\n        var finalBlock = forge.util.createBuffer();\n        finalBlock.putBytes(_input.bytes());\n        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;\n        var overflow = remaining & md.blockLength - 1;\n        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n        var bits, carry = 0;\n        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n          bits = md.fullMessageLength[i] * 8 + carry;\n          carry = bits / 4294967296 >>> 0;\n          finalBlock.putInt32Le(bits >>> 0);\n        }\n        var s2 = {\n          h0: _state.h0,\n          h1: _state.h1,\n          h2: _state.h2,\n          h3: _state.h3\n        };\n        _update(s2, _w, finalBlock);\n        var rval = forge.util.createBuffer();\n        rval.putInt32Le(s2.h0);\n        rval.putInt32Le(s2.h1);\n        rval.putInt32Le(s2.h2);\n        rval.putInt32Le(s2.h3);\n        return rval;\n      };\n      return md;\n    };\n    var _padding = null;\n    var _g = null;\n    var _r = null;\n    var _k = null;\n    var _initialized = false;\n    function _init() {\n      _padding = String.fromCharCode(128);\n      _padding += forge.util.fillString(String.fromCharCode(0), 64);\n      _g = [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        1,\n        6,\n        11,\n        0,\n        5,\n        10,\n        15,\n        4,\n        9,\n        14,\n        3,\n        8,\n        13,\n        2,\n        7,\n        12,\n        5,\n        8,\n        11,\n        14,\n        1,\n        4,\n        7,\n        10,\n        13,\n        0,\n        3,\n        6,\n        9,\n        12,\n        15,\n        2,\n        0,\n        7,\n        14,\n        5,\n        12,\n        3,\n        10,\n        1,\n        8,\n        15,\n        6,\n        13,\n        4,\n        11,\n        2,\n        9\n      ];\n      _r = [\n        7,\n        12,\n        17,\n        22,\n        7,\n        12,\n        17,\n        22,\n        7,\n        12,\n        17,\n        22,\n        7,\n        12,\n        17,\n        22,\n        5,\n        9,\n        14,\n        20,\n        5,\n        9,\n        14,\n        20,\n        5,\n        9,\n        14,\n        20,\n        5,\n        9,\n        14,\n        20,\n        4,\n        11,\n        16,\n        23,\n        4,\n        11,\n        16,\n        23,\n        4,\n        11,\n        16,\n        23,\n        4,\n        11,\n        16,\n        23,\n        6,\n        10,\n        15,\n        21,\n        6,\n        10,\n        15,\n        21,\n        6,\n        10,\n        15,\n        21,\n        6,\n        10,\n        15,\n        21\n      ];\n      _k = new Array(64);\n      for (var i = 0; i < 64; ++i) {\n        _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 4294967296);\n      }\n      _initialized = true;\n    }\n    function _update(s, w, bytes) {\n      var t, a, b, c, d, f, r, i;\n      var len = bytes.length();\n      while (len >= 64) {\n        a = s.h0;\n        b = s.h1;\n        c = s.h2;\n        d = s.h3;\n        for (i = 0; i < 16; ++i) {\n          w[i] = bytes.getInt32Le();\n          f = d ^ b & (c ^ d);\n          t = a + f + _k[i] + w[i];\n          r = _r[i];\n          a = d;\n          d = c;\n          c = b;\n          b += t << r | t >>> 32 - r;\n        }\n        for (; i < 32; ++i) {\n          f = c ^ d & (b ^ c);\n          t = a + f + _k[i] + w[_g[i]];\n          r = _r[i];\n          a = d;\n          d = c;\n          c = b;\n          b += t << r | t >>> 32 - r;\n        }\n        for (; i < 48; ++i) {\n          f = b ^ c ^ d;\n          t = a + f + _k[i] + w[_g[i]];\n          r = _r[i];\n          a = d;\n          d = c;\n          c = b;\n          b += t << r | t >>> 32 - r;\n        }\n        for (; i < 64; ++i) {\n          f = c ^ (b | ~d);\n          t = a + f + _k[i] + w[_g[i]];\n          r = _r[i];\n          a = d;\n          d = c;\n          c = b;\n          b += t << r | t >>> 32 - r;\n        }\n        s.h0 = s.h0 + a | 0;\n        s.h1 = s.h1 + b | 0;\n        s.h2 = s.h2 + c | 0;\n        s.h3 = s.h3 + d | 0;\n        len -= 64;\n      }\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/pem.js\nvar require_pem = __commonJS({\n  \"../../node_modules/node-forge/lib/pem.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    var pem = module2.exports = forge.pem = forge.pem || {};\n    pem.encode = function(msg, options) {\n      options = options || {};\n      var rval = \"-----BEGIN \" + msg.type + \"-----\\r\\n\";\n      var header;\n      if (msg.procType) {\n        header = {\n          name: \"Proc-Type\",\n          values: [String(msg.procType.version), msg.procType.type]\n        };\n        rval += foldHeader(header);\n      }\n      if (msg.contentDomain) {\n        header = { name: \"Content-Domain\", values: [msg.contentDomain] };\n        rval += foldHeader(header);\n      }\n      if (msg.dekInfo) {\n        header = { name: \"DEK-Info\", values: [msg.dekInfo.algorithm] };\n        if (msg.dekInfo.parameters) {\n          header.values.push(msg.dekInfo.parameters);\n        }\n        rval += foldHeader(header);\n      }\n      if (msg.headers) {\n        for (var i = 0; i < msg.headers.length; ++i) {\n          rval += foldHeader(msg.headers[i]);\n        }\n      }\n      if (msg.procType) {\n        rval += \"\\r\\n\";\n      }\n      rval += forge.util.encode64(msg.body, options.maxline || 64) + \"\\r\\n\";\n      rval += \"-----END \" + msg.type + \"-----\\r\\n\";\n      return rval;\n    };\n    pem.decode = function(str) {\n      var rval = [];\n      var rMessage = /\\s*-----BEGIN ([A-Z0-9- ]+)-----\\r?\\n?([\\x21-\\x7e\\s]+?(?:\\r?\\n\\r?\\n))?([:A-Za-z0-9+\\/=\\s]+?)-----END \\1-----/g;\n      var rHeader = /([\\x21-\\x7e]+):\\s*([\\x21-\\x7e\\s^:]+)/;\n      var rCRLF = /\\r?\\n/;\n      var match;\n      while (true) {\n        match = rMessage.exec(str);\n        if (!match) {\n          break;\n        }\n        var type = match[1];\n        if (type === \"NEW CERTIFICATE REQUEST\") {\n          type = \"CERTIFICATE REQUEST\";\n        }\n        var msg = {\n          type,\n          procType: null,\n          contentDomain: null,\n          dekInfo: null,\n          headers: [],\n          body: forge.util.decode64(match[3])\n        };\n        rval.push(msg);\n        if (!match[2]) {\n          continue;\n        }\n        var lines = match[2].split(rCRLF);\n        var li = 0;\n        while (match && li < lines.length) {\n          var line = lines[li].replace(/\\s+$/, \"\");\n          for (var nl = li + 1; nl < lines.length; ++nl) {\n            var next = lines[nl];\n            if (!/\\s/.test(next[0])) {\n              break;\n            }\n            line += next;\n            li = nl;\n          }\n          match = line.match(rHeader);\n          if (match) {\n            var header = { name: match[1], values: [] };\n            var values = match[2].split(\",\");\n            for (var vi = 0; vi < values.length; ++vi) {\n              header.values.push(ltrim(values[vi]));\n            }\n            if (!msg.procType) {\n              if (header.name !== \"Proc-Type\") {\n                throw new Error('Invalid PEM formatted message. The first encapsulated header must be \"Proc-Type\".');\n              } else if (header.values.length !== 2) {\n                throw new Error('Invalid PEM formatted message. The \"Proc-Type\" header must have two subfields.');\n              }\n              msg.procType = { version: values[0], type: values[1] };\n            } else if (!msg.contentDomain && header.name === \"Content-Domain\") {\n              msg.contentDomain = values[0] || \"\";\n            } else if (!msg.dekInfo && header.name === \"DEK-Info\") {\n              if (header.values.length === 0) {\n                throw new Error('Invalid PEM formatted message. The \"DEK-Info\" header must have at least one subfield.');\n              }\n              msg.dekInfo = { algorithm: values[0], parameters: values[1] || null };\n            } else {\n              msg.headers.push(header);\n            }\n          }\n          ++li;\n        }\n        if (msg.procType === \"ENCRYPTED\" && !msg.dekInfo) {\n          throw new Error('Invalid PEM formatted message. The \"DEK-Info\" header must be present if \"Proc-Type\" is \"ENCRYPTED\".');\n        }\n      }\n      if (rval.length === 0) {\n        throw new Error(\"Invalid PEM formatted message.\");\n      }\n      return rval;\n    };\n    function foldHeader(header) {\n      var rval = header.name + \": \";\n      var values = [];\n      var insertSpace = function(match, $1) {\n        return \" \" + $1;\n      };\n      for (var i = 0; i < header.values.length; ++i) {\n        values.push(header.values[i].replace(/^(\\S+\\r\\n)/, insertSpace));\n      }\n      rval += values.join(\",\") + \"\\r\\n\";\n      var length = 0;\n      var candidate = -1;\n      for (var i = 0; i < rval.length; ++i, ++length) {\n        if (length > 65 && candidate !== -1) {\n          var insert = rval[candidate];\n          if (insert === \",\") {\n            ++candidate;\n            rval = rval.substr(0, candidate) + \"\\r\\n \" + rval.substr(candidate);\n          } else {\n            rval = rval.substr(0, candidate) + \"\\r\\n\" + insert + rval.substr(candidate + 1);\n          }\n          length = i - candidate - 1;\n          candidate = -1;\n          ++i;\n        } else if (rval[i] === \" \" || rval[i] === \"\t\" || rval[i] === \",\") {\n          candidate = i;\n        }\n      }\n      return rval;\n    }\n    function ltrim(str) {\n      return str.replace(/^\\s+/, \"\");\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/des.js\nvar require_des = __commonJS({\n  \"../../node_modules/node-forge/lib/des.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_cipher();\n    require_cipherModes();\n    require_util();\n    module2.exports = forge.des = forge.des || {};\n    forge.des.startEncrypting = function(key, iv, output, mode) {\n      var cipher = _createCipher({\n        key,\n        output,\n        decrypt: false,\n        mode: mode || (iv === null ? \"ECB\" : \"CBC\")\n      });\n      cipher.start(iv);\n      return cipher;\n    };\n    forge.des.createEncryptionCipher = function(key, mode) {\n      return _createCipher({\n        key,\n        output: null,\n        decrypt: false,\n        mode\n      });\n    };\n    forge.des.startDecrypting = function(key, iv, output, mode) {\n      var cipher = _createCipher({\n        key,\n        output,\n        decrypt: true,\n        mode: mode || (iv === null ? \"ECB\" : \"CBC\")\n      });\n      cipher.start(iv);\n      return cipher;\n    };\n    forge.des.createDecryptionCipher = function(key, mode) {\n      return _createCipher({\n        key,\n        output: null,\n        decrypt: true,\n        mode\n      });\n    };\n    forge.des.Algorithm = function(name, mode) {\n      var self2 = this;\n      self2.name = name;\n      self2.mode = new mode({\n        blockSize: 8,\n        cipher: {\n          encrypt: function(inBlock, outBlock) {\n            return _updateBlock(self2._keys, inBlock, outBlock, false);\n          },\n          decrypt: function(inBlock, outBlock) {\n            return _updateBlock(self2._keys, inBlock, outBlock, true);\n          }\n        }\n      });\n      self2._init = false;\n    };\n    forge.des.Algorithm.prototype.initialize = function(options) {\n      if (this._init) {\n        return;\n      }\n      var key = forge.util.createBuffer(options.key);\n      if (this.name.indexOf(\"3DES\") === 0) {\n        if (key.length() !== 24) {\n          throw new Error(\"Invalid Triple-DES key size: \" + key.length() * 8);\n        }\n      }\n      this._keys = _createKeys(key);\n      this._init = true;\n    };\n    registerAlgorithm(\"DES-ECB\", forge.cipher.modes.ecb);\n    registerAlgorithm(\"DES-CBC\", forge.cipher.modes.cbc);\n    registerAlgorithm(\"DES-CFB\", forge.cipher.modes.cfb);\n    registerAlgorithm(\"DES-OFB\", forge.cipher.modes.ofb);\n    registerAlgorithm(\"DES-CTR\", forge.cipher.modes.ctr);\n    registerAlgorithm(\"3DES-ECB\", forge.cipher.modes.ecb);\n    registerAlgorithm(\"3DES-CBC\", forge.cipher.modes.cbc);\n    registerAlgorithm(\"3DES-CFB\", forge.cipher.modes.cfb);\n    registerAlgorithm(\"3DES-OFB\", forge.cipher.modes.ofb);\n    registerAlgorithm(\"3DES-CTR\", forge.cipher.modes.ctr);\n    function registerAlgorithm(name, mode) {\n      var factory = function() {\n        return new forge.des.Algorithm(name, mode);\n      };\n      forge.cipher.registerAlgorithm(name, factory);\n    }\n    var spfunction1 = [16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024, 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028, 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540, 16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024, 16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752, 16778244, 16777220, 1028, 66564, 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756];\n    var spfunction2 = [-2146402272, -2147450880, 32768, 1081376, 1048576, 32, -2146435040, -2147450848, -2147483616, -2146402272, -2146402304, -2147483648, -2147450880, 1048576, 32, -2146435040, 1081344, 1048608, -2147450848, 0, -2147483648, 32768, 1081376, -2146435072, 1048608, -2147483616, 0, 1081344, 32800, -2146402304, -2146435072, 32800, 0, 1081376, -2146435040, 1048576, -2147450848, -2146435072, -2146402304, 32768, -2146435072, -2147450880, 32, -2146402272, 1081376, 32, 32768, -2147483648, 32800, -2146402304, 1048576, -2147483616, 1048608, -2147450848, -2147483616, 1048608, 1081344, 0, -2147450880, 32800, -2147483648, -2146435040, -2146402272, 1081344];\n    var spfunction3 = [520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800, 520, 134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592, 134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728, 134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808, 134218248, 131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584];\n    var spfunction4 = [8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800, 8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192, 8388608, 8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928, 8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0, 8396800, 8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608, 8396801, 128, 8388608, 8192, 8396928];\n    var spfunction5 = [256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512, 1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0, 1073742080, 1107820800, 1107820800, 33554688, 1107820544, 1073742080, 0, 1107296256, 34078976, 33554432, 1107296256, 524544, 524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 33554688, 1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 1107820800, 524544, 1107296256, 1107820800, 34078720, 0, 1074266112, 1107296256, 524544, 33554688, 1073742080, 524288, 0, 1074266112, 34078976, 1073742080];\n    var spfunction6 = [536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 536887296, 4210704, 4194304, 536870928, 4194320, 536887296, 536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312, 16, 541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688, 541081600, 536870912, 536887296, 16, 541065232, 4210688, 541081616, 4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400, 536870928, 541081616, 4210688, 541065216, 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704, 16384, 4194320, 536887312, 0, 541081600, 536870912, 4194320, 536887312];\n    var spfunction7 = [2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064, 69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050, 67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154, 69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200, 67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064, 2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154];\n    var spfunction8 = [268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304, 4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552, 266304, 262144, 266304, 262144, 268701696, 4096, 64, 268697664, 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 0, 268701760, 262208, 268435520, 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160, 262208, 268435456, 268701696];\n    function _createKeys(key) {\n      var pc2bytes0 = [0, 4, 536870912, 536870916, 65536, 65540, 536936448, 536936452, 512, 516, 536871424, 536871428, 66048, 66052, 536936960, 536936964], pc2bytes1 = [0, 1, 1048576, 1048577, 67108864, 67108865, 68157440, 68157441, 256, 257, 1048832, 1048833, 67109120, 67109121, 68157696, 68157697], pc2bytes2 = [0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272, 0, 8, 2048, 2056, 16777216, 16777224, 16779264, 16779272], pc2bytes3 = [0, 2097152, 134217728, 136314880, 8192, 2105344, 134225920, 136323072, 131072, 2228224, 134348800, 136445952, 139264, 2236416, 134356992, 136454144], pc2bytes4 = [0, 262144, 16, 262160, 0, 262144, 16, 262160, 4096, 266240, 4112, 266256, 4096, 266240, 4112, 266256], pc2bytes5 = [0, 1024, 32, 1056, 0, 1024, 32, 1056, 33554432, 33555456, 33554464, 33555488, 33554432, 33555456, 33554464, 33555488], pc2bytes6 = [0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746, 0, 268435456, 524288, 268959744, 2, 268435458, 524290, 268959746], pc2bytes7 = [0, 65536, 2048, 67584, 536870912, 536936448, 536872960, 536938496, 131072, 196608, 133120, 198656, 537001984, 537067520, 537004032, 537069568], pc2bytes8 = [0, 262144, 0, 262144, 2, 262146, 2, 262146, 33554432, 33816576, 33554432, 33816576, 33554434, 33816578, 33554434, 33816578], pc2bytes9 = [0, 268435456, 8, 268435464, 0, 268435456, 8, 268435464, 1024, 268436480, 1032, 268436488, 1024, 268436480, 1032, 268436488], pc2bytes10 = [0, 32, 0, 32, 1048576, 1048608, 1048576, 1048608, 8192, 8224, 8192, 8224, 1056768, 1056800, 1056768, 1056800], pc2bytes11 = [0, 16777216, 512, 16777728, 2097152, 18874368, 2097664, 18874880, 67108864, 83886080, 67109376, 83886592, 69206016, 85983232, 69206528, 85983744], pc2bytes12 = [0, 4096, 134217728, 134221824, 524288, 528384, 134742016, 134746112, 16, 4112, 134217744, 134221840, 524304, 528400, 134742032, 134746128], pc2bytes13 = [0, 4, 256, 260, 0, 4, 256, 260, 1, 5, 257, 261, 1, 5, 257, 261];\n      var iterations = key.length() > 8 ? 3 : 1;\n      var keys = [];\n      var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\n      var n = 0, tmp;\n      for (var j = 0; j < iterations; j++) {\n        var left = key.getInt32();\n        var right = key.getInt32();\n        tmp = (left >>> 4 ^ right) & 252645135;\n        right ^= tmp;\n        left ^= tmp << 4;\n        tmp = (right >>> -16 ^ left) & 65535;\n        left ^= tmp;\n        right ^= tmp << -16;\n        tmp = (left >>> 2 ^ right) & 858993459;\n        right ^= tmp;\n        left ^= tmp << 2;\n        tmp = (right >>> -16 ^ left) & 65535;\n        left ^= tmp;\n        right ^= tmp << -16;\n        tmp = (left >>> 1 ^ right) & 1431655765;\n        right ^= tmp;\n        left ^= tmp << 1;\n        tmp = (right >>> 8 ^ left) & 16711935;\n        left ^= tmp;\n        right ^= tmp << 8;\n        tmp = (left >>> 1 ^ right) & 1431655765;\n        right ^= tmp;\n        left ^= tmp << 1;\n        tmp = left << 8 | right >>> 20 & 240;\n        left = right << 24 | right << 8 & 16711680 | right >>> 8 & 65280 | right >>> 24 & 240;\n        right = tmp;\n        for (var i = 0; i < shifts.length; ++i) {\n          if (shifts[i]) {\n            left = left << 2 | left >>> 26;\n            right = right << 2 | right >>> 26;\n          } else {\n            left = left << 1 | left >>> 27;\n            right = right << 1 | right >>> 27;\n          }\n          left &= -15;\n          right &= -15;\n          var lefttmp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 15] | pc2bytes2[left >>> 20 & 15] | pc2bytes3[left >>> 16 & 15] | pc2bytes4[left >>> 12 & 15] | pc2bytes5[left >>> 8 & 15] | pc2bytes6[left >>> 4 & 15];\n          var righttmp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 15] | pc2bytes9[right >>> 20 & 15] | pc2bytes10[right >>> 16 & 15] | pc2bytes11[right >>> 12 & 15] | pc2bytes12[right >>> 8 & 15] | pc2bytes13[right >>> 4 & 15];\n          tmp = (righttmp >>> 16 ^ lefttmp) & 65535;\n          keys[n++] = lefttmp ^ tmp;\n          keys[n++] = righttmp ^ tmp << 16;\n        }\n      }\n      return keys;\n    }\n    function _updateBlock(keys, input, output, decrypt) {\n      var iterations = keys.length === 32 ? 3 : 9;\n      var looping;\n      if (iterations === 3) {\n        looping = decrypt ? [30, -2, -2] : [0, 32, 2];\n      } else {\n        looping = decrypt ? [94, 62, -2, 32, 64, 2, 30, -2, -2] : [0, 32, 2, 62, 30, -2, 64, 96, 2];\n      }\n      var tmp;\n      var left = input[0];\n      var right = input[1];\n      tmp = (left >>> 4 ^ right) & 252645135;\n      right ^= tmp;\n      left ^= tmp << 4;\n      tmp = (left >>> 16 ^ right) & 65535;\n      right ^= tmp;\n      left ^= tmp << 16;\n      tmp = (right >>> 2 ^ left) & 858993459;\n      left ^= tmp;\n      right ^= tmp << 2;\n      tmp = (right >>> 8 ^ left) & 16711935;\n      left ^= tmp;\n      right ^= tmp << 8;\n      tmp = (left >>> 1 ^ right) & 1431655765;\n      right ^= tmp;\n      left ^= tmp << 1;\n      left = left << 1 | left >>> 31;\n      right = right << 1 | right >>> 31;\n      for (var j = 0; j < iterations; j += 3) {\n        var endloop = looping[j + 1];\n        var loopinc = looping[j + 2];\n        for (var i = looping[j]; i != endloop; i += loopinc) {\n          var right1 = right ^ keys[i];\n          var right2 = (right >>> 4 | right << 28) ^ keys[i + 1];\n          tmp = left;\n          left = right;\n          right = tmp ^ (spfunction2[right1 >>> 24 & 63] | spfunction4[right1 >>> 16 & 63] | spfunction6[right1 >>> 8 & 63] | spfunction8[right1 & 63] | spfunction1[right2 >>> 24 & 63] | spfunction3[right2 >>> 16 & 63] | spfunction5[right2 >>> 8 & 63] | spfunction7[right2 & 63]);\n        }\n        tmp = left;\n        left = right;\n        right = tmp;\n      }\n      left = left >>> 1 | left << 31;\n      right = right >>> 1 | right << 31;\n      tmp = (left >>> 1 ^ right) & 1431655765;\n      right ^= tmp;\n      left ^= tmp << 1;\n      tmp = (right >>> 8 ^ left) & 16711935;\n      left ^= tmp;\n      right ^= tmp << 8;\n      tmp = (right >>> 2 ^ left) & 858993459;\n      left ^= tmp;\n      right ^= tmp << 2;\n      tmp = (left >>> 16 ^ right) & 65535;\n      right ^= tmp;\n      left ^= tmp << 16;\n      tmp = (left >>> 4 ^ right) & 252645135;\n      right ^= tmp;\n      left ^= tmp << 4;\n      output[0] = left;\n      output[1] = right;\n    }\n    function _createCipher(options) {\n      options = options || {};\n      var mode = (options.mode || \"CBC\").toUpperCase();\n      var algorithm = \"DES-\" + mode;\n      var cipher;\n      if (options.decrypt) {\n        cipher = forge.cipher.createDecipher(algorithm, options.key);\n      } else {\n        cipher = forge.cipher.createCipher(algorithm, options.key);\n      }\n      var start = cipher.start;\n      cipher.start = function(iv, options2) {\n        var output = null;\n        if (options2 instanceof forge.util.ByteBuffer) {\n          output = options2;\n          options2 = {};\n        }\n        options2 = options2 || {};\n        options2.output = output;\n        options2.iv = iv;\n        start.call(cipher, options2);\n      };\n      return cipher;\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/pbkdf2.js\nvar require_pbkdf2 = __commonJS({\n  \"../../node_modules/node-forge/lib/pbkdf2.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_hmac();\n    require_md();\n    require_util();\n    var pkcs5 = forge.pkcs5 = forge.pkcs5 || {};\n    var crypto;\n    if (forge.util.isNodejs && !forge.options.usePureJavaScript) {\n      crypto = __webpack_require__(/*! crypto */ \"crypto\");\n    }\n    module2.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(p, s, c, dkLen, md, callback) {\n      if (typeof md === \"function\") {\n        callback = md;\n        md = null;\n      }\n      if (forge.util.isNodejs && !forge.options.usePureJavaScript && crypto.pbkdf2 && (md === null || typeof md !== \"object\") && (crypto.pbkdf2Sync.length > 4 || (!md || md === \"sha1\"))) {\n        if (typeof md !== \"string\") {\n          md = \"sha1\";\n        }\n        p = Buffer.from(p, \"binary\");\n        s = Buffer.from(s, \"binary\");\n        if (!callback) {\n          if (crypto.pbkdf2Sync.length === 4) {\n            return crypto.pbkdf2Sync(p, s, c, dkLen).toString(\"binary\");\n          }\n          return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString(\"binary\");\n        }\n        if (crypto.pbkdf2Sync.length === 4) {\n          return crypto.pbkdf2(p, s, c, dkLen, function(err2, key) {\n            if (err2) {\n              return callback(err2);\n            }\n            callback(null, key.toString(\"binary\"));\n          });\n        }\n        return crypto.pbkdf2(p, s, c, dkLen, md, function(err2, key) {\n          if (err2) {\n            return callback(err2);\n          }\n          callback(null, key.toString(\"binary\"));\n        });\n      }\n      if (typeof md === \"undefined\" || md === null) {\n        md = \"sha1\";\n      }\n      if (typeof md === \"string\") {\n        if (!(md in forge.md.algorithms)) {\n          throw new Error(\"Unknown hash algorithm: \" + md);\n        }\n        md = forge.md[md].create();\n      }\n      var hLen = md.digestLength;\n      if (dkLen > 4294967295 * hLen) {\n        var err = new Error(\"Derived key is too long.\");\n        if (callback) {\n          return callback(err);\n        }\n        throw err;\n      }\n      var len = Math.ceil(dkLen / hLen);\n      var r = dkLen - (len - 1) * hLen;\n      var prf = forge.hmac.create();\n      prf.start(md, p);\n      var dk = \"\";\n      var xor, u_c, u_c1;\n      if (!callback) {\n        for (var i = 1; i <= len; ++i) {\n          prf.start(null, null);\n          prf.update(s);\n          prf.update(forge.util.int32ToBytes(i));\n          xor = u_c1 = prf.digest().getBytes();\n          for (var j = 2; j <= c; ++j) {\n            prf.start(null, null);\n            prf.update(u_c1);\n            u_c = prf.digest().getBytes();\n            xor = forge.util.xorBytes(xor, u_c, hLen);\n            u_c1 = u_c;\n          }\n          dk += i < len ? xor : xor.substr(0, r);\n        }\n        return dk;\n      }\n      var i = 1, j;\n      function outer() {\n        if (i > len) {\n          return callback(null, dk);\n        }\n        prf.start(null, null);\n        prf.update(s);\n        prf.update(forge.util.int32ToBytes(i));\n        xor = u_c1 = prf.digest().getBytes();\n        j = 2;\n        inner();\n      }\n      function inner() {\n        if (j <= c) {\n          prf.start(null, null);\n          prf.update(u_c1);\n          u_c = prf.digest().getBytes();\n          xor = forge.util.xorBytes(xor, u_c, hLen);\n          u_c1 = u_c;\n          ++j;\n          return forge.util.setImmediate(inner);\n        }\n        dk += i < len ? xor : xor.substr(0, r);\n        ++i;\n        outer();\n      }\n      outer();\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/sha256.js\nvar require_sha256 = __commonJS({\n  \"../../node_modules/node-forge/lib/sha256.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_md();\n    require_util();\n    var sha256 = module2.exports = forge.sha256 = forge.sha256 || {};\n    forge.md.sha256 = forge.md.algorithms.sha256 = sha256;\n    sha256.create = function() {\n      if (!_initialized) {\n        _init();\n      }\n      var _state = null;\n      var _input = forge.util.createBuffer();\n      var _w = new Array(64);\n      var md = {\n        algorithm: \"sha256\",\n        blockLength: 64,\n        digestLength: 32,\n        // 56-bit length of message so far (does not including padding)\n        messageLength: 0,\n        // true message length\n        fullMessageLength: null,\n        // size of message length in bytes\n        messageLengthSize: 8\n      };\n      md.start = function() {\n        md.messageLength = 0;\n        md.fullMessageLength = md.messageLength64 = [];\n        var int32s = md.messageLengthSize / 4;\n        for (var i = 0; i < int32s; ++i) {\n          md.fullMessageLength.push(0);\n        }\n        _input = forge.util.createBuffer();\n        _state = {\n          h0: 1779033703,\n          h1: 3144134277,\n          h2: 1013904242,\n          h3: 2773480762,\n          h4: 1359893119,\n          h5: 2600822924,\n          h6: 528734635,\n          h7: 1541459225\n        };\n        return md;\n      };\n      md.start();\n      md.update = function(msg, encoding) {\n        if (encoding === \"utf8\") {\n          msg = forge.util.encodeUtf8(msg);\n        }\n        var len = msg.length;\n        md.messageLength += len;\n        len = [len / 4294967296 >>> 0, len >>> 0];\n        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n          md.fullMessageLength[i] += len[1];\n          len[1] = len[0] + (md.fullMessageLength[i] / 4294967296 >>> 0);\n          md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n          len[0] = len[1] / 4294967296 >>> 0;\n        }\n        _input.putBytes(msg);\n        _update(_state, _w, _input);\n        if (_input.read > 2048 || _input.length() === 0) {\n          _input.compact();\n        }\n        return md;\n      };\n      md.digest = function() {\n        var finalBlock = forge.util.createBuffer();\n        finalBlock.putBytes(_input.bytes());\n        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;\n        var overflow = remaining & md.blockLength - 1;\n        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n        var next, carry;\n        var bits = md.fullMessageLength[0] * 8;\n        for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {\n          next = md.fullMessageLength[i + 1] * 8;\n          carry = next / 4294967296 >>> 0;\n          bits += carry;\n          finalBlock.putInt32(bits >>> 0);\n          bits = next >>> 0;\n        }\n        finalBlock.putInt32(bits);\n        var s2 = {\n          h0: _state.h0,\n          h1: _state.h1,\n          h2: _state.h2,\n          h3: _state.h3,\n          h4: _state.h4,\n          h5: _state.h5,\n          h6: _state.h6,\n          h7: _state.h7\n        };\n        _update(s2, _w, finalBlock);\n        var rval = forge.util.createBuffer();\n        rval.putInt32(s2.h0);\n        rval.putInt32(s2.h1);\n        rval.putInt32(s2.h2);\n        rval.putInt32(s2.h3);\n        rval.putInt32(s2.h4);\n        rval.putInt32(s2.h5);\n        rval.putInt32(s2.h6);\n        rval.putInt32(s2.h7);\n        return rval;\n      };\n      return md;\n    };\n    var _padding = null;\n    var _initialized = false;\n    var _k = null;\n    function _init() {\n      _padding = String.fromCharCode(128);\n      _padding += forge.util.fillString(String.fromCharCode(0), 64);\n      _k = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n      ];\n      _initialized = true;\n    }\n    function _update(s, w, bytes) {\n      var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;\n      var len = bytes.length();\n      while (len >= 64) {\n        for (i = 0; i < 16; ++i) {\n          w[i] = bytes.getInt32();\n        }\n        for (; i < 64; ++i) {\n          t1 = w[i - 2];\n          t1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;\n          t2 = w[i - 15];\n          t2 = (t2 >>> 7 | t2 << 25) ^ (t2 >>> 18 | t2 << 14) ^ t2 >>> 3;\n          w[i] = t1 + w[i - 7] + t2 + w[i - 16] | 0;\n        }\n        a = s.h0;\n        b = s.h1;\n        c = s.h2;\n        d = s.h3;\n        e = s.h4;\n        f = s.h5;\n        g = s.h6;\n        h = s.h7;\n        for (i = 0; i < 64; ++i) {\n          s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);\n          ch = g ^ e & (f ^ g);\n          s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);\n          maj = a & b | c & (a ^ b);\n          t1 = h + s1 + ch + _k[i] + w[i];\n          t2 = s0 + maj;\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 >>> 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 >>> 0;\n        }\n        s.h0 = s.h0 + a | 0;\n        s.h1 = s.h1 + b | 0;\n        s.h2 = s.h2 + c | 0;\n        s.h3 = s.h3 + d | 0;\n        s.h4 = s.h4 + e | 0;\n        s.h5 = s.h5 + f | 0;\n        s.h6 = s.h6 + g | 0;\n        s.h7 = s.h7 + h | 0;\n        len -= 64;\n      }\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/prng.js\nvar require_prng = __commonJS({\n  \"../../node_modules/node-forge/lib/prng.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    var _crypto = null;\n    if (forge.util.isNodejs && !forge.options.usePureJavaScript && !process.versions[\"node-webkit\"]) {\n      _crypto = __webpack_require__(/*! crypto */ \"crypto\");\n    }\n    var prng = module2.exports = forge.prng = forge.prng || {};\n    prng.create = function(plugin) {\n      var ctx = {\n        plugin,\n        key: null,\n        seed: null,\n        time: null,\n        // number of reseeds so far\n        reseeds: 0,\n        // amount of data generated so far\n        generated: 0,\n        // no initial key bytes\n        keyBytes: \"\"\n      };\n      var md = plugin.md;\n      var pools = new Array(32);\n      for (var i = 0; i < 32; ++i) {\n        pools[i] = md.create();\n      }\n      ctx.pools = pools;\n      ctx.pool = 0;\n      ctx.generate = function(count, callback) {\n        if (!callback) {\n          return ctx.generateSync(count);\n        }\n        var cipher = ctx.plugin.cipher;\n        var increment = ctx.plugin.increment;\n        var formatKey = ctx.plugin.formatKey;\n        var formatSeed = ctx.plugin.formatSeed;\n        var b = forge.util.createBuffer();\n        ctx.key = null;\n        generate();\n        function generate(err) {\n          if (err) {\n            return callback(err);\n          }\n          if (b.length() >= count) {\n            return callback(null, b.getBytes(count));\n          }\n          if (ctx.generated > 1048575) {\n            ctx.key = null;\n          }\n          if (ctx.key === null) {\n            return forge.util.nextTick(function() {\n              _reseed(generate);\n            });\n          }\n          var bytes = cipher(ctx.key, ctx.seed);\n          ctx.generated += bytes.length;\n          b.putBytes(bytes);\n          ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));\n          ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));\n          forge.util.setImmediate(generate);\n        }\n      };\n      ctx.generateSync = function(count) {\n        var cipher = ctx.plugin.cipher;\n        var increment = ctx.plugin.increment;\n        var formatKey = ctx.plugin.formatKey;\n        var formatSeed = ctx.plugin.formatSeed;\n        ctx.key = null;\n        var b = forge.util.createBuffer();\n        while (b.length() < count) {\n          if (ctx.generated > 1048575) {\n            ctx.key = null;\n          }\n          if (ctx.key === null) {\n            _reseedSync();\n          }\n          var bytes = cipher(ctx.key, ctx.seed);\n          ctx.generated += bytes.length;\n          b.putBytes(bytes);\n          ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));\n          ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));\n        }\n        return b.getBytes(count);\n      };\n      function _reseed(callback) {\n        if (ctx.pools[0].messageLength >= 32) {\n          _seed();\n          return callback();\n        }\n        var needed = 32 - ctx.pools[0].messageLength << 5;\n        ctx.seedFile(needed, function(err, bytes) {\n          if (err) {\n            return callback(err);\n          }\n          ctx.collect(bytes);\n          _seed();\n          callback();\n        });\n      }\n      function _reseedSync() {\n        if (ctx.pools[0].messageLength >= 32) {\n          return _seed();\n        }\n        var needed = 32 - ctx.pools[0].messageLength << 5;\n        ctx.collect(ctx.seedFileSync(needed));\n        _seed();\n      }\n      function _seed() {\n        ctx.reseeds = ctx.reseeds === 4294967295 ? 0 : ctx.reseeds + 1;\n        var md2 = ctx.plugin.md.create();\n        md2.update(ctx.keyBytes);\n        var _2powK = 1;\n        for (var k = 0; k < 32; ++k) {\n          if (ctx.reseeds % _2powK === 0) {\n            md2.update(ctx.pools[k].digest().getBytes());\n            ctx.pools[k].start();\n          }\n          _2powK = _2powK << 1;\n        }\n        ctx.keyBytes = md2.digest().getBytes();\n        md2.start();\n        md2.update(ctx.keyBytes);\n        var seedBytes = md2.digest().getBytes();\n        ctx.key = ctx.plugin.formatKey(ctx.keyBytes);\n        ctx.seed = ctx.plugin.formatSeed(seedBytes);\n        ctx.generated = 0;\n      }\n      function defaultSeedFile(needed) {\n        var getRandomValues = null;\n        var globalScope = forge.util.globalScope;\n        var _crypto2 = globalScope.crypto || globalScope.msCrypto;\n        if (_crypto2 && _crypto2.getRandomValues) {\n          getRandomValues = function(arr) {\n            return _crypto2.getRandomValues(arr);\n          };\n        }\n        var b = forge.util.createBuffer();\n        if (getRandomValues) {\n          while (b.length() < needed) {\n            var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);\n            var entropy = new Uint32Array(Math.floor(count));\n            try {\n              getRandomValues(entropy);\n              for (var i2 = 0; i2 < entropy.length; ++i2) {\n                b.putInt32(entropy[i2]);\n              }\n            } catch (e) {\n              if (!(typeof QuotaExceededError !== \"undefined\" && e instanceof QuotaExceededError)) {\n                throw e;\n              }\n            }\n          }\n        }\n        if (b.length() < needed) {\n          var hi, lo, next;\n          var seed = Math.floor(Math.random() * 65536);\n          while (b.length() < needed) {\n            lo = 16807 * (seed & 65535);\n            hi = 16807 * (seed >> 16);\n            lo += (hi & 32767) << 16;\n            lo += hi >> 15;\n            lo = (lo & 2147483647) + (lo >> 31);\n            seed = lo & 4294967295;\n            for (var i2 = 0; i2 < 3; ++i2) {\n              next = seed >>> (i2 << 3);\n              next ^= Math.floor(Math.random() * 256);\n              b.putByte(next & 255);\n            }\n          }\n        }\n        return b.getBytes(needed);\n      }\n      if (_crypto) {\n        ctx.seedFile = function(needed, callback) {\n          _crypto.randomBytes(needed, function(err, bytes) {\n            if (err) {\n              return callback(err);\n            }\n            callback(null, bytes.toString());\n          });\n        };\n        ctx.seedFileSync = function(needed) {\n          return _crypto.randomBytes(needed).toString();\n        };\n      } else {\n        ctx.seedFile = function(needed, callback) {\n          try {\n            callback(null, defaultSeedFile(needed));\n          } catch (e) {\n            callback(e);\n          }\n        };\n        ctx.seedFileSync = defaultSeedFile;\n      }\n      ctx.collect = function(bytes) {\n        var count = bytes.length;\n        for (var i2 = 0; i2 < count; ++i2) {\n          ctx.pools[ctx.pool].update(bytes.substr(i2, 1));\n          ctx.pool = ctx.pool === 31 ? 0 : ctx.pool + 1;\n        }\n      };\n      ctx.collectInt = function(i2, n) {\n        var bytes = \"\";\n        for (var x = 0; x < n; x += 8) {\n          bytes += String.fromCharCode(i2 >> x & 255);\n        }\n        ctx.collect(bytes);\n      };\n      ctx.registerWorker = function(worker) {\n        if (worker === self) {\n          ctx.seedFile = function(needed, callback) {\n            function listener2(e) {\n              var data = e.data;\n              if (data.forge && data.forge.prng) {\n                self.removeEventListener(\"message\", listener2);\n                callback(data.forge.prng.err, data.forge.prng.bytes);\n              }\n            }\n            self.addEventListener(\"message\", listener2);\n            self.postMessage({ forge: { prng: { needed } } });\n          };\n        } else {\n          var listener = function(e) {\n            var data = e.data;\n            if (data.forge && data.forge.prng) {\n              ctx.seedFile(data.forge.prng.needed, function(err, bytes) {\n                worker.postMessage({ forge: { prng: { err, bytes } } });\n              });\n            }\n          };\n          worker.addEventListener(\"message\", listener);\n        }\n      };\n      return ctx;\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/random.js\nvar require_random = __commonJS({\n  \"../../node_modules/node-forge/lib/random.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_aes();\n    require_sha256();\n    require_prng();\n    require_util();\n    (function() {\n      if (forge.random && forge.random.getBytes) {\n        module2.exports = forge.random;\n        return;\n      }\n      (function(jQuery2) {\n        var prng_aes = {};\n        var _prng_aes_output = new Array(4);\n        var _prng_aes_buffer = forge.util.createBuffer();\n        prng_aes.formatKey = function(key2) {\n          var tmp = forge.util.createBuffer(key2);\n          key2 = new Array(4);\n          key2[0] = tmp.getInt32();\n          key2[1] = tmp.getInt32();\n          key2[2] = tmp.getInt32();\n          key2[3] = tmp.getInt32();\n          return forge.aes._expandKey(key2, false);\n        };\n        prng_aes.formatSeed = function(seed) {\n          var tmp = forge.util.createBuffer(seed);\n          seed = new Array(4);\n          seed[0] = tmp.getInt32();\n          seed[1] = tmp.getInt32();\n          seed[2] = tmp.getInt32();\n          seed[3] = tmp.getInt32();\n          return seed;\n        };\n        prng_aes.cipher = function(key2, seed) {\n          forge.aes._updateBlock(key2, seed, _prng_aes_output, false);\n          _prng_aes_buffer.putInt32(_prng_aes_output[0]);\n          _prng_aes_buffer.putInt32(_prng_aes_output[1]);\n          _prng_aes_buffer.putInt32(_prng_aes_output[2]);\n          _prng_aes_buffer.putInt32(_prng_aes_output[3]);\n          return _prng_aes_buffer.getBytes();\n        };\n        prng_aes.increment = function(seed) {\n          ++seed[3];\n          return seed;\n        };\n        prng_aes.md = forge.md.sha256;\n        function spawnPrng() {\n          var ctx = forge.prng.create(prng_aes);\n          ctx.getBytes = function(count, callback) {\n            return ctx.generate(count, callback);\n          };\n          ctx.getBytesSync = function(count) {\n            return ctx.generate(count);\n          };\n          return ctx;\n        }\n        var _ctx = spawnPrng();\n        var getRandomValues = null;\n        var globalScope = forge.util.globalScope;\n        var _crypto = globalScope.crypto || globalScope.msCrypto;\n        if (_crypto && _crypto.getRandomValues) {\n          getRandomValues = function(arr) {\n            return _crypto.getRandomValues(arr);\n          };\n        }\n        if (forge.options.usePureJavaScript || !forge.util.isNodejs && !getRandomValues) {\n          if (typeof window === \"undefined\" || window.document === void 0) {\n          }\n          _ctx.collectInt(+/* @__PURE__ */ new Date(), 32);\n          if (typeof navigator !== \"undefined\") {\n            var _navBytes = \"\";\n            for (var key in navigator) {\n              try {\n                if (typeof navigator[key] == \"string\") {\n                  _navBytes += navigator[key];\n                }\n              } catch (e) {\n              }\n            }\n            _ctx.collect(_navBytes);\n            _navBytes = null;\n          }\n          if (jQuery2) {\n            jQuery2().mousemove(function(e) {\n              _ctx.collectInt(e.clientX, 16);\n              _ctx.collectInt(e.clientY, 16);\n            });\n            jQuery2().keypress(function(e) {\n              _ctx.collectInt(e.charCode, 8);\n            });\n          }\n        }\n        if (!forge.random) {\n          forge.random = _ctx;\n        } else {\n          for (var key in _ctx) {\n            forge.random[key] = _ctx[key];\n          }\n        }\n        forge.random.createInstance = spawnPrng;\n        module2.exports = forge.random;\n      })(typeof jQuery !== \"undefined\" ? jQuery : null);\n    })();\n  }\n});\n\n// ../../node_modules/node-forge/lib/rc2.js\nvar require_rc2 = __commonJS({\n  \"../../node_modules/node-forge/lib/rc2.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    var piTable = [\n      217,\n      120,\n      249,\n      196,\n      25,\n      221,\n      181,\n      237,\n      40,\n      233,\n      253,\n      121,\n      74,\n      160,\n      216,\n      157,\n      198,\n      126,\n      55,\n      131,\n      43,\n      118,\n      83,\n      142,\n      98,\n      76,\n      100,\n      136,\n      68,\n      139,\n      251,\n      162,\n      23,\n      154,\n      89,\n      245,\n      135,\n      179,\n      79,\n      19,\n      97,\n      69,\n      109,\n      141,\n      9,\n      129,\n      125,\n      50,\n      189,\n      143,\n      64,\n      235,\n      134,\n      183,\n      123,\n      11,\n      240,\n      149,\n      33,\n      34,\n      92,\n      107,\n      78,\n      130,\n      84,\n      214,\n      101,\n      147,\n      206,\n      96,\n      178,\n      28,\n      115,\n      86,\n      192,\n      20,\n      167,\n      140,\n      241,\n      220,\n      18,\n      117,\n      202,\n      31,\n      59,\n      190,\n      228,\n      209,\n      66,\n      61,\n      212,\n      48,\n      163,\n      60,\n      182,\n      38,\n      111,\n      191,\n      14,\n      218,\n      70,\n      105,\n      7,\n      87,\n      39,\n      242,\n      29,\n      155,\n      188,\n      148,\n      67,\n      3,\n      248,\n      17,\n      199,\n      246,\n      144,\n      239,\n      62,\n      231,\n      6,\n      195,\n      213,\n      47,\n      200,\n      102,\n      30,\n      215,\n      8,\n      232,\n      234,\n      222,\n      128,\n      82,\n      238,\n      247,\n      132,\n      170,\n      114,\n      172,\n      53,\n      77,\n      106,\n      42,\n      150,\n      26,\n      210,\n      113,\n      90,\n      21,\n      73,\n      116,\n      75,\n      159,\n      208,\n      94,\n      4,\n      24,\n      164,\n      236,\n      194,\n      224,\n      65,\n      110,\n      15,\n      81,\n      203,\n      204,\n      36,\n      145,\n      175,\n      80,\n      161,\n      244,\n      112,\n      57,\n      153,\n      124,\n      58,\n      133,\n      35,\n      184,\n      180,\n      122,\n      252,\n      2,\n      54,\n      91,\n      37,\n      85,\n      151,\n      49,\n      45,\n      93,\n      250,\n      152,\n      227,\n      138,\n      146,\n      174,\n      5,\n      223,\n      41,\n      16,\n      103,\n      108,\n      186,\n      201,\n      211,\n      0,\n      230,\n      207,\n      225,\n      158,\n      168,\n      44,\n      99,\n      22,\n      1,\n      63,\n      88,\n      226,\n      137,\n      169,\n      13,\n      56,\n      52,\n      27,\n      171,\n      51,\n      255,\n      176,\n      187,\n      72,\n      12,\n      95,\n      185,\n      177,\n      205,\n      46,\n      197,\n      243,\n      219,\n      71,\n      229,\n      165,\n      156,\n      119,\n      10,\n      166,\n      32,\n      104,\n      254,\n      127,\n      193,\n      173\n    ];\n    var s = [1, 2, 3, 5];\n    var rol = function(word, bits) {\n      return word << bits & 65535 | (word & 65535) >> 16 - bits;\n    };\n    var ror = function(word, bits) {\n      return (word & 65535) >> bits | word << 16 - bits & 65535;\n    };\n    module2.exports = forge.rc2 = forge.rc2 || {};\n    forge.rc2.expandKey = function(key, effKeyBits) {\n      if (typeof key === \"string\") {\n        key = forge.util.createBuffer(key);\n      }\n      effKeyBits = effKeyBits || 128;\n      var L = key;\n      var T = key.length();\n      var T1 = effKeyBits;\n      var T8 = Math.ceil(T1 / 8);\n      var TM = 255 >> (T1 & 7);\n      var i;\n      for (i = T; i < 128; i++) {\n        L.putByte(piTable[L.at(i - 1) + L.at(i - T) & 255]);\n      }\n      L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);\n      for (i = 127 - T8; i >= 0; i--) {\n        L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);\n      }\n      return L;\n    };\n    var createCipher = function(key, bits, encrypt) {\n      var _finish = false, _input = null, _output = null, _iv = null;\n      var mixRound, mashRound;\n      var i, j, K = [];\n      key = forge.rc2.expandKey(key, bits);\n      for (i = 0; i < 64; i++) {\n        K.push(key.getInt16Le());\n      }\n      if (encrypt) {\n        mixRound = function(R) {\n          for (i = 0; i < 4; i++) {\n            R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);\n            R[i] = rol(R[i], s[i]);\n            j++;\n          }\n        };\n        mashRound = function(R) {\n          for (i = 0; i < 4; i++) {\n            R[i] += K[R[(i + 3) % 4] & 63];\n          }\n        };\n      } else {\n        mixRound = function(R) {\n          for (i = 3; i >= 0; i--) {\n            R[i] = ror(R[i], s[i]);\n            R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);\n            j--;\n          }\n        };\n        mashRound = function(R) {\n          for (i = 3; i >= 0; i--) {\n            R[i] -= K[R[(i + 3) % 4] & 63];\n          }\n        };\n      }\n      var runPlan = function(plan) {\n        var R = [];\n        for (i = 0; i < 4; i++) {\n          var val = _input.getInt16Le();\n          if (_iv !== null) {\n            if (encrypt) {\n              val ^= _iv.getInt16Le();\n            } else {\n              _iv.putInt16Le(val);\n            }\n          }\n          R.push(val & 65535);\n        }\n        j = encrypt ? 0 : 63;\n        for (var ptr = 0; ptr < plan.length; ptr++) {\n          for (var ctr = 0; ctr < plan[ptr][0]; ctr++) {\n            plan[ptr][1](R);\n          }\n        }\n        for (i = 0; i < 4; i++) {\n          if (_iv !== null) {\n            if (encrypt) {\n              _iv.putInt16Le(R[i]);\n            } else {\n              R[i] ^= _iv.getInt16Le();\n            }\n          }\n          _output.putInt16Le(R[i]);\n        }\n      };\n      var cipher = null;\n      cipher = {\n        /**\n         * Starts or restarts the encryption or decryption process, whichever\n         * was previously configured.\n         *\n         * To use the cipher in CBC mode, iv may be given either as a string\n         * of bytes, or as a byte buffer.  For ECB mode, give null as iv.\n         *\n         * @param iv the initialization vector to use, null for ECB mode.\n         * @param output the output the buffer to write to, null to create one.\n         */\n        start: function(iv, output) {\n          if (iv) {\n            if (typeof iv === \"string\") {\n              iv = forge.util.createBuffer(iv);\n            }\n          }\n          _finish = false;\n          _input = forge.util.createBuffer();\n          _output = output || new forge.util.createBuffer();\n          _iv = iv;\n          cipher.output = _output;\n        },\n        /**\n         * Updates the next block.\n         *\n         * @param input the buffer to read from.\n         */\n        update: function(input) {\n          if (!_finish) {\n            _input.putBuffer(input);\n          }\n          while (_input.length() >= 8) {\n            runPlan([\n              [5, mixRound],\n              [1, mashRound],\n              [6, mixRound],\n              [1, mashRound],\n              [5, mixRound]\n            ]);\n          }\n        },\n        /**\n         * Finishes encrypting or decrypting.\n         *\n         * @param pad a padding function to use, null for PKCS#7 padding,\n         *           signature(blockSize, buffer, decrypt).\n         *\n         * @return true if successful, false on error.\n         */\n        finish: function(pad) {\n          var rval = true;\n          if (encrypt) {\n            if (pad) {\n              rval = pad(8, _input, !encrypt);\n            } else {\n              var padding = _input.length() === 8 ? 8 : 8 - _input.length();\n              _input.fillWithByte(padding, padding);\n            }\n          }\n          if (rval) {\n            _finish = true;\n            cipher.update();\n          }\n          if (!encrypt) {\n            rval = _input.length() === 0;\n            if (rval) {\n              if (pad) {\n                rval = pad(8, _output, !encrypt);\n              } else {\n                var len = _output.length();\n                var count = _output.at(len - 1);\n                if (count > len) {\n                  rval = false;\n                } else {\n                  _output.truncate(count);\n                }\n              }\n            }\n          }\n          return rval;\n        }\n      };\n      return cipher;\n    };\n    forge.rc2.startEncrypting = function(key, iv, output) {\n      var cipher = forge.rc2.createEncryptionCipher(key, 128);\n      cipher.start(iv, output);\n      return cipher;\n    };\n    forge.rc2.createEncryptionCipher = function(key, bits) {\n      return createCipher(key, bits, true);\n    };\n    forge.rc2.startDecrypting = function(key, iv, output) {\n      var cipher = forge.rc2.createDecryptionCipher(key, 128);\n      cipher.start(iv, output);\n      return cipher;\n    };\n    forge.rc2.createDecryptionCipher = function(key, bits) {\n      return createCipher(key, bits, false);\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/jsbn.js\nvar require_jsbn = __commonJS({\n  \"../../node_modules/node-forge/lib/jsbn.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    module2.exports = forge.jsbn = forge.jsbn || {};\n    var dbits;\n    var canary = 244837814094590;\n    var j_lm = (canary & 16777215) == 15715070;\n    function BigInteger(a, b, c) {\n      this.data = [];\n      if (a != null)\n        if (\"number\" == typeof a)\n          this.fromNumber(a, b, c);\n        else if (b == null && \"string\" != typeof a)\n          this.fromString(a, 256);\n        else\n          this.fromString(a, b);\n    }\n    forge.jsbn.BigInteger = BigInteger;\n    function nbi() {\n      return new BigInteger(null);\n    }\n    function am1(i, x, w, j, c, n) {\n      while (--n >= 0) {\n        var v = x * this.data[i++] + w.data[j] + c;\n        c = Math.floor(v / 67108864);\n        w.data[j++] = v & 67108863;\n      }\n      return c;\n    }\n    function am2(i, x, w, j, c, n) {\n      var xl = x & 32767, xh = x >> 15;\n      while (--n >= 0) {\n        var l = this.data[i] & 32767;\n        var h = this.data[i++] >> 15;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 32767) << 15) + w.data[j] + (c & 1073741823);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w.data[j++] = l & 1073741823;\n      }\n      return c;\n    }\n    function am3(i, x, w, j, c, n) {\n      var xl = x & 16383, xh = x >> 14;\n      while (--n >= 0) {\n        var l = this.data[i] & 16383;\n        var h = this.data[i++] >> 14;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 16383) << 14) + w.data[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w.data[j++] = l & 268435455;\n      }\n      return c;\n    }\n    if (typeof navigator === \"undefined\") {\n      BigInteger.prototype.am = am3;\n      dbits = 28;\n    } else if (j_lm && navigator.appName == \"Microsoft Internet Explorer\") {\n      BigInteger.prototype.am = am2;\n      dbits = 30;\n    } else if (j_lm && navigator.appName != \"Netscape\") {\n      BigInteger.prototype.am = am1;\n      dbits = 26;\n    } else {\n      BigInteger.prototype.am = am3;\n      dbits = 28;\n    }\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = (1 << dbits) - 1;\n    BigInteger.prototype.DV = 1 << dbits;\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2, BI_FP);\n    BigInteger.prototype.F1 = BI_FP - dbits;\n    BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr;\n    var vv;\n    rr = \"0\".charCodeAt(0);\n    for (vv = 0; vv <= 9; ++vv)\n      BI_RC[rr++] = vv;\n    rr = \"a\".charCodeAt(0);\n    for (vv = 10; vv < 36; ++vv)\n      BI_RC[rr++] = vv;\n    rr = \"A\".charCodeAt(0);\n    for (vv = 10; vv < 36; ++vv)\n      BI_RC[rr++] = vv;\n    function int2char(n) {\n      return BI_RM.charAt(n);\n    }\n    function intAt(s, i) {\n      var c = BI_RC[s.charCodeAt(i)];\n      return c == null ? -1 : c;\n    }\n    function bnpCopyTo(r) {\n      for (var i = this.t - 1; i >= 0; --i)\n        r.data[i] = this.data[i];\n      r.t = this.t;\n      r.s = this.s;\n    }\n    function bnpFromInt(x) {\n      this.t = 1;\n      this.s = x < 0 ? -1 : 0;\n      if (x > 0)\n        this.data[0] = x;\n      else if (x < -1)\n        this.data[0] = x + this.DV;\n      else\n        this.t = 0;\n    }\n    function nbv(i) {\n      var r = nbi();\n      r.fromInt(i);\n      return r;\n    }\n    function bnpFromString(s, b) {\n      var k;\n      if (b == 16)\n        k = 4;\n      else if (b == 8)\n        k = 3;\n      else if (b == 256)\n        k = 8;\n      else if (b == 2)\n        k = 1;\n      else if (b == 32)\n        k = 5;\n      else if (b == 4)\n        k = 2;\n      else {\n        this.fromRadix(s, b);\n        return;\n      }\n      this.t = 0;\n      this.s = 0;\n      var i = s.length, mi = false, sh = 0;\n      while (--i >= 0) {\n        var x = k == 8 ? s[i] & 255 : intAt(s, i);\n        if (x < 0) {\n          if (s.charAt(i) == \"-\")\n            mi = true;\n          continue;\n        }\n        mi = false;\n        if (sh == 0)\n          this.data[this.t++] = x;\n        else if (sh + k > this.DB) {\n          this.data[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n          this.data[this.t++] = x >> this.DB - sh;\n        } else\n          this.data[this.t - 1] |= x << sh;\n        sh += k;\n        if (sh >= this.DB)\n          sh -= this.DB;\n      }\n      if (k == 8 && (s[0] & 128) != 0) {\n        this.s = -1;\n        if (sh > 0)\n          this.data[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n      }\n      this.clamp();\n      if (mi)\n        BigInteger.ZERO.subTo(this, this);\n    }\n    function bnpClamp() {\n      var c = this.s & this.DM;\n      while (this.t > 0 && this.data[this.t - 1] == c)\n        --this.t;\n    }\n    function bnToString(b) {\n      if (this.s < 0)\n        return \"-\" + this.negate().toString(b);\n      var k;\n      if (b == 16)\n        k = 4;\n      else if (b == 8)\n        k = 3;\n      else if (b == 2)\n        k = 1;\n      else if (b == 32)\n        k = 5;\n      else if (b == 4)\n        k = 2;\n      else\n        return this.toRadix(b);\n      var km = (1 << k) - 1, d, m = false, r = \"\", i = this.t;\n      var p = this.DB - i * this.DB % k;\n      if (i-- > 0) {\n        if (p < this.DB && (d = this.data[i] >> p) > 0) {\n          m = true;\n          r = int2char(d);\n        }\n        while (i >= 0) {\n          if (p < k) {\n            d = (this.data[i] & (1 << p) - 1) << k - p;\n            d |= this.data[--i] >> (p += this.DB - k);\n          } else {\n            d = this.data[i] >> (p -= k) & km;\n            if (p <= 0) {\n              p += this.DB;\n              --i;\n            }\n          }\n          if (d > 0)\n            m = true;\n          if (m)\n            r += int2char(d);\n        }\n      }\n      return m ? r : \"0\";\n    }\n    function bnNegate() {\n      var r = nbi();\n      BigInteger.ZERO.subTo(this, r);\n      return r;\n    }\n    function bnAbs() {\n      return this.s < 0 ? this.negate() : this;\n    }\n    function bnCompareTo(a) {\n      var r = this.s - a.s;\n      if (r != 0)\n        return r;\n      var i = this.t;\n      r = i - a.t;\n      if (r != 0)\n        return this.s < 0 ? -r : r;\n      while (--i >= 0)\n        if ((r = this.data[i] - a.data[i]) != 0)\n          return r;\n      return 0;\n    }\n    function nbits(x) {\n      var r = 1, t;\n      if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n      }\n      if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n      }\n      if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n      }\n      if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n      }\n      if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n      }\n      return r;\n    }\n    function bnBitLength() {\n      if (this.t <= 0)\n        return 0;\n      return this.DB * (this.t - 1) + nbits(this.data[this.t - 1] ^ this.s & this.DM);\n    }\n    function bnpDLShiftTo(n, r) {\n      var i;\n      for (i = this.t - 1; i >= 0; --i)\n        r.data[i + n] = this.data[i];\n      for (i = n - 1; i >= 0; --i)\n        r.data[i] = 0;\n      r.t = this.t + n;\n      r.s = this.s;\n    }\n    function bnpDRShiftTo(n, r) {\n      for (var i = n; i < this.t; ++i)\n        r.data[i - n] = this.data[i];\n      r.t = Math.max(this.t - n, 0);\n      r.s = this.s;\n    }\n    function bnpLShiftTo(n, r) {\n      var bs = n % this.DB;\n      var cbs = this.DB - bs;\n      var bm = (1 << cbs) - 1;\n      var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;\n      for (i = this.t - 1; i >= 0; --i) {\n        r.data[i + ds + 1] = this.data[i] >> cbs | c;\n        c = (this.data[i] & bm) << bs;\n      }\n      for (i = ds - 1; i >= 0; --i)\n        r.data[i] = 0;\n      r.data[ds] = c;\n      r.t = this.t + ds + 1;\n      r.s = this.s;\n      r.clamp();\n    }\n    function bnpRShiftTo(n, r) {\n      r.s = this.s;\n      var ds = Math.floor(n / this.DB);\n      if (ds >= this.t) {\n        r.t = 0;\n        return;\n      }\n      var bs = n % this.DB;\n      var cbs = this.DB - bs;\n      var bm = (1 << bs) - 1;\n      r.data[0] = this.data[ds] >> bs;\n      for (var i = ds + 1; i < this.t; ++i) {\n        r.data[i - ds - 1] |= (this.data[i] & bm) << cbs;\n        r.data[i - ds] = this.data[i] >> bs;\n      }\n      if (bs > 0)\n        r.data[this.t - ds - 1] |= (this.s & bm) << cbs;\n      r.t = this.t - ds;\n      r.clamp();\n    }\n    function bnpSubTo(a, r) {\n      var i = 0, c = 0, m = Math.min(a.t, this.t);\n      while (i < m) {\n        c += this.data[i] - a.data[i];\n        r.data[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      if (a.t < this.t) {\n        c -= a.s;\n        while (i < this.t) {\n          c += this.data[i];\n          r.data[i++] = c & this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      } else {\n        c += this.s;\n        while (i < a.t) {\n          c -= a.data[i];\n          r.data[i++] = c & this.DM;\n          c >>= this.DB;\n        }\n        c -= a.s;\n      }\n      r.s = c < 0 ? -1 : 0;\n      if (c < -1)\n        r.data[i++] = this.DV + c;\n      else if (c > 0)\n        r.data[i++] = c;\n      r.t = i;\n      r.clamp();\n    }\n    function bnpMultiplyTo(a, r) {\n      var x = this.abs(), y = a.abs();\n      var i = x.t;\n      r.t = i + y.t;\n      while (--i >= 0)\n        r.data[i] = 0;\n      for (i = 0; i < y.t; ++i)\n        r.data[i + x.t] = x.am(0, y.data[i], r, i, 0, x.t);\n      r.s = 0;\n      r.clamp();\n      if (this.s != a.s)\n        BigInteger.ZERO.subTo(r, r);\n    }\n    function bnpSquareTo(r) {\n      var x = this.abs();\n      var i = r.t = 2 * x.t;\n      while (--i >= 0)\n        r.data[i] = 0;\n      for (i = 0; i < x.t - 1; ++i) {\n        var c = x.am(i, x.data[i], r, 2 * i, 0, 1);\n        if ((r.data[i + x.t] += x.am(i + 1, 2 * x.data[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n          r.data[i + x.t] -= x.DV;\n          r.data[i + x.t + 1] = 1;\n        }\n      }\n      if (r.t > 0)\n        r.data[r.t - 1] += x.am(i, x.data[i], r, 2 * i, 0, 1);\n      r.s = 0;\n      r.clamp();\n    }\n    function bnpDivRemTo(m, q, r) {\n      var pm = m.abs();\n      if (pm.t <= 0)\n        return;\n      var pt = this.abs();\n      if (pt.t < pm.t) {\n        if (q != null)\n          q.fromInt(0);\n        if (r != null)\n          this.copyTo(r);\n        return;\n      }\n      if (r == null)\n        r = nbi();\n      var y = nbi(), ts = this.s, ms = m.s;\n      var nsh = this.DB - nbits(pm.data[pm.t - 1]);\n      if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n      } else {\n        pm.copyTo(y);\n        pt.copyTo(r);\n      }\n      var ys = y.t;\n      var y0 = y.data[ys - 1];\n      if (y0 == 0)\n        return;\n      var yt = y0 * (1 << this.F1) + (ys > 1 ? y.data[ys - 2] >> this.F2 : 0);\n      var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\n      var i = r.t, j = i - ys, t = q == null ? nbi() : q;\n      y.dlShiftTo(j, t);\n      if (r.compareTo(t) >= 0) {\n        r.data[r.t++] = 1;\n        r.subTo(t, r);\n      }\n      BigInteger.ONE.dlShiftTo(ys, t);\n      t.subTo(y, y);\n      while (y.t < ys)\n        y.data[y.t++] = 0;\n      while (--j >= 0) {\n        var qd = r.data[--i] == y0 ? this.DM : Math.floor(r.data[i] * d1 + (r.data[i - 1] + e) * d2);\n        if ((r.data[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n          y.dlShiftTo(j, t);\n          r.subTo(t, r);\n          while (r.data[i] < --qd)\n            r.subTo(t, r);\n        }\n      }\n      if (q != null) {\n        r.drShiftTo(ys, q);\n        if (ts != ms)\n          BigInteger.ZERO.subTo(q, q);\n      }\n      r.t = ys;\n      r.clamp();\n      if (nsh > 0)\n        r.rShiftTo(nsh, r);\n      if (ts < 0)\n        BigInteger.ZERO.subTo(r, r);\n    }\n    function bnMod(a) {\n      var r = nbi();\n      this.abs().divRemTo(a, null, r);\n      if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        a.subTo(r, r);\n      return r;\n    }\n    function Classic(m) {\n      this.m = m;\n    }\n    function cConvert(x) {\n      if (x.s < 0 || x.compareTo(this.m) >= 0)\n        return x.mod(this.m);\n      else\n        return x;\n    }\n    function cRevert(x) {\n      return x;\n    }\n    function cReduce(x) {\n      x.divRemTo(this.m, null, x);\n    }\n    function cMulTo(x, y, r) {\n      x.multiplyTo(y, r);\n      this.reduce(r);\n    }\n    function cSqrTo(x, r) {\n      x.squareTo(r);\n      this.reduce(r);\n    }\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n    function bnpInvDigit() {\n      if (this.t < 1)\n        return 0;\n      var x = this.data[0];\n      if ((x & 1) == 0)\n        return 0;\n      var y = x & 3;\n      y = y * (2 - (x & 15) * y) & 15;\n      y = y * (2 - (x & 255) * y) & 255;\n      y = y * (2 - ((x & 65535) * y & 65535)) & 65535;\n      y = y * (2 - x * y % this.DV) % this.DV;\n      return y > 0 ? this.DV - y : -y;\n    }\n    function Montgomery(m) {\n      this.m = m;\n      this.mp = m.invDigit();\n      this.mpl = this.mp & 32767;\n      this.mph = this.mp >> 15;\n      this.um = (1 << m.DB - 15) - 1;\n      this.mt2 = 2 * m.t;\n    }\n    function montConvert(x) {\n      var r = nbi();\n      x.abs().dlShiftTo(this.m.t, r);\n      r.divRemTo(this.m, null, r);\n      if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)\n        this.m.subTo(r, r);\n      return r;\n    }\n    function montRevert(x) {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n    function montReduce(x) {\n      while (x.t <= this.mt2)\n        x.data[x.t++] = 0;\n      for (var i = 0; i < this.m.t; ++i) {\n        var j = x.data[i] & 32767;\n        var u0 = j * this.mpl + ((j * this.mph + (x.data[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n        j = i + this.m.t;\n        x.data[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        while (x.data[j] >= x.DV) {\n          x.data[j] -= x.DV;\n          x.data[++j]++;\n        }\n      }\n      x.clamp();\n      x.drShiftTo(this.m.t, x);\n      if (x.compareTo(this.m) >= 0)\n        x.subTo(this.m, x);\n    }\n    function montSqrTo(x, r) {\n      x.squareTo(r);\n      this.reduce(r);\n    }\n    function montMulTo(x, y, r) {\n      x.multiplyTo(y, r);\n      this.reduce(r);\n    }\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n    function bnpIsEven() {\n      return (this.t > 0 ? this.data[0] & 1 : this.s) == 0;\n    }\n    function bnpExp(e, z) {\n      if (e > 4294967295 || e < 1)\n        return BigInteger.ONE;\n      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;\n      g.copyTo(r);\n      while (--i >= 0) {\n        z.sqrTo(r, r2);\n        if ((e & 1 << i) > 0)\n          z.mulTo(r2, g, r);\n        else {\n          var t = r;\n          r = r2;\n          r2 = t;\n        }\n      }\n      return z.revert(r);\n    }\n    function bnModPowInt(e, m) {\n      var z;\n      if (e < 256 || m.isEven())\n        z = new Classic(m);\n      else\n        z = new Montgomery(m);\n      return this.exp(e, z);\n    }\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n    function bnClone() {\n      var r = nbi();\n      this.copyTo(r);\n      return r;\n    }\n    function bnIntValue() {\n      if (this.s < 0) {\n        if (this.t == 1)\n          return this.data[0] - this.DV;\n        else if (this.t == 0)\n          return -1;\n      } else if (this.t == 1)\n        return this.data[0];\n      else if (this.t == 0)\n        return 0;\n      return (this.data[1] & (1 << 32 - this.DB) - 1) << this.DB | this.data[0];\n    }\n    function bnByteValue() {\n      return this.t == 0 ? this.s : this.data[0] << 24 >> 24;\n    }\n    function bnShortValue() {\n      return this.t == 0 ? this.s : this.data[0] << 16 >> 16;\n    }\n    function bnpChunkSize(r) {\n      return Math.floor(Math.LN2 * this.DB / Math.log(r));\n    }\n    function bnSigNum() {\n      if (this.s < 0)\n        return -1;\n      else if (this.t <= 0 || this.t == 1 && this.data[0] <= 0)\n        return 0;\n      else\n        return 1;\n    }\n    function bnpToRadix(b) {\n      if (b == null)\n        b = 10;\n      if (this.signum() == 0 || b < 2 || b > 36)\n        return \"0\";\n      var cs = this.chunkSize(b);\n      var a = Math.pow(b, cs);\n      var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n      this.divRemTo(d, y, z);\n      while (y.signum() > 0) {\n        r = (a + z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d, y, z);\n      }\n      return z.intValue().toString(b) + r;\n    }\n    function bnpFromRadix(s, b) {\n      this.fromInt(0);\n      if (b == null)\n        b = 10;\n      var cs = this.chunkSize(b);\n      var d = Math.pow(b, cs), mi = false, j = 0, w = 0;\n      for (var i = 0; i < s.length; ++i) {\n        var x = intAt(s, i);\n        if (x < 0) {\n          if (s.charAt(i) == \"-\" && this.signum() == 0)\n            mi = true;\n          continue;\n        }\n        w = b * w + x;\n        if (++j >= cs) {\n          this.dMultiply(d);\n          this.dAddOffset(w, 0);\n          j = 0;\n          w = 0;\n        }\n      }\n      if (j > 0) {\n        this.dMultiply(Math.pow(b, j));\n        this.dAddOffset(w, 0);\n      }\n      if (mi)\n        BigInteger.ZERO.subTo(this, this);\n    }\n    function bnpFromNumber(a, b, c) {\n      if (\"number\" == typeof b) {\n        if (a < 2)\n          this.fromInt(1);\n        else {\n          this.fromNumber(a, c);\n          if (!this.testBit(a - 1))\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n          if (this.isEven())\n            this.dAddOffset(1, 0);\n          while (!this.isProbablePrime(b)) {\n            this.dAddOffset(2, 0);\n            if (this.bitLength() > a)\n              this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n          }\n        }\n      } else {\n        var x = new Array(), t = a & 7;\n        x.length = (a >> 3) + 1;\n        b.nextBytes(x);\n        if (t > 0)\n          x[0] &= (1 << t) - 1;\n        else\n          x[0] = 0;\n        this.fromString(x, 256);\n      }\n    }\n    function bnToByteArray() {\n      var i = this.t, r = new Array();\n      r[0] = this.s;\n      var p = this.DB - i * this.DB % 8, d, k = 0;\n      if (i-- > 0) {\n        if (p < this.DB && (d = this.data[i] >> p) != (this.s & this.DM) >> p)\n          r[k++] = d | this.s << this.DB - p;\n        while (i >= 0) {\n          if (p < 8) {\n            d = (this.data[i] & (1 << p) - 1) << 8 - p;\n            d |= this.data[--i] >> (p += this.DB - 8);\n          } else {\n            d = this.data[i] >> (p -= 8) & 255;\n            if (p <= 0) {\n              p += this.DB;\n              --i;\n            }\n          }\n          if ((d & 128) != 0)\n            d |= -256;\n          if (k == 0 && (this.s & 128) != (d & 128))\n            ++k;\n          if (k > 0 || d != this.s)\n            r[k++] = d;\n        }\n      }\n      return r;\n    }\n    function bnEquals(a) {\n      return this.compareTo(a) == 0;\n    }\n    function bnMin(a) {\n      return this.compareTo(a) < 0 ? this : a;\n    }\n    function bnMax(a) {\n      return this.compareTo(a) > 0 ? this : a;\n    }\n    function bnpBitwiseTo(a, op, r) {\n      var i, f, m = Math.min(a.t, this.t);\n      for (i = 0; i < m; ++i)\n        r.data[i] = op(this.data[i], a.data[i]);\n      if (a.t < this.t) {\n        f = a.s & this.DM;\n        for (i = m; i < this.t; ++i)\n          r.data[i] = op(this.data[i], f);\n        r.t = this.t;\n      } else {\n        f = this.s & this.DM;\n        for (i = m; i < a.t; ++i)\n          r.data[i] = op(f, a.data[i]);\n        r.t = a.t;\n      }\n      r.s = op(this.s, a.s);\n      r.clamp();\n    }\n    function op_and(x, y) {\n      return x & y;\n    }\n    function bnAnd(a) {\n      var r = nbi();\n      this.bitwiseTo(a, op_and, r);\n      return r;\n    }\n    function op_or(x, y) {\n      return x | y;\n    }\n    function bnOr(a) {\n      var r = nbi();\n      this.bitwiseTo(a, op_or, r);\n      return r;\n    }\n    function op_xor(x, y) {\n      return x ^ y;\n    }\n    function bnXor(a) {\n      var r = nbi();\n      this.bitwiseTo(a, op_xor, r);\n      return r;\n    }\n    function op_andnot(x, y) {\n      return x & ~y;\n    }\n    function bnAndNot(a) {\n      var r = nbi();\n      this.bitwiseTo(a, op_andnot, r);\n      return r;\n    }\n    function bnNot() {\n      var r = nbi();\n      for (var i = 0; i < this.t; ++i)\n        r.data[i] = this.DM & ~this.data[i];\n      r.t = this.t;\n      r.s = ~this.s;\n      return r;\n    }\n    function bnShiftLeft(n) {\n      var r = nbi();\n      if (n < 0)\n        this.rShiftTo(-n, r);\n      else\n        this.lShiftTo(n, r);\n      return r;\n    }\n    function bnShiftRight(n) {\n      var r = nbi();\n      if (n < 0)\n        this.lShiftTo(-n, r);\n      else\n        this.rShiftTo(n, r);\n      return r;\n    }\n    function lbit(x) {\n      if (x == 0)\n        return -1;\n      var r = 0;\n      if ((x & 65535) == 0) {\n        x >>= 16;\n        r += 16;\n      }\n      if ((x & 255) == 0) {\n        x >>= 8;\n        r += 8;\n      }\n      if ((x & 15) == 0) {\n        x >>= 4;\n        r += 4;\n      }\n      if ((x & 3) == 0) {\n        x >>= 2;\n        r += 2;\n      }\n      if ((x & 1) == 0)\n        ++r;\n      return r;\n    }\n    function bnGetLowestSetBit() {\n      for (var i = 0; i < this.t; ++i)\n        if (this.data[i] != 0)\n          return i * this.DB + lbit(this.data[i]);\n      if (this.s < 0)\n        return this.t * this.DB;\n      return -1;\n    }\n    function cbit(x) {\n      var r = 0;\n      while (x != 0) {\n        x &= x - 1;\n        ++r;\n      }\n      return r;\n    }\n    function bnBitCount() {\n      var r = 0, x = this.s & this.DM;\n      for (var i = 0; i < this.t; ++i)\n        r += cbit(this.data[i] ^ x);\n      return r;\n    }\n    function bnTestBit(n) {\n      var j = Math.floor(n / this.DB);\n      if (j >= this.t)\n        return this.s != 0;\n      return (this.data[j] & 1 << n % this.DB) != 0;\n    }\n    function bnpChangeBit(n, op) {\n      var r = BigInteger.ONE.shiftLeft(n);\n      this.bitwiseTo(r, op, r);\n      return r;\n    }\n    function bnSetBit(n) {\n      return this.changeBit(n, op_or);\n    }\n    function bnClearBit(n) {\n      return this.changeBit(n, op_andnot);\n    }\n    function bnFlipBit(n) {\n      return this.changeBit(n, op_xor);\n    }\n    function bnpAddTo(a, r) {\n      var i = 0, c = 0, m = Math.min(a.t, this.t);\n      while (i < m) {\n        c += this.data[i] + a.data[i];\n        r.data[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      if (a.t < this.t) {\n        c += a.s;\n        while (i < this.t) {\n          c += this.data[i];\n          r.data[i++] = c & this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      } else {\n        c += this.s;\n        while (i < a.t) {\n          c += a.data[i];\n          r.data[i++] = c & this.DM;\n          c >>= this.DB;\n        }\n        c += a.s;\n      }\n      r.s = c < 0 ? -1 : 0;\n      if (c > 0)\n        r.data[i++] = c;\n      else if (c < -1)\n        r.data[i++] = this.DV + c;\n      r.t = i;\n      r.clamp();\n    }\n    function bnAdd(a) {\n      var r = nbi();\n      this.addTo(a, r);\n      return r;\n    }\n    function bnSubtract(a) {\n      var r = nbi();\n      this.subTo(a, r);\n      return r;\n    }\n    function bnMultiply(a) {\n      var r = nbi();\n      this.multiplyTo(a, r);\n      return r;\n    }\n    function bnDivide(a) {\n      var r = nbi();\n      this.divRemTo(a, r, null);\n      return r;\n    }\n    function bnRemainder(a) {\n      var r = nbi();\n      this.divRemTo(a, null, r);\n      return r;\n    }\n    function bnDivideAndRemainder(a) {\n      var q = nbi(), r = nbi();\n      this.divRemTo(a, q, r);\n      return new Array(q, r);\n    }\n    function bnpDMultiply(n) {\n      this.data[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n      ++this.t;\n      this.clamp();\n    }\n    function bnpDAddOffset(n, w) {\n      if (n == 0)\n        return;\n      while (this.t <= w)\n        this.data[this.t++] = 0;\n      this.data[w] += n;\n      while (this.data[w] >= this.DV) {\n        this.data[w] -= this.DV;\n        if (++w >= this.t)\n          this.data[this.t++] = 0;\n        ++this.data[w];\n      }\n    }\n    function NullExp() {\n    }\n    function nNop(x) {\n      return x;\n    }\n    function nMulTo(x, y, r) {\n      x.multiplyTo(y, r);\n    }\n    function nSqrTo(x, r) {\n      x.squareTo(r);\n    }\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n    function bnPow(e) {\n      return this.exp(e, new NullExp());\n    }\n    function bnpMultiplyLowerTo(a, n, r) {\n      var i = Math.min(this.t + a.t, n);\n      r.s = 0;\n      r.t = i;\n      while (i > 0)\n        r.data[--i] = 0;\n      var j;\n      for (j = r.t - this.t; i < j; ++i)\n        r.data[i + this.t] = this.am(0, a.data[i], r, i, 0, this.t);\n      for (j = Math.min(a.t, n); i < j; ++i)\n        this.am(0, a.data[i], r, i, 0, n - i);\n      r.clamp();\n    }\n    function bnpMultiplyUpperTo(a, n, r) {\n      --n;\n      var i = r.t = this.t + a.t - n;\n      r.s = 0;\n      while (--i >= 0)\n        r.data[i] = 0;\n      for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n        r.data[this.t + i - n] = this.am(n - i, a.data[i], r, 0, 0, this.t + i - n);\n      r.clamp();\n      r.drShiftTo(1, r);\n    }\n    function Barrett(m) {\n      this.r2 = nbi();\n      this.q3 = nbi();\n      BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n      this.mu = this.r2.divide(m);\n      this.m = m;\n    }\n    function barrettConvert(x) {\n      if (x.s < 0 || x.t > 2 * this.m.t)\n        return x.mod(this.m);\n      else if (x.compareTo(this.m) < 0)\n        return x;\n      else {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n      }\n    }\n    function barrettRevert(x) {\n      return x;\n    }\n    function barrettReduce(x) {\n      x.drShiftTo(this.m.t - 1, this.r2);\n      if (x.t > this.m.t + 1) {\n        x.t = this.m.t + 1;\n        x.clamp();\n      }\n      this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n      this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n      while (x.compareTo(this.r2) < 0)\n        x.dAddOffset(1, this.m.t + 1);\n      x.subTo(this.r2, x);\n      while (x.compareTo(this.m) >= 0)\n        x.subTo(this.m, x);\n    }\n    function barrettSqrTo(x, r) {\n      x.squareTo(r);\n      this.reduce(r);\n    }\n    function barrettMulTo(x, y, r) {\n      x.multiplyTo(y, r);\n      this.reduce(r);\n    }\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n    function bnModPow(e, m) {\n      var i = e.bitLength(), k, r = nbv(1), z;\n      if (i <= 0)\n        return r;\n      else if (i < 18)\n        k = 1;\n      else if (i < 48)\n        k = 3;\n      else if (i < 144)\n        k = 4;\n      else if (i < 768)\n        k = 5;\n      else\n        k = 6;\n      if (i < 8)\n        z = new Classic(m);\n      else if (m.isEven())\n        z = new Barrett(m);\n      else\n        z = new Montgomery(m);\n      var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;\n      g[1] = z.convert(this);\n      if (k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1], g2);\n        while (n <= km) {\n          g[n] = nbi();\n          z.mulTo(g2, g[n - 2], g[n]);\n          n += 2;\n        }\n      }\n      var j = e.t - 1, w, is1 = true, r2 = nbi(), t;\n      i = nbits(e.data[j]) - 1;\n      while (j >= 0) {\n        if (i >= k1)\n          w = e.data[j] >> i - k1 & km;\n        else {\n          w = (e.data[j] & (1 << i + 1) - 1) << k1 - i;\n          if (j > 0)\n            w |= e.data[j - 1] >> this.DB + i - k1;\n        }\n        n = k;\n        while ((w & 1) == 0) {\n          w >>= 1;\n          --n;\n        }\n        if ((i -= n) < 0) {\n          i += this.DB;\n          --j;\n        }\n        if (is1) {\n          g[w].copyTo(r);\n          is1 = false;\n        } else {\n          while (n > 1) {\n            z.sqrTo(r, r2);\n            z.sqrTo(r2, r);\n            n -= 2;\n          }\n          if (n > 0)\n            z.sqrTo(r, r2);\n          else {\n            t = r;\n            r = r2;\n            r2 = t;\n          }\n          z.mulTo(r2, g[w], r);\n        }\n        while (j >= 0 && (e.data[j] & 1 << i) == 0) {\n          z.sqrTo(r, r2);\n          t = r;\n          r = r2;\n          r2 = t;\n          if (--i < 0) {\n            i = this.DB - 1;\n            --j;\n          }\n        }\n      }\n      return z.revert(r);\n    }\n    function bnGCD(a) {\n      var x = this.s < 0 ? this.negate() : this.clone();\n      var y = a.s < 0 ? a.negate() : a.clone();\n      if (x.compareTo(y) < 0) {\n        var t = x;\n        x = y;\n        y = t;\n      }\n      var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n      if (g < 0)\n        return x;\n      if (i < g)\n        g = i;\n      if (g > 0) {\n        x.rShiftTo(g, x);\n        y.rShiftTo(g, y);\n      }\n      while (x.signum() > 0) {\n        if ((i = x.getLowestSetBit()) > 0)\n          x.rShiftTo(i, x);\n        if ((i = y.getLowestSetBit()) > 0)\n          y.rShiftTo(i, y);\n        if (x.compareTo(y) >= 0) {\n          x.subTo(y, x);\n          x.rShiftTo(1, x);\n        } else {\n          y.subTo(x, y);\n          y.rShiftTo(1, y);\n        }\n      }\n      if (g > 0)\n        y.lShiftTo(g, y);\n      return y;\n    }\n    function bnpModInt(n) {\n      if (n <= 0)\n        return 0;\n      var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;\n      if (this.t > 0)\n        if (d == 0)\n          r = this.data[0] % n;\n        else\n          for (var i = this.t - 1; i >= 0; --i)\n            r = (d * r + this.data[i]) % n;\n      return r;\n    }\n    function bnModInverse(m) {\n      var ac = m.isEven();\n      if (this.isEven() && ac || m.signum() == 0)\n        return BigInteger.ZERO;\n      var u = m.clone(), v = this.clone();\n      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n      while (u.signum() != 0) {\n        while (u.isEven()) {\n          u.rShiftTo(1, u);\n          if (ac) {\n            if (!a.isEven() || !b.isEven()) {\n              a.addTo(this, a);\n              b.subTo(m, b);\n            }\n            a.rShiftTo(1, a);\n          } else if (!b.isEven())\n            b.subTo(m, b);\n          b.rShiftTo(1, b);\n        }\n        while (v.isEven()) {\n          v.rShiftTo(1, v);\n          if (ac) {\n            if (!c.isEven() || !d.isEven()) {\n              c.addTo(this, c);\n              d.subTo(m, d);\n            }\n            c.rShiftTo(1, c);\n          } else if (!d.isEven())\n            d.subTo(m, d);\n          d.rShiftTo(1, d);\n        }\n        if (u.compareTo(v) >= 0) {\n          u.subTo(v, u);\n          if (ac)\n            a.subTo(c, a);\n          b.subTo(d, b);\n        } else {\n          v.subTo(u, v);\n          if (ac)\n            c.subTo(a, c);\n          d.subTo(b, d);\n        }\n      }\n      if (v.compareTo(BigInteger.ONE) != 0)\n        return BigInteger.ZERO;\n      if (d.compareTo(m) >= 0)\n        return d.subtract(m);\n      if (d.signum() < 0)\n        d.addTo(m, d);\n      else\n        return d;\n      if (d.signum() < 0)\n        return d.add(m);\n      else\n        return d;\n    }\n    var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509];\n    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n    function bnIsProbablePrime(t) {\n      var i, x = this.abs();\n      if (x.t == 1 && x.data[0] <= lowprimes[lowprimes.length - 1]) {\n        for (i = 0; i < lowprimes.length; ++i)\n          if (x.data[0] == lowprimes[i])\n            return true;\n        return false;\n      }\n      if (x.isEven())\n        return false;\n      i = 1;\n      while (i < lowprimes.length) {\n        var m = lowprimes[i], j = i + 1;\n        while (j < lowprimes.length && m < lplim)\n          m *= lowprimes[j++];\n        m = x.modInt(m);\n        while (i < j)\n          if (m % lowprimes[i++] == 0)\n            return false;\n      }\n      return x.millerRabin(t);\n    }\n    function bnpMillerRabin(t) {\n      var n1 = this.subtract(BigInteger.ONE);\n      var k = n1.getLowestSetBit();\n      if (k <= 0)\n        return false;\n      var r = n1.shiftRight(k);\n      var prng = bnGetPrng();\n      var a;\n      for (var i = 0; i < t; ++i) {\n        do {\n          a = new BigInteger(this.bitLength(), prng);\n        } while (a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);\n        var y = a.modPow(r, this);\n        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n          var j = 1;\n          while (j++ < k && y.compareTo(n1) != 0) {\n            y = y.modPowInt(2, this);\n            if (y.compareTo(BigInteger.ONE) == 0)\n              return false;\n          }\n          if (y.compareTo(n1) != 0)\n            return false;\n        }\n      }\n      return true;\n    }\n    function bnGetPrng() {\n      return {\n        // x is an array to fill with bytes\n        nextBytes: function(x) {\n          for (var i = 0; i < x.length; ++i) {\n            x[i] = Math.floor(Math.random() * 256);\n          }\n        }\n      };\n    }\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n  }\n});\n\n// ../../node_modules/node-forge/lib/sha1.js\nvar require_sha1 = __commonJS({\n  \"../../node_modules/node-forge/lib/sha1.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_md();\n    require_util();\n    var sha1 = module2.exports = forge.sha1 = forge.sha1 || {};\n    forge.md.sha1 = forge.md.algorithms.sha1 = sha1;\n    sha1.create = function() {\n      if (!_initialized) {\n        _init();\n      }\n      var _state = null;\n      var _input = forge.util.createBuffer();\n      var _w = new Array(80);\n      var md = {\n        algorithm: \"sha1\",\n        blockLength: 64,\n        digestLength: 20,\n        // 56-bit length of message so far (does not including padding)\n        messageLength: 0,\n        // true message length\n        fullMessageLength: null,\n        // size of message length in bytes\n        messageLengthSize: 8\n      };\n      md.start = function() {\n        md.messageLength = 0;\n        md.fullMessageLength = md.messageLength64 = [];\n        var int32s = md.messageLengthSize / 4;\n        for (var i = 0; i < int32s; ++i) {\n          md.fullMessageLength.push(0);\n        }\n        _input = forge.util.createBuffer();\n        _state = {\n          h0: 1732584193,\n          h1: 4023233417,\n          h2: 2562383102,\n          h3: 271733878,\n          h4: 3285377520\n        };\n        return md;\n      };\n      md.start();\n      md.update = function(msg, encoding) {\n        if (encoding === \"utf8\") {\n          msg = forge.util.encodeUtf8(msg);\n        }\n        var len = msg.length;\n        md.messageLength += len;\n        len = [len / 4294967296 >>> 0, len >>> 0];\n        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n          md.fullMessageLength[i] += len[1];\n          len[1] = len[0] + (md.fullMessageLength[i] / 4294967296 >>> 0);\n          md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n          len[0] = len[1] / 4294967296 >>> 0;\n        }\n        _input.putBytes(msg);\n        _update(_state, _w, _input);\n        if (_input.read > 2048 || _input.length() === 0) {\n          _input.compact();\n        }\n        return md;\n      };\n      md.digest = function() {\n        var finalBlock = forge.util.createBuffer();\n        finalBlock.putBytes(_input.bytes());\n        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;\n        var overflow = remaining & md.blockLength - 1;\n        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n        var next, carry;\n        var bits = md.fullMessageLength[0] * 8;\n        for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {\n          next = md.fullMessageLength[i + 1] * 8;\n          carry = next / 4294967296 >>> 0;\n          bits += carry;\n          finalBlock.putInt32(bits >>> 0);\n          bits = next >>> 0;\n        }\n        finalBlock.putInt32(bits);\n        var s2 = {\n          h0: _state.h0,\n          h1: _state.h1,\n          h2: _state.h2,\n          h3: _state.h3,\n          h4: _state.h4\n        };\n        _update(s2, _w, finalBlock);\n        var rval = forge.util.createBuffer();\n        rval.putInt32(s2.h0);\n        rval.putInt32(s2.h1);\n        rval.putInt32(s2.h2);\n        rval.putInt32(s2.h3);\n        rval.putInt32(s2.h4);\n        return rval;\n      };\n      return md;\n    };\n    var _padding = null;\n    var _initialized = false;\n    function _init() {\n      _padding = String.fromCharCode(128);\n      _padding += forge.util.fillString(String.fromCharCode(0), 64);\n      _initialized = true;\n    }\n    function _update(s, w, bytes) {\n      var t, a, b, c, d, e, f, i;\n      var len = bytes.length();\n      while (len >= 64) {\n        a = s.h0;\n        b = s.h1;\n        c = s.h2;\n        d = s.h3;\n        e = s.h4;\n        for (i = 0; i < 16; ++i) {\n          t = bytes.getInt32();\n          w[i] = t;\n          f = d ^ b & (c ^ d);\n          t = (a << 5 | a >>> 27) + f + e + 1518500249 + t;\n          e = d;\n          d = c;\n          c = (b << 30 | b >>> 2) >>> 0;\n          b = a;\n          a = t;\n        }\n        for (; i < 20; ++i) {\n          t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];\n          t = t << 1 | t >>> 31;\n          w[i] = t;\n          f = d ^ b & (c ^ d);\n          t = (a << 5 | a >>> 27) + f + e + 1518500249 + t;\n          e = d;\n          d = c;\n          c = (b << 30 | b >>> 2) >>> 0;\n          b = a;\n          a = t;\n        }\n        for (; i < 32; ++i) {\n          t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];\n          t = t << 1 | t >>> 31;\n          w[i] = t;\n          f = b ^ c ^ d;\n          t = (a << 5 | a >>> 27) + f + e + 1859775393 + t;\n          e = d;\n          d = c;\n          c = (b << 30 | b >>> 2) >>> 0;\n          b = a;\n          a = t;\n        }\n        for (; i < 40; ++i) {\n          t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];\n          t = t << 2 | t >>> 30;\n          w[i] = t;\n          f = b ^ c ^ d;\n          t = (a << 5 | a >>> 27) + f + e + 1859775393 + t;\n          e = d;\n          d = c;\n          c = (b << 30 | b >>> 2) >>> 0;\n          b = a;\n          a = t;\n        }\n        for (; i < 60; ++i) {\n          t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];\n          t = t << 2 | t >>> 30;\n          w[i] = t;\n          f = b & c | d & (b ^ c);\n          t = (a << 5 | a >>> 27) + f + e + 2400959708 + t;\n          e = d;\n          d = c;\n          c = (b << 30 | b >>> 2) >>> 0;\n          b = a;\n          a = t;\n        }\n        for (; i < 80; ++i) {\n          t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];\n          t = t << 2 | t >>> 30;\n          w[i] = t;\n          f = b ^ c ^ d;\n          t = (a << 5 | a >>> 27) + f + e + 3395469782 + t;\n          e = d;\n          d = c;\n          c = (b << 30 | b >>> 2) >>> 0;\n          b = a;\n          a = t;\n        }\n        s.h0 = s.h0 + a | 0;\n        s.h1 = s.h1 + b | 0;\n        s.h2 = s.h2 + c | 0;\n        s.h3 = s.h3 + d | 0;\n        s.h4 = s.h4 + e | 0;\n        len -= 64;\n      }\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/pkcs1.js\nvar require_pkcs1 = __commonJS({\n  \"../../node_modules/node-forge/lib/pkcs1.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    require_random();\n    require_sha1();\n    var pkcs1 = module2.exports = forge.pkcs1 = forge.pkcs1 || {};\n    pkcs1.encode_rsa_oaep = function(key, message, options) {\n      var label;\n      var seed;\n      var md;\n      var mgf1Md;\n      if (typeof options === \"string\") {\n        label = options;\n        seed = arguments[3] || void 0;\n        md = arguments[4] || void 0;\n      } else if (options) {\n        label = options.label || void 0;\n        seed = options.seed || void 0;\n        md = options.md || void 0;\n        if (options.mgf1 && options.mgf1.md) {\n          mgf1Md = options.mgf1.md;\n        }\n      }\n      if (!md) {\n        md = forge.md.sha1.create();\n      } else {\n        md.start();\n      }\n      if (!mgf1Md) {\n        mgf1Md = md;\n      }\n      var keyLength = Math.ceil(key.n.bitLength() / 8);\n      var maxLength = keyLength - 2 * md.digestLength - 2;\n      if (message.length > maxLength) {\n        var error = new Error(\"RSAES-OAEP input message length is too long.\");\n        error.length = message.length;\n        error.maxLength = maxLength;\n        throw error;\n      }\n      if (!label) {\n        label = \"\";\n      }\n      md.update(label, \"raw\");\n      var lHash = md.digest();\n      var PS = \"\";\n      var PS_length = maxLength - message.length;\n      for (var i = 0; i < PS_length; i++) {\n        PS += \"\\0\";\n      }\n      var DB = lHash.getBytes() + PS + \"\u0001\" + message;\n      if (!seed) {\n        seed = forge.random.getBytes(md.digestLength);\n      } else if (seed.length !== md.digestLength) {\n        var error = new Error(\"Invalid RSAES-OAEP seed. The seed length must match the digest length.\");\n        error.seedLength = seed.length;\n        error.digestLength = md.digestLength;\n        throw error;\n      }\n      var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n      var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);\n      var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n      var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);\n      return \"\\0\" + maskedSeed + maskedDB;\n    };\n    pkcs1.decode_rsa_oaep = function(key, em, options) {\n      var label;\n      var md;\n      var mgf1Md;\n      if (typeof options === \"string\") {\n        label = options;\n        md = arguments[3] || void 0;\n      } else if (options) {\n        label = options.label || void 0;\n        md = options.md || void 0;\n        if (options.mgf1 && options.mgf1.md) {\n          mgf1Md = options.mgf1.md;\n        }\n      }\n      var keyLength = Math.ceil(key.n.bitLength() / 8);\n      if (em.length !== keyLength) {\n        var error = new Error(\"RSAES-OAEP encoded message length is invalid.\");\n        error.length = em.length;\n        error.expectedLength = keyLength;\n        throw error;\n      }\n      if (md === void 0) {\n        md = forge.md.sha1.create();\n      } else {\n        md.start();\n      }\n      if (!mgf1Md) {\n        mgf1Md = md;\n      }\n      if (keyLength < 2 * md.digestLength + 2) {\n        throw new Error(\"RSAES-OAEP key is too short for the hash function.\");\n      }\n      if (!label) {\n        label = \"\";\n      }\n      md.update(label, \"raw\");\n      var lHash = md.digest().getBytes();\n      var y = em.charAt(0);\n      var maskedSeed = em.substring(1, md.digestLength + 1);\n      var maskedDB = em.substring(1 + md.digestLength);\n      var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n      var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);\n      var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n      var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);\n      var lHashPrime = db.substring(0, md.digestLength);\n      var error = y !== \"\\0\";\n      for (var i = 0; i < md.digestLength; ++i) {\n        error |= lHash.charAt(i) !== lHashPrime.charAt(i);\n      }\n      var in_ps = 1;\n      var index = md.digestLength;\n      for (var j = md.digestLength; j < db.length; j++) {\n        var code = db.charCodeAt(j);\n        var is_0 = code & 1 ^ 1;\n        var error_mask = in_ps ? 65534 : 0;\n        error |= code & error_mask;\n        in_ps = in_ps & is_0;\n        index += in_ps;\n      }\n      if (error || db.charCodeAt(index) !== 1) {\n        throw new Error(\"Invalid RSAES-OAEP padding.\");\n      }\n      return db.substring(index + 1);\n    };\n    function rsa_mgf1(seed, maskLength, hash2) {\n      if (!hash2) {\n        hash2 = forge.md.sha1.create();\n      }\n      var t = \"\";\n      var count = Math.ceil(maskLength / hash2.digestLength);\n      for (var i = 0; i < count; ++i) {\n        var c = String.fromCharCode(\n          i >> 24 & 255,\n          i >> 16 & 255,\n          i >> 8 & 255,\n          i & 255\n        );\n        hash2.start();\n        hash2.update(seed + c);\n        t += hash2.digest().getBytes();\n      }\n      return t.substring(0, maskLength);\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/prime.js\nvar require_prime = __commonJS({\n  \"../../node_modules/node-forge/lib/prime.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    require_jsbn();\n    require_random();\n    (function() {\n      if (forge.prime) {\n        module2.exports = forge.prime;\n        return;\n      }\n      var prime = module2.exports = forge.prime = forge.prime || {};\n      var BigInteger = forge.jsbn.BigInteger;\n      var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\n      var THIRTY = new BigInteger(null);\n      THIRTY.fromInt(30);\n      var op_or = function(x, y) {\n        return x | y;\n      };\n      prime.generateProbablePrime = function(bits, options, callback) {\n        if (typeof options === \"function\") {\n          callback = options;\n          options = {};\n        }\n        options = options || {};\n        var algorithm = options.algorithm || \"PRIMEINC\";\n        if (typeof algorithm === \"string\") {\n          algorithm = { name: algorithm };\n        }\n        algorithm.options = algorithm.options || {};\n        var prng = options.prng || forge.random;\n        var rng = {\n          // x is an array to fill with bytes\n          nextBytes: function(x) {\n            var b = prng.getBytesSync(x.length);\n            for (var i = 0; i < x.length; ++i) {\n              x[i] = b.charCodeAt(i);\n            }\n          }\n        };\n        if (algorithm.name === \"PRIMEINC\") {\n          return primeincFindPrime(bits, rng, algorithm.options, callback);\n        }\n        throw new Error(\"Invalid prime generation algorithm: \" + algorithm.name);\n      };\n      function primeincFindPrime(bits, rng, options, callback) {\n        if (\"workers\" in options) {\n          return primeincFindPrimeWithWorkers(bits, rng, options, callback);\n        }\n        return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);\n      }\n      function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {\n        var num = generateRandom(bits, rng);\n        var deltaIdx = 0;\n        var mrTests = getMillerRabinTests(num.bitLength());\n        if (\"millerRabinTests\" in options) {\n          mrTests = options.millerRabinTests;\n        }\n        var maxBlockTime = 10;\n        if (\"maxBlockTime\" in options) {\n          maxBlockTime = options.maxBlockTime;\n        }\n        _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);\n      }\n      function _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {\n        var start = +/* @__PURE__ */ new Date();\n        do {\n          if (num.bitLength() > bits) {\n            num = generateRandom(bits, rng);\n          }\n          if (num.isProbablePrime(mrTests)) {\n            return callback(null, num);\n          }\n          num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n        } while (maxBlockTime < 0 || +/* @__PURE__ */ new Date() - start < maxBlockTime);\n        forge.util.setImmediate(function() {\n          _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);\n        });\n      }\n      function primeincFindPrimeWithWorkers(bits, rng, options, callback) {\n        if (typeof Worker === \"undefined\") {\n          return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);\n        }\n        var num = generateRandom(bits, rng);\n        var numWorkers = options.workers;\n        var workLoad = options.workLoad || 100;\n        var range = workLoad * 30 / 8;\n        var workerScript = options.workerScript || \"forge/prime.worker.js\";\n        if (numWorkers === -1) {\n          return forge.util.estimateCores(function(err, cores) {\n            if (err) {\n              cores = 2;\n            }\n            numWorkers = cores - 1;\n            generate();\n          });\n        }\n        generate();\n        function generate() {\n          numWorkers = Math.max(1, numWorkers);\n          var workers = [];\n          for (var i = 0; i < numWorkers; ++i) {\n            workers[i] = new Worker(workerScript);\n          }\n          var running = numWorkers;\n          for (var i = 0; i < numWorkers; ++i) {\n            workers[i].addEventListener(\"message\", workerMessage);\n          }\n          var found = false;\n          function workerMessage(e) {\n            if (found) {\n              return;\n            }\n            --running;\n            var data = e.data;\n            if (data.found) {\n              for (var i2 = 0; i2 < workers.length; ++i2) {\n                workers[i2].terminate();\n              }\n              found = true;\n              return callback(null, new BigInteger(data.prime, 16));\n            }\n            if (num.bitLength() > bits) {\n              num = generateRandom(bits, rng);\n            }\n            var hex = num.toString(16);\n            e.target.postMessage({\n              hex,\n              workLoad\n            });\n            num.dAddOffset(range, 0);\n          }\n        }\n      }\n      function generateRandom(bits, rng) {\n        var num = new BigInteger(bits, rng);\n        var bits1 = bits - 1;\n        if (!num.testBit(bits1)) {\n          num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);\n        }\n        num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);\n        return num;\n      }\n      function getMillerRabinTests(bits) {\n        if (bits <= 100)\n          return 27;\n        if (bits <= 150)\n          return 18;\n        if (bits <= 200)\n          return 15;\n        if (bits <= 250)\n          return 12;\n        if (bits <= 300)\n          return 9;\n        if (bits <= 350)\n          return 8;\n        if (bits <= 400)\n          return 7;\n        if (bits <= 500)\n          return 6;\n        if (bits <= 600)\n          return 5;\n        if (bits <= 800)\n          return 4;\n        if (bits <= 1250)\n          return 3;\n        return 2;\n      }\n    })();\n  }\n});\n\n// ../../node_modules/node-forge/lib/rsa.js\nvar require_rsa = __commonJS({\n  \"../../node_modules/node-forge/lib/rsa.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_asn1();\n    require_jsbn();\n    require_oids();\n    require_pkcs1();\n    require_prime();\n    require_random();\n    require_util();\n    if (typeof BigInteger === \"undefined\") {\n      BigInteger = forge.jsbn.BigInteger;\n    }\n    var BigInteger;\n    var _crypto = forge.util.isNodejs ? __webpack_require__(/*! crypto */ \"crypto\") : null;\n    var asn1 = forge.asn1;\n    var util = forge.util;\n    forge.pki = forge.pki || {};\n    module2.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};\n    var pki2 = forge.pki;\n    var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\n    var privateKeyValidator = {\n      // PrivateKeyInfo\n      name: \"PrivateKeyInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        // Version (INTEGER)\n        name: \"PrivateKeyInfo.version\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyVersion\"\n      }, {\n        // privateKeyAlgorithm\n        name: \"PrivateKeyInfo.privateKeyAlgorithm\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"AlgorithmIdentifier.algorithm\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"privateKeyOid\"\n        }]\n      }, {\n        // PrivateKey\n        name: \"PrivateKeyInfo\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"privateKey\"\n      }]\n    };\n    var rsaPrivateKeyValidator = {\n      // RSAPrivateKey\n      name: \"RSAPrivateKey\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        // Version (INTEGER)\n        name: \"RSAPrivateKey.version\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyVersion\"\n      }, {\n        // modulus (n)\n        name: \"RSAPrivateKey.modulus\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyModulus\"\n      }, {\n        // publicExponent (e)\n        name: \"RSAPrivateKey.publicExponent\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyPublicExponent\"\n      }, {\n        // privateExponent (d)\n        name: \"RSAPrivateKey.privateExponent\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyPrivateExponent\"\n      }, {\n        // prime1 (p)\n        name: \"RSAPrivateKey.prime1\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyPrime1\"\n      }, {\n        // prime2 (q)\n        name: \"RSAPrivateKey.prime2\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyPrime2\"\n      }, {\n        // exponent1 (d mod (p-1))\n        name: \"RSAPrivateKey.exponent1\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyExponent1\"\n      }, {\n        // exponent2 (d mod (q-1))\n        name: \"RSAPrivateKey.exponent2\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyExponent2\"\n      }, {\n        // coefficient ((inverse of q) mod p)\n        name: \"RSAPrivateKey.coefficient\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyCoefficient\"\n      }]\n    };\n    var rsaPublicKeyValidator = {\n      // RSAPublicKey\n      name: \"RSAPublicKey\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        // modulus (n)\n        name: \"RSAPublicKey.modulus\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"publicKeyModulus\"\n      }, {\n        // publicExponent (e)\n        name: \"RSAPublicKey.exponent\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"publicKeyExponent\"\n      }]\n    };\n    var publicKeyValidator = forge.pki.rsa.publicKeyValidator = {\n      name: \"SubjectPublicKeyInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: \"subjectPublicKeyInfo\",\n      value: [{\n        name: \"SubjectPublicKeyInfo.AlgorithmIdentifier\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"AlgorithmIdentifier.algorithm\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"publicKeyOid\"\n        }]\n      }, {\n        // subjectPublicKey\n        name: \"SubjectPublicKeyInfo.subjectPublicKey\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.BITSTRING,\n        constructed: false,\n        value: [{\n          // RSAPublicKey\n          name: \"SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SEQUENCE,\n          constructed: true,\n          optional: true,\n          captureAsn1: \"rsaPublicKey\"\n        }]\n      }]\n    };\n    var digestInfoValidator = {\n      name: \"DigestInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"DigestInfo.DigestAlgorithm\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"DigestInfo.DigestAlgorithm.algorithmIdentifier\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"algorithmIdentifier\"\n        }, {\n          // NULL paramters\n          name: \"DigestInfo.DigestAlgorithm.parameters\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.NULL,\n          // captured only to check existence for md2 and md5\n          capture: \"parameters\",\n          optional: true,\n          constructed: false\n        }]\n      }, {\n        // digest\n        name: \"DigestInfo.digest\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"digest\"\n      }]\n    };\n    var emsaPkcs1v15encode = function(md) {\n      var oid;\n      if (md.algorithm in pki2.oids) {\n        oid = pki2.oids[md.algorithm];\n      } else {\n        var error = new Error(\"Unknown message digest algorithm.\");\n        error.algorithm = md.algorithm;\n        throw error;\n      }\n      var oidBytes = asn1.oidToDer(oid).getBytes();\n      var digestInfo = asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.SEQUENCE,\n        true,\n        []\n      );\n      var digestAlgorithm = asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.SEQUENCE,\n        true,\n        []\n      );\n      digestAlgorithm.value.push(asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.OID,\n        false,\n        oidBytes\n      ));\n      digestAlgorithm.value.push(asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.NULL,\n        false,\n        \"\"\n      ));\n      var digest = asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.OCTETSTRING,\n        false,\n        md.digest().getBytes()\n      );\n      digestInfo.value.push(digestAlgorithm);\n      digestInfo.value.push(digest);\n      return asn1.toDer(digestInfo).getBytes();\n    };\n    var _modPow = function(x, key, pub) {\n      if (pub) {\n        return x.modPow(key.e, key.n);\n      }\n      if (!key.p || !key.q) {\n        return x.modPow(key.d, key.n);\n      }\n      if (!key.dP) {\n        key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));\n      }\n      if (!key.dQ) {\n        key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));\n      }\n      if (!key.qInv) {\n        key.qInv = key.q.modInverse(key.p);\n      }\n      var r;\n      do {\n        r = new BigInteger(\n          forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)),\n          16\n        );\n      } while (r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));\n      x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);\n      var xp = x.mod(key.p).modPow(key.dP, key.p);\n      var xq = x.mod(key.q).modPow(key.dQ, key.q);\n      while (xp.compareTo(xq) < 0) {\n        xp = xp.add(key.p);\n      }\n      var y = xp.subtract(xq).multiply(key.qInv).mod(key.p).multiply(key.q).add(xq);\n      y = y.multiply(r.modInverse(key.n)).mod(key.n);\n      return y;\n    };\n    pki2.rsa.encrypt = function(m, key, bt) {\n      var pub = bt;\n      var eb;\n      var k = Math.ceil(key.n.bitLength() / 8);\n      if (bt !== false && bt !== true) {\n        pub = bt === 2;\n        eb = _encodePkcs1_v1_5(m, key, bt);\n      } else {\n        eb = forge.util.createBuffer();\n        eb.putBytes(m);\n      }\n      var x = new BigInteger(eb.toHex(), 16);\n      var y = _modPow(x, key, pub);\n      var yhex = y.toString(16);\n      var ed = forge.util.createBuffer();\n      var zeros = k - Math.ceil(yhex.length / 2);\n      while (zeros > 0) {\n        ed.putByte(0);\n        --zeros;\n      }\n      ed.putBytes(forge.util.hexToBytes(yhex));\n      return ed.getBytes();\n    };\n    pki2.rsa.decrypt = function(ed, key, pub, ml) {\n      var k = Math.ceil(key.n.bitLength() / 8);\n      if (ed.length !== k) {\n        var error = new Error(\"Encrypted message length is invalid.\");\n        error.length = ed.length;\n        error.expected = k;\n        throw error;\n      }\n      var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);\n      if (y.compareTo(key.n) >= 0) {\n        throw new Error(\"Encrypted message is invalid.\");\n      }\n      var x = _modPow(y, key, pub);\n      var xhex = x.toString(16);\n      var eb = forge.util.createBuffer();\n      var zeros = k - Math.ceil(xhex.length / 2);\n      while (zeros > 0) {\n        eb.putByte(0);\n        --zeros;\n      }\n      eb.putBytes(forge.util.hexToBytes(xhex));\n      if (ml !== false) {\n        return _decodePkcs1_v1_5(eb.getBytes(), key, pub);\n      }\n      return eb.getBytes();\n    };\n    pki2.rsa.createKeyPairGenerationState = function(bits, e, options) {\n      if (typeof bits === \"string\") {\n        bits = parseInt(bits, 10);\n      }\n      bits = bits || 2048;\n      options = options || {};\n      var prng = options.prng || forge.random;\n      var rng = {\n        // x is an array to fill with bytes\n        nextBytes: function(x) {\n          var b = prng.getBytesSync(x.length);\n          for (var i = 0; i < x.length; ++i) {\n            x[i] = b.charCodeAt(i);\n          }\n        }\n      };\n      var algorithm = options.algorithm || \"PRIMEINC\";\n      var rval;\n      if (algorithm === \"PRIMEINC\") {\n        rval = {\n          algorithm,\n          state: 0,\n          bits,\n          rng,\n          eInt: e || 65537,\n          e: new BigInteger(null),\n          p: null,\n          q: null,\n          qBits: bits >> 1,\n          pBits: bits - (bits >> 1),\n          pqState: 0,\n          num: null,\n          keys: null\n        };\n        rval.e.fromInt(rval.eInt);\n      } else {\n        throw new Error(\"Invalid key generation algorithm: \" + algorithm);\n      }\n      return rval;\n    };\n    pki2.rsa.stepKeyPairGenerationState = function(state, n) {\n      if (!(\"algorithm\" in state)) {\n        state.algorithm = \"PRIMEINC\";\n      }\n      var THIRTY = new BigInteger(null);\n      THIRTY.fromInt(30);\n      var deltaIdx = 0;\n      var op_or = function(x, y) {\n        return x | y;\n      };\n      var t1 = +/* @__PURE__ */ new Date();\n      var t2;\n      var total = 0;\n      while (state.keys === null && (n <= 0 || total < n)) {\n        if (state.state === 0) {\n          var bits = state.p === null ? state.pBits : state.qBits;\n          var bits1 = bits - 1;\n          if (state.pqState === 0) {\n            state.num = new BigInteger(bits, state.rng);\n            if (!state.num.testBit(bits1)) {\n              state.num.bitwiseTo(\n                BigInteger.ONE.shiftLeft(bits1),\n                op_or,\n                state.num\n              );\n            }\n            state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);\n            deltaIdx = 0;\n            ++state.pqState;\n          } else if (state.pqState === 1) {\n            if (state.num.bitLength() > bits) {\n              state.pqState = 0;\n            } else if (state.num.isProbablePrime(\n              _getMillerRabinTests(state.num.bitLength())\n            )) {\n              ++state.pqState;\n            } else {\n              state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n            }\n          } else if (state.pqState === 2) {\n            state.pqState = state.num.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) === 0 ? 3 : 0;\n          } else if (state.pqState === 3) {\n            state.pqState = 0;\n            if (state.p === null) {\n              state.p = state.num;\n            } else {\n              state.q = state.num;\n            }\n            if (state.p !== null && state.q !== null) {\n              ++state.state;\n            }\n            state.num = null;\n          }\n        } else if (state.state === 1) {\n          if (state.p.compareTo(state.q) < 0) {\n            state.num = state.p;\n            state.p = state.q;\n            state.q = state.num;\n          }\n          ++state.state;\n        } else if (state.state === 2) {\n          state.p1 = state.p.subtract(BigInteger.ONE);\n          state.q1 = state.q.subtract(BigInteger.ONE);\n          state.phi = state.p1.multiply(state.q1);\n          ++state.state;\n        } else if (state.state === 3) {\n          if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {\n            ++state.state;\n          } else {\n            state.p = null;\n            state.q = null;\n            state.state = 0;\n          }\n        } else if (state.state === 4) {\n          state.n = state.p.multiply(state.q);\n          if (state.n.bitLength() === state.bits) {\n            ++state.state;\n          } else {\n            state.q = null;\n            state.state = 0;\n          }\n        } else if (state.state === 5) {\n          var d = state.e.modInverse(state.phi);\n          state.keys = {\n            privateKey: pki2.rsa.setPrivateKey(\n              state.n,\n              state.e,\n              d,\n              state.p,\n              state.q,\n              d.mod(state.p1),\n              d.mod(state.q1),\n              state.q.modInverse(state.p)\n            ),\n            publicKey: pki2.rsa.setPublicKey(state.n, state.e)\n          };\n        }\n        t2 = +/* @__PURE__ */ new Date();\n        total += t2 - t1;\n        t1 = t2;\n      }\n      return state.keys !== null;\n    };\n    pki2.rsa.generateKeyPair = function(bits, e, options, callback) {\n      if (arguments.length === 1) {\n        if (typeof bits === \"object\") {\n          options = bits;\n          bits = void 0;\n        } else if (typeof bits === \"function\") {\n          callback = bits;\n          bits = void 0;\n        }\n      } else if (arguments.length === 2) {\n        if (typeof bits === \"number\") {\n          if (typeof e === \"function\") {\n            callback = e;\n            e = void 0;\n          } else if (typeof e !== \"number\") {\n            options = e;\n            e = void 0;\n          }\n        } else {\n          options = bits;\n          callback = e;\n          bits = void 0;\n          e = void 0;\n        }\n      } else if (arguments.length === 3) {\n        if (typeof e === \"number\") {\n          if (typeof options === \"function\") {\n            callback = options;\n            options = void 0;\n          }\n        } else {\n          callback = options;\n          options = e;\n          e = void 0;\n        }\n      }\n      options = options || {};\n      if (bits === void 0) {\n        bits = options.bits || 2048;\n      }\n      if (e === void 0) {\n        e = options.e || 65537;\n      }\n      if (!forge.options.usePureJavaScript && !options.prng && bits >= 256 && bits <= 16384 && (e === 65537 || e === 3)) {\n        if (callback) {\n          if (_detectNodeCrypto(\"generateKeyPair\")) {\n            return _crypto.generateKeyPair(\"rsa\", {\n              modulusLength: bits,\n              publicExponent: e,\n              publicKeyEncoding: {\n                type: \"spki\",\n                format: \"pem\"\n              },\n              privateKeyEncoding: {\n                type: \"pkcs8\",\n                format: \"pem\"\n              }\n            }, function(err, pub, priv) {\n              if (err) {\n                return callback(err);\n              }\n              callback(null, {\n                privateKey: pki2.privateKeyFromPem(priv),\n                publicKey: pki2.publicKeyFromPem(pub)\n              });\n            });\n          }\n          if (_detectSubtleCrypto(\"generateKey\") && _detectSubtleCrypto(\"exportKey\")) {\n            return util.globalScope.crypto.subtle.generateKey({\n              name: \"RSASSA-PKCS1-v1_5\",\n              modulusLength: bits,\n              publicExponent: _intToUint8Array(e),\n              hash: { name: \"SHA-256\" }\n            }, true, [\"sign\", \"verify\"]).then(function(pair) {\n              return util.globalScope.crypto.subtle.exportKey(\n                \"pkcs8\",\n                pair.privateKey\n              );\n            }).then(void 0, function(err) {\n              callback(err);\n            }).then(function(pkcs8) {\n              if (pkcs8) {\n                var privateKey = pki2.privateKeyFromAsn1(\n                  asn1.fromDer(forge.util.createBuffer(pkcs8))\n                );\n                callback(null, {\n                  privateKey,\n                  publicKey: pki2.setRsaPublicKey(privateKey.n, privateKey.e)\n                });\n              }\n            });\n          }\n          if (_detectSubtleMsCrypto(\"generateKey\") && _detectSubtleMsCrypto(\"exportKey\")) {\n            var genOp = util.globalScope.msCrypto.subtle.generateKey({\n              name: \"RSASSA-PKCS1-v1_5\",\n              modulusLength: bits,\n              publicExponent: _intToUint8Array(e),\n              hash: { name: \"SHA-256\" }\n            }, true, [\"sign\", \"verify\"]);\n            genOp.oncomplete = function(e2) {\n              var pair = e2.target.result;\n              var exportOp = util.globalScope.msCrypto.subtle.exportKey(\n                \"pkcs8\",\n                pair.privateKey\n              );\n              exportOp.oncomplete = function(e3) {\n                var pkcs8 = e3.target.result;\n                var privateKey = pki2.privateKeyFromAsn1(\n                  asn1.fromDer(forge.util.createBuffer(pkcs8))\n                );\n                callback(null, {\n                  privateKey,\n                  publicKey: pki2.setRsaPublicKey(privateKey.n, privateKey.e)\n                });\n              };\n              exportOp.onerror = function(err) {\n                callback(err);\n              };\n            };\n            genOp.onerror = function(err) {\n              callback(err);\n            };\n            return;\n          }\n        } else {\n          if (_detectNodeCrypto(\"generateKeyPairSync\")) {\n            var keypair = _crypto.generateKeyPairSync(\"rsa\", {\n              modulusLength: bits,\n              publicExponent: e,\n              publicKeyEncoding: {\n                type: \"spki\",\n                format: \"pem\"\n              },\n              privateKeyEncoding: {\n                type: \"pkcs8\",\n                format: \"pem\"\n              }\n            });\n            return {\n              privateKey: pki2.privateKeyFromPem(keypair.privateKey),\n              publicKey: pki2.publicKeyFromPem(keypair.publicKey)\n            };\n          }\n        }\n      }\n      var state = pki2.rsa.createKeyPairGenerationState(bits, e, options);\n      if (!callback) {\n        pki2.rsa.stepKeyPairGenerationState(state, 0);\n        return state.keys;\n      }\n      _generateKeyPair(state, options, callback);\n    };\n    pki2.setRsaPublicKey = pki2.rsa.setPublicKey = function(n, e) {\n      var key = {\n        n,\n        e\n      };\n      key.encrypt = function(data, scheme, schemeOptions) {\n        if (typeof scheme === \"string\") {\n          scheme = scheme.toUpperCase();\n        } else if (scheme === void 0) {\n          scheme = \"RSAES-PKCS1-V1_5\";\n        }\n        if (scheme === \"RSAES-PKCS1-V1_5\") {\n          scheme = {\n            encode: function(m, key2, pub) {\n              return _encodePkcs1_v1_5(m, key2, 2).getBytes();\n            }\n          };\n        } else if (scheme === \"RSA-OAEP\" || scheme === \"RSAES-OAEP\") {\n          scheme = {\n            encode: function(m, key2) {\n              return forge.pkcs1.encode_rsa_oaep(key2, m, schemeOptions);\n            }\n          };\n        } else if ([\"RAW\", \"NONE\", \"NULL\", null].indexOf(scheme) !== -1) {\n          scheme = { encode: function(e3) {\n            return e3;\n          } };\n        } else if (typeof scheme === \"string\") {\n          throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n        }\n        var e2 = scheme.encode(data, key, true);\n        return pki2.rsa.encrypt(e2, key, true);\n      };\n      key.verify = function(digest, signature, scheme, options) {\n        if (typeof scheme === \"string\") {\n          scheme = scheme.toUpperCase();\n        } else if (scheme === void 0) {\n          scheme = \"RSASSA-PKCS1-V1_5\";\n        }\n        if (options === void 0) {\n          options = {\n            _parseAllDigestBytes: true\n          };\n        }\n        if (!(\"_parseAllDigestBytes\" in options)) {\n          options._parseAllDigestBytes = true;\n        }\n        if (scheme === \"RSASSA-PKCS1-V1_5\") {\n          scheme = {\n            verify: function(digest2, d2) {\n              d2 = _decodePkcs1_v1_5(d2, key, true);\n              var obj = asn1.fromDer(d2, {\n                parseAllBytes: options._parseAllDigestBytes\n              });\n              var capture = {};\n              var errors = [];\n              if (!asn1.validate(obj, digestInfoValidator, capture, errors)) {\n                var error = new Error(\n                  \"ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value.\"\n                );\n                error.errors = errors;\n                throw error;\n              }\n              var oid = asn1.derToOid(capture.algorithmIdentifier);\n              if (!(oid === forge.oids.md2 || oid === forge.oids.md5 || oid === forge.oids.sha1 || oid === forge.oids.sha224 || oid === forge.oids.sha256 || oid === forge.oids.sha384 || oid === forge.oids.sha512 || oid === forge.oids[\"sha512-224\"] || oid === forge.oids[\"sha512-256\"])) {\n                var error = new Error(\n                  \"Unknown RSASSA-PKCS1-v1_5 DigestAlgorithm identifier.\"\n                );\n                error.oid = oid;\n                throw error;\n              }\n              if (oid === forge.oids.md2 || oid === forge.oids.md5) {\n                if (!(\"parameters\" in capture)) {\n                  throw new Error(\n                    \"ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 DigestInfo value. Missing algorithm identifer NULL parameters.\"\n                  );\n                }\n              }\n              return digest2 === capture.digest;\n            }\n          };\n        } else if (scheme === \"NONE\" || scheme === \"NULL\" || scheme === null) {\n          scheme = {\n            verify: function(digest2, d2) {\n              d2 = _decodePkcs1_v1_5(d2, key, true);\n              return digest2 === d2;\n            }\n          };\n        }\n        var d = pki2.rsa.decrypt(signature, key, true, false);\n        return scheme.verify(digest, d, key.n.bitLength());\n      };\n      return key;\n    };\n    pki2.setRsaPrivateKey = pki2.rsa.setPrivateKey = function(n, e, d, p, q, dP, dQ, qInv) {\n      var key = {\n        n,\n        e,\n        d,\n        p,\n        q,\n        dP,\n        dQ,\n        qInv\n      };\n      key.decrypt = function(data, scheme, schemeOptions) {\n        if (typeof scheme === \"string\") {\n          scheme = scheme.toUpperCase();\n        } else if (scheme === void 0) {\n          scheme = \"RSAES-PKCS1-V1_5\";\n        }\n        var d2 = pki2.rsa.decrypt(data, key, false, false);\n        if (scheme === \"RSAES-PKCS1-V1_5\") {\n          scheme = { decode: _decodePkcs1_v1_5 };\n        } else if (scheme === \"RSA-OAEP\" || scheme === \"RSAES-OAEP\") {\n          scheme = {\n            decode: function(d3, key2) {\n              return forge.pkcs1.decode_rsa_oaep(key2, d3, schemeOptions);\n            }\n          };\n        } else if ([\"RAW\", \"NONE\", \"NULL\", null].indexOf(scheme) !== -1) {\n          scheme = { decode: function(d3) {\n            return d3;\n          } };\n        } else {\n          throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n        }\n        return scheme.decode(d2, key, false);\n      };\n      key.sign = function(md, scheme) {\n        var bt = false;\n        if (typeof scheme === \"string\") {\n          scheme = scheme.toUpperCase();\n        }\n        if (scheme === void 0 || scheme === \"RSASSA-PKCS1-V1_5\") {\n          scheme = { encode: emsaPkcs1v15encode };\n          bt = 1;\n        } else if (scheme === \"NONE\" || scheme === \"NULL\" || scheme === null) {\n          scheme = { encode: function() {\n            return md;\n          } };\n          bt = 1;\n        }\n        var d2 = scheme.encode(md, key.n.bitLength());\n        return pki2.rsa.encrypt(d2, key, bt);\n      };\n      return key;\n    };\n    pki2.wrapRsaPrivateKey = function(rsaKey) {\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // version (0)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          asn1.integerToDer(0).getBytes()\n        ),\n        // privateKeyAlgorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(pki2.oids.rsaEncryption).getBytes()\n          ),\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n        ]),\n        // PrivateKey\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OCTETSTRING,\n          false,\n          asn1.toDer(rsaKey).getBytes()\n        )\n      ]);\n    };\n    pki2.privateKeyFromAsn1 = function(obj) {\n      var capture = {};\n      var errors = [];\n      if (asn1.validate(obj, privateKeyValidator, capture, errors)) {\n        obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));\n      }\n      capture = {};\n      errors = [];\n      if (!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {\n        var error = new Error(\"Cannot read private key. ASN.1 object does not contain an RSAPrivateKey.\");\n        error.errors = errors;\n        throw error;\n      }\n      var n, e, d, p, q, dP, dQ, qInv;\n      n = forge.util.createBuffer(capture.privateKeyModulus).toHex();\n      e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();\n      d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();\n      p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();\n      q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();\n      dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();\n      dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();\n      qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();\n      return pki2.setRsaPrivateKey(\n        new BigInteger(n, 16),\n        new BigInteger(e, 16),\n        new BigInteger(d, 16),\n        new BigInteger(p, 16),\n        new BigInteger(q, 16),\n        new BigInteger(dP, 16),\n        new BigInteger(dQ, 16),\n        new BigInteger(qInv, 16)\n      );\n    };\n    pki2.privateKeyToAsn1 = pki2.privateKeyToRSAPrivateKey = function(key) {\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // version (0 = only 2 primes, 1 multiple primes)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          asn1.integerToDer(0).getBytes()\n        ),\n        // modulus (n)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.n)\n        ),\n        // publicExponent (e)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.e)\n        ),\n        // privateExponent (d)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.d)\n        ),\n        // privateKeyPrime1 (p)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.p)\n        ),\n        // privateKeyPrime2 (q)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.q)\n        ),\n        // privateKeyExponent1 (dP)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.dP)\n        ),\n        // privateKeyExponent2 (dQ)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.dQ)\n        ),\n        // coefficient (qInv)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.qInv)\n        )\n      ]);\n    };\n    pki2.publicKeyFromAsn1 = function(obj) {\n      var capture = {};\n      var errors = [];\n      if (asn1.validate(obj, publicKeyValidator, capture, errors)) {\n        var oid = asn1.derToOid(capture.publicKeyOid);\n        if (oid !== pki2.oids.rsaEncryption) {\n          var error = new Error(\"Cannot read public key. Unknown OID.\");\n          error.oid = oid;\n          throw error;\n        }\n        obj = capture.rsaPublicKey;\n      }\n      errors = [];\n      if (!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {\n        var error = new Error(\"Cannot read public key. ASN.1 object does not contain an RSAPublicKey.\");\n        error.errors = errors;\n        throw error;\n      }\n      var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();\n      var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();\n      return pki2.setRsaPublicKey(\n        new BigInteger(n, 16),\n        new BigInteger(e, 16)\n      );\n    };\n    pki2.publicKeyToAsn1 = pki2.publicKeyToSubjectPublicKeyInfo = function(key) {\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // AlgorithmIdentifier\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // algorithm\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(pki2.oids.rsaEncryption).getBytes()\n          ),\n          // parameters (null)\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n        ]),\n        // subjectPublicKey\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [\n          pki2.publicKeyToRSAPublicKey(key)\n        ])\n      ]);\n    };\n    pki2.publicKeyToRSAPublicKey = function(key) {\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // modulus (n)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.n)\n        ),\n        // publicExponent (e)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          _bnToBytes(key.e)\n        )\n      ]);\n    };\n    function _encodePkcs1_v1_5(m, key, bt) {\n      var eb = forge.util.createBuffer();\n      var k = Math.ceil(key.n.bitLength() / 8);\n      if (m.length > k - 11) {\n        var error = new Error(\"Message is too long for PKCS#1 v1.5 padding.\");\n        error.length = m.length;\n        error.max = k - 11;\n        throw error;\n      }\n      eb.putByte(0);\n      eb.putByte(bt);\n      var padNum = k - 3 - m.length;\n      var padByte;\n      if (bt === 0 || bt === 1) {\n        padByte = bt === 0 ? 0 : 255;\n        for (var i = 0; i < padNum; ++i) {\n          eb.putByte(padByte);\n        }\n      } else {\n        while (padNum > 0) {\n          var numZeros = 0;\n          var padBytes = forge.random.getBytes(padNum);\n          for (var i = 0; i < padNum; ++i) {\n            padByte = padBytes.charCodeAt(i);\n            if (padByte === 0) {\n              ++numZeros;\n            } else {\n              eb.putByte(padByte);\n            }\n          }\n          padNum = numZeros;\n        }\n      }\n      eb.putByte(0);\n      eb.putBytes(m);\n      return eb;\n    }\n    function _decodePkcs1_v1_5(em, key, pub, ml) {\n      var k = Math.ceil(key.n.bitLength() / 8);\n      var eb = forge.util.createBuffer(em);\n      var first = eb.getByte();\n      var bt = eb.getByte();\n      if (first !== 0 || pub && bt !== 0 && bt !== 1 || !pub && bt != 2 || pub && bt === 0 && typeof ml === \"undefined\") {\n        throw new Error(\"Encryption block is invalid.\");\n      }\n      var padNum = 0;\n      if (bt === 0) {\n        padNum = k - 3 - ml;\n        for (var i = 0; i < padNum; ++i) {\n          if (eb.getByte() !== 0) {\n            throw new Error(\"Encryption block is invalid.\");\n          }\n        }\n      } else if (bt === 1) {\n        padNum = 0;\n        while (eb.length() > 1) {\n          if (eb.getByte() !== 255) {\n            --eb.read;\n            break;\n          }\n          ++padNum;\n        }\n      } else if (bt === 2) {\n        padNum = 0;\n        while (eb.length() > 1) {\n          if (eb.getByte() === 0) {\n            --eb.read;\n            break;\n          }\n          ++padNum;\n        }\n      }\n      var zero = eb.getByte();\n      if (zero !== 0 || padNum !== k - 3 - eb.length()) {\n        throw new Error(\"Encryption block is invalid.\");\n      }\n      return eb.getBytes();\n    }\n    function _generateKeyPair(state, options, callback) {\n      if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n      }\n      options = options || {};\n      var opts = {\n        algorithm: {\n          name: options.algorithm || \"PRIMEINC\",\n          options: {\n            workers: options.workers || 2,\n            workLoad: options.workLoad || 100,\n            workerScript: options.workerScript\n          }\n        }\n      };\n      if (\"prng\" in options) {\n        opts.prng = options.prng;\n      }\n      generate();\n      function generate() {\n        getPrime(state.pBits, function(err, num) {\n          if (err) {\n            return callback(err);\n          }\n          state.p = num;\n          if (state.q !== null) {\n            return finish(err, state.q);\n          }\n          getPrime(state.qBits, finish);\n        });\n      }\n      function getPrime(bits, callback2) {\n        forge.prime.generateProbablePrime(bits, opts, callback2);\n      }\n      function finish(err, num) {\n        if (err) {\n          return callback(err);\n        }\n        state.q = num;\n        if (state.p.compareTo(state.q) < 0) {\n          var tmp = state.p;\n          state.p = state.q;\n          state.q = tmp;\n        }\n        if (state.p.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n          state.p = null;\n          generate();\n          return;\n        }\n        if (state.q.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n          state.q = null;\n          getPrime(state.qBits, finish);\n          return;\n        }\n        state.p1 = state.p.subtract(BigInteger.ONE);\n        state.q1 = state.q.subtract(BigInteger.ONE);\n        state.phi = state.p1.multiply(state.q1);\n        if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n          state.p = state.q = null;\n          generate();\n          return;\n        }\n        state.n = state.p.multiply(state.q);\n        if (state.n.bitLength() !== state.bits) {\n          state.q = null;\n          getPrime(state.qBits, finish);\n          return;\n        }\n        var d = state.e.modInverse(state.phi);\n        state.keys = {\n          privateKey: pki2.rsa.setPrivateKey(\n            state.n,\n            state.e,\n            d,\n            state.p,\n            state.q,\n            d.mod(state.p1),\n            d.mod(state.q1),\n            state.q.modInverse(state.p)\n          ),\n          publicKey: pki2.rsa.setPublicKey(state.n, state.e)\n        };\n        callback(null, state.keys);\n      }\n    }\n    function _bnToBytes(b) {\n      var hex = b.toString(16);\n      if (hex[0] >= \"8\") {\n        hex = \"00\" + hex;\n      }\n      var bytes = forge.util.hexToBytes(hex);\n      if (bytes.length > 1 && // leading 0x00 for positive integer\n      (bytes.charCodeAt(0) === 0 && (bytes.charCodeAt(1) & 128) === 0 || // leading 0xFF for negative integer\n      bytes.charCodeAt(0) === 255 && (bytes.charCodeAt(1) & 128) === 128)) {\n        return bytes.substr(1);\n      }\n      return bytes;\n    }\n    function _getMillerRabinTests(bits) {\n      if (bits <= 100)\n        return 27;\n      if (bits <= 150)\n        return 18;\n      if (bits <= 200)\n        return 15;\n      if (bits <= 250)\n        return 12;\n      if (bits <= 300)\n        return 9;\n      if (bits <= 350)\n        return 8;\n      if (bits <= 400)\n        return 7;\n      if (bits <= 500)\n        return 6;\n      if (bits <= 600)\n        return 5;\n      if (bits <= 800)\n        return 4;\n      if (bits <= 1250)\n        return 3;\n      return 2;\n    }\n    function _detectNodeCrypto(fn) {\n      return forge.util.isNodejs && typeof _crypto[fn] === \"function\";\n    }\n    function _detectSubtleCrypto(fn) {\n      return typeof util.globalScope !== \"undefined\" && typeof util.globalScope.crypto === \"object\" && typeof util.globalScope.crypto.subtle === \"object\" && typeof util.globalScope.crypto.subtle[fn] === \"function\";\n    }\n    function _detectSubtleMsCrypto(fn) {\n      return typeof util.globalScope !== \"undefined\" && typeof util.globalScope.msCrypto === \"object\" && typeof util.globalScope.msCrypto.subtle === \"object\" && typeof util.globalScope.msCrypto.subtle[fn] === \"function\";\n    }\n    function _intToUint8Array(x) {\n      var bytes = forge.util.hexToBytes(x.toString(16));\n      var buffer = new Uint8Array(bytes.length);\n      for (var i = 0; i < bytes.length; ++i) {\n        buffer[i] = bytes.charCodeAt(i);\n      }\n      return buffer;\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/pbe.js\nvar require_pbe = __commonJS({\n  \"../../node_modules/node-forge/lib/pbe.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_aes();\n    require_asn1();\n    require_des();\n    require_md();\n    require_oids();\n    require_pbkdf2();\n    require_pem();\n    require_random();\n    require_rc2();\n    require_rsa();\n    require_util();\n    if (typeof BigInteger === \"undefined\") {\n      BigInteger = forge.jsbn.BigInteger;\n    }\n    var BigInteger;\n    var asn1 = forge.asn1;\n    var pki2 = forge.pki = forge.pki || {};\n    module2.exports = pki2.pbe = forge.pbe = forge.pbe || {};\n    var oids = pki2.oids;\n    var encryptedPrivateKeyValidator = {\n      name: \"EncryptedPrivateKeyInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"EncryptedPrivateKeyInfo.encryptionAlgorithm\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"AlgorithmIdentifier.algorithm\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"encryptionOid\"\n        }, {\n          name: \"AlgorithmIdentifier.parameters\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SEQUENCE,\n          constructed: true,\n          captureAsn1: \"encryptionParams\"\n        }]\n      }, {\n        // encryptedData\n        name: \"EncryptedPrivateKeyInfo.encryptedData\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"encryptedData\"\n      }]\n    };\n    var PBES2AlgorithmsValidator = {\n      name: \"PBES2Algorithms\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"PBES2Algorithms.keyDerivationFunc\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"PBES2Algorithms.keyDerivationFunc.oid\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"kdfOid\"\n        }, {\n          name: \"PBES2Algorithms.params\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SEQUENCE,\n          constructed: true,\n          value: [{\n            name: \"PBES2Algorithms.params.salt\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OCTETSTRING,\n            constructed: false,\n            capture: \"kdfSalt\"\n          }, {\n            name: \"PBES2Algorithms.params.iterationCount\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"kdfIterationCount\"\n          }, {\n            name: \"PBES2Algorithms.params.keyLength\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            optional: true,\n            capture: \"keyLength\"\n          }, {\n            // prf\n            name: \"PBES2Algorithms.params.prf\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            optional: true,\n            value: [{\n              name: \"PBES2Algorithms.params.prf.algorithm\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.OID,\n              constructed: false,\n              capture: \"prfOid\"\n            }]\n          }]\n        }]\n      }, {\n        name: \"PBES2Algorithms.encryptionScheme\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"PBES2Algorithms.encryptionScheme.oid\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"encOid\"\n        }, {\n          name: \"PBES2Algorithms.encryptionScheme.iv\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OCTETSTRING,\n          constructed: false,\n          capture: \"encIv\"\n        }]\n      }]\n    };\n    var pkcs12PbeParamsValidator = {\n      name: \"pkcs-12PbeParams\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"pkcs-12PbeParams.salt\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"salt\"\n      }, {\n        name: \"pkcs-12PbeParams.iterations\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"iterations\"\n      }]\n    };\n    pki2.encryptPrivateKeyInfo = function(obj, password, options) {\n      options = options || {};\n      options.saltSize = options.saltSize || 8;\n      options.count = options.count || 2048;\n      options.algorithm = options.algorithm || \"aes128\";\n      options.prfAlgorithm = options.prfAlgorithm || \"sha1\";\n      var salt = forge.random.getBytesSync(options.saltSize);\n      var count = options.count;\n      var countBytes = asn1.integerToDer(count);\n      var dkLen;\n      var encryptionAlgorithm;\n      var encryptedData;\n      if (options.algorithm.indexOf(\"aes\") === 0 || options.algorithm === \"des\") {\n        var ivLen, encOid, cipherFn;\n        switch (options.algorithm) {\n          case \"aes128\":\n            dkLen = 16;\n            ivLen = 16;\n            encOid = oids[\"aes128-CBC\"];\n            cipherFn = forge.aes.createEncryptionCipher;\n            break;\n          case \"aes192\":\n            dkLen = 24;\n            ivLen = 16;\n            encOid = oids[\"aes192-CBC\"];\n            cipherFn = forge.aes.createEncryptionCipher;\n            break;\n          case \"aes256\":\n            dkLen = 32;\n            ivLen = 16;\n            encOid = oids[\"aes256-CBC\"];\n            cipherFn = forge.aes.createEncryptionCipher;\n            break;\n          case \"des\":\n            dkLen = 8;\n            ivLen = 8;\n            encOid = oids[\"desCBC\"];\n            cipherFn = forge.des.createEncryptionCipher;\n            break;\n          default:\n            var error = new Error(\"Cannot encrypt private key. Unknown encryption algorithm.\");\n            error.algorithm = options.algorithm;\n            throw error;\n        }\n        var prfAlgorithm = \"hmacWith\" + options.prfAlgorithm.toUpperCase();\n        var md = prfAlgorithmToMessageDigest(prfAlgorithm);\n        var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n        var iv = forge.random.getBytesSync(ivLen);\n        var cipher = cipherFn(dk);\n        cipher.start(iv);\n        cipher.update(asn1.toDer(obj));\n        cipher.finish();\n        encryptedData = cipher.output.getBytes();\n        var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\n        encryptionAlgorithm = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.SEQUENCE,\n          true,\n          [\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(oids[\"pkcs5PBES2\"]).getBytes()\n            ),\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n              // keyDerivationFunc\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.OID,\n                  false,\n                  asn1.oidToDer(oids[\"pkcs5PBKDF2\"]).getBytes()\n                ),\n                // PBKDF2-params\n                params\n              ]),\n              // encryptionScheme\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.OID,\n                  false,\n                  asn1.oidToDer(encOid).getBytes()\n                ),\n                // iv\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.OCTETSTRING,\n                  false,\n                  iv\n                )\n              ])\n            ])\n          ]\n        );\n      } else if (options.algorithm === \"3des\") {\n        dkLen = 24;\n        var saltBytes = new forge.util.ByteBuffer(salt);\n        var dk = pki2.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\n        var iv = pki2.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\n        var cipher = forge.des.createEncryptionCipher(dk);\n        cipher.start(iv);\n        cipher.update(asn1.toDer(obj));\n        cipher.finish();\n        encryptedData = cipher.output.getBytes();\n        encryptionAlgorithm = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.SEQUENCE,\n          true,\n          [\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(oids[\"pbeWithSHAAnd3-KeyTripleDES-CBC\"]).getBytes()\n            ),\n            // pkcs-12PbeParams\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n              // salt\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n              // iteration count\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.INTEGER,\n                false,\n                countBytes.getBytes()\n              )\n            ])\n          ]\n        );\n      } else {\n        var error = new Error(\"Cannot encrypt private key. Unknown encryption algorithm.\");\n        error.algorithm = options.algorithm;\n        throw error;\n      }\n      var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // encryptionAlgorithm\n        encryptionAlgorithm,\n        // encryptedData\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OCTETSTRING,\n          false,\n          encryptedData\n        )\n      ]);\n      return rval;\n    };\n    pki2.decryptPrivateKeyInfo = function(obj, password) {\n      var rval = null;\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\n        var error = new Error(\"Cannot read encrypted private key. ASN.1 object is not a supported EncryptedPrivateKeyInfo.\");\n        error.errors = errors;\n        throw error;\n      }\n      var oid = asn1.derToOid(capture.encryptionOid);\n      var cipher = pki2.pbe.getCipher(oid, capture.encryptionParams, password);\n      var encrypted = forge.util.createBuffer(capture.encryptedData);\n      cipher.update(encrypted);\n      if (cipher.finish()) {\n        rval = asn1.fromDer(cipher.output);\n      }\n      return rval;\n    };\n    pki2.encryptedPrivateKeyToPem = function(epki, maxline) {\n      var msg = {\n        type: \"ENCRYPTED PRIVATE KEY\",\n        body: asn1.toDer(epki).getBytes()\n      };\n      return forge.pem.encode(msg, { maxline });\n    };\n    pki2.encryptedPrivateKeyFromPem = function(pem) {\n      var msg = forge.pem.decode(pem)[0];\n      if (msg.type !== \"ENCRYPTED PRIVATE KEY\") {\n        var error = new Error('Could not convert encrypted private key from PEM; PEM header type is \"ENCRYPTED PRIVATE KEY\".');\n        error.headerType = msg.type;\n        throw error;\n      }\n      if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        throw new Error(\"Could not convert encrypted private key from PEM; PEM is encrypted.\");\n      }\n      return asn1.fromDer(msg.body);\n    };\n    pki2.encryptRsaPrivateKey = function(rsaKey, password, options) {\n      options = options || {};\n      if (!options.legacy) {\n        var rval = pki2.wrapRsaPrivateKey(pki2.privateKeyToAsn1(rsaKey));\n        rval = pki2.encryptPrivateKeyInfo(rval, password, options);\n        return pki2.encryptedPrivateKeyToPem(rval);\n      }\n      var algorithm;\n      var iv;\n      var dkLen;\n      var cipherFn;\n      switch (options.algorithm) {\n        case \"aes128\":\n          algorithm = \"AES-128-CBC\";\n          dkLen = 16;\n          iv = forge.random.getBytesSync(16);\n          cipherFn = forge.aes.createEncryptionCipher;\n          break;\n        case \"aes192\":\n          algorithm = \"AES-192-CBC\";\n          dkLen = 24;\n          iv = forge.random.getBytesSync(16);\n          cipherFn = forge.aes.createEncryptionCipher;\n          break;\n        case \"aes256\":\n          algorithm = \"AES-256-CBC\";\n          dkLen = 32;\n          iv = forge.random.getBytesSync(16);\n          cipherFn = forge.aes.createEncryptionCipher;\n          break;\n        case \"3des\":\n          algorithm = \"DES-EDE3-CBC\";\n          dkLen = 24;\n          iv = forge.random.getBytesSync(8);\n          cipherFn = forge.des.createEncryptionCipher;\n          break;\n        case \"des\":\n          algorithm = \"DES-CBC\";\n          dkLen = 8;\n          iv = forge.random.getBytesSync(8);\n          cipherFn = forge.des.createEncryptionCipher;\n          break;\n        default:\n          var error = new Error('Could not encrypt RSA private key; unsupported encryption algorithm \"' + options.algorithm + '\".');\n          error.algorithm = options.algorithm;\n          throw error;\n      }\n      var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n      var cipher = cipherFn(dk);\n      cipher.start(iv);\n      cipher.update(asn1.toDer(pki2.privateKeyToAsn1(rsaKey)));\n      cipher.finish();\n      var msg = {\n        type: \"RSA PRIVATE KEY\",\n        procType: {\n          version: \"4\",\n          type: \"ENCRYPTED\"\n        },\n        dekInfo: {\n          algorithm,\n          parameters: forge.util.bytesToHex(iv).toUpperCase()\n        },\n        body: cipher.output.getBytes()\n      };\n      return forge.pem.encode(msg);\n    };\n    pki2.decryptRsaPrivateKey = function(pem, password) {\n      var rval = null;\n      var msg = forge.pem.decode(pem)[0];\n      if (msg.type !== \"ENCRYPTED PRIVATE KEY\" && msg.type !== \"PRIVATE KEY\" && msg.type !== \"RSA PRIVATE KEY\") {\n        var error = new Error('Could not convert private key from PEM; PEM header type is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\n        error.headerType = error;\n        throw error;\n      }\n      if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        var dkLen;\n        var cipherFn;\n        switch (msg.dekInfo.algorithm) {\n          case \"DES-CBC\":\n            dkLen = 8;\n            cipherFn = forge.des.createDecryptionCipher;\n            break;\n          case \"DES-EDE3-CBC\":\n            dkLen = 24;\n            cipherFn = forge.des.createDecryptionCipher;\n            break;\n          case \"AES-128-CBC\":\n            dkLen = 16;\n            cipherFn = forge.aes.createDecryptionCipher;\n            break;\n          case \"AES-192-CBC\":\n            dkLen = 24;\n            cipherFn = forge.aes.createDecryptionCipher;\n            break;\n          case \"AES-256-CBC\":\n            dkLen = 32;\n            cipherFn = forge.aes.createDecryptionCipher;\n            break;\n          case \"RC2-40-CBC\":\n            dkLen = 5;\n            cipherFn = function(key) {\n              return forge.rc2.createDecryptionCipher(key, 40);\n            };\n            break;\n          case \"RC2-64-CBC\":\n            dkLen = 8;\n            cipherFn = function(key) {\n              return forge.rc2.createDecryptionCipher(key, 64);\n            };\n            break;\n          case \"RC2-128-CBC\":\n            dkLen = 16;\n            cipherFn = function(key) {\n              return forge.rc2.createDecryptionCipher(key, 128);\n            };\n            break;\n          default:\n            var error = new Error('Could not decrypt private key; unsupported encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\n            error.algorithm = msg.dekInfo.algorithm;\n            throw error;\n        }\n        var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\n        var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n        var cipher = cipherFn(dk);\n        cipher.start(iv);\n        cipher.update(forge.util.createBuffer(msg.body));\n        if (cipher.finish()) {\n          rval = cipher.output.getBytes();\n        } else {\n          return rval;\n        }\n      } else {\n        rval = msg.body;\n      }\n      if (msg.type === \"ENCRYPTED PRIVATE KEY\") {\n        rval = pki2.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\n      } else {\n        rval = asn1.fromDer(rval);\n      }\n      if (rval !== null) {\n        rval = pki2.privateKeyFromAsn1(rval);\n      }\n      return rval;\n    };\n    pki2.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {\n      var j, l;\n      if (typeof md === \"undefined\" || md === null) {\n        if (!(\"sha1\" in forge.md)) {\n          throw new Error('\"sha1\" hash algorithm unavailable.');\n        }\n        md = forge.md.sha1.create();\n      }\n      var u = md.digestLength;\n      var v = md.blockLength;\n      var result = new forge.util.ByteBuffer();\n      var passBuf = new forge.util.ByteBuffer();\n      if (password !== null && password !== void 0) {\n        for (l = 0; l < password.length; l++) {\n          passBuf.putInt16(password.charCodeAt(l));\n        }\n        passBuf.putInt16(0);\n      }\n      var p = passBuf.length();\n      var s = salt.length();\n      var D = new forge.util.ByteBuffer();\n      D.fillWithByte(id, v);\n      var Slen = v * Math.ceil(s / v);\n      var S = new forge.util.ByteBuffer();\n      for (l = 0; l < Slen; l++) {\n        S.putByte(salt.at(l % s));\n      }\n      var Plen = v * Math.ceil(p / v);\n      var P = new forge.util.ByteBuffer();\n      for (l = 0; l < Plen; l++) {\n        P.putByte(passBuf.at(l % p));\n      }\n      var I = S;\n      I.putBuffer(P);\n      var c = Math.ceil(n / u);\n      for (var i = 1; i <= c; i++) {\n        var buf = new forge.util.ByteBuffer();\n        buf.putBytes(D.bytes());\n        buf.putBytes(I.bytes());\n        for (var round = 0; round < iter; round++) {\n          md.start();\n          md.update(buf.getBytes());\n          buf = md.digest();\n        }\n        var B = new forge.util.ByteBuffer();\n        for (l = 0; l < v; l++) {\n          B.putByte(buf.at(l % u));\n        }\n        var k = Math.ceil(s / v) + Math.ceil(p / v);\n        var Inew = new forge.util.ByteBuffer();\n        for (j = 0; j < k; j++) {\n          var chunk = new forge.util.ByteBuffer(I.getBytes(v));\n          var x = 511;\n          for (l = B.length() - 1; l >= 0; l--) {\n            x = x >> 8;\n            x += B.at(l) + chunk.at(l);\n            chunk.setAt(l, x & 255);\n          }\n          Inew.putBuffer(chunk);\n        }\n        I = Inew;\n        result.putBuffer(buf);\n      }\n      result.truncate(result.length() - n);\n      return result;\n    };\n    pki2.pbe.getCipher = function(oid, params, password) {\n      switch (oid) {\n        case pki2.oids[\"pkcs5PBES2\"]:\n          return pki2.pbe.getCipherForPBES2(oid, params, password);\n        case pki2.oids[\"pbeWithSHAAnd3-KeyTripleDES-CBC\"]:\n        case pki2.oids[\"pbewithSHAAnd40BitRC2-CBC\"]:\n          return pki2.pbe.getCipherForPKCS12PBE(oid, params, password);\n        default:\n          var error = new Error(\"Cannot read encrypted PBE data block. Unsupported OID.\");\n          error.oid = oid;\n          error.supportedOids = [\n            \"pkcs5PBES2\",\n            \"pbeWithSHAAnd3-KeyTripleDES-CBC\",\n            \"pbewithSHAAnd40BitRC2-CBC\"\n          ];\n          throw error;\n      }\n    };\n    pki2.pbe.getCipherForPBES2 = function(oid, params, password) {\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\n        var error = new Error(\"Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.\");\n        error.errors = errors;\n        throw error;\n      }\n      oid = asn1.derToOid(capture.kdfOid);\n      if (oid !== pki2.oids[\"pkcs5PBKDF2\"]) {\n        var error = new Error(\"Cannot read encrypted private key. Unsupported key derivation function OID.\");\n        error.oid = oid;\n        error.supportedOids = [\"pkcs5PBKDF2\"];\n        throw error;\n      }\n      oid = asn1.derToOid(capture.encOid);\n      if (oid !== pki2.oids[\"aes128-CBC\"] && oid !== pki2.oids[\"aes192-CBC\"] && oid !== pki2.oids[\"aes256-CBC\"] && oid !== pki2.oids[\"des-EDE3-CBC\"] && oid !== pki2.oids[\"desCBC\"]) {\n        var error = new Error(\"Cannot read encrypted private key. Unsupported encryption scheme OID.\");\n        error.oid = oid;\n        error.supportedOids = [\n          \"aes128-CBC\",\n          \"aes192-CBC\",\n          \"aes256-CBC\",\n          \"des-EDE3-CBC\",\n          \"desCBC\"\n        ];\n        throw error;\n      }\n      var salt = capture.kdfSalt;\n      var count = forge.util.createBuffer(capture.kdfIterationCount);\n      count = count.getInt(count.length() << 3);\n      var dkLen;\n      var cipherFn;\n      switch (pki2.oids[oid]) {\n        case \"aes128-CBC\":\n          dkLen = 16;\n          cipherFn = forge.aes.createDecryptionCipher;\n          break;\n        case \"aes192-CBC\":\n          dkLen = 24;\n          cipherFn = forge.aes.createDecryptionCipher;\n          break;\n        case \"aes256-CBC\":\n          dkLen = 32;\n          cipherFn = forge.aes.createDecryptionCipher;\n          break;\n        case \"des-EDE3-CBC\":\n          dkLen = 24;\n          cipherFn = forge.des.createDecryptionCipher;\n          break;\n        case \"desCBC\":\n          dkLen = 8;\n          cipherFn = forge.des.createDecryptionCipher;\n          break;\n      }\n      var md = prfOidToMessageDigest(capture.prfOid);\n      var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n      var iv = capture.encIv;\n      var cipher = cipherFn(dk);\n      cipher.start(iv);\n      return cipher;\n    };\n    pki2.pbe.getCipherForPKCS12PBE = function(oid, params, password) {\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\n        var error = new Error(\"Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.\");\n        error.errors = errors;\n        throw error;\n      }\n      var salt = forge.util.createBuffer(capture.salt);\n      var count = forge.util.createBuffer(capture.iterations);\n      count = count.getInt(count.length() << 3);\n      var dkLen, dIvLen, cipherFn;\n      switch (oid) {\n        case pki2.oids[\"pbeWithSHAAnd3-KeyTripleDES-CBC\"]:\n          dkLen = 24;\n          dIvLen = 8;\n          cipherFn = forge.des.startDecrypting;\n          break;\n        case pki2.oids[\"pbewithSHAAnd40BitRC2-CBC\"]:\n          dkLen = 5;\n          dIvLen = 8;\n          cipherFn = function(key2, iv2) {\n            var cipher = forge.rc2.createDecryptionCipher(key2, 40);\n            cipher.start(iv2, null);\n            return cipher;\n          };\n          break;\n        default:\n          var error = new Error(\"Cannot read PKCS #12 PBE data block. Unsupported OID.\");\n          error.oid = oid;\n          throw error;\n      }\n      var md = prfOidToMessageDigest(capture.prfOid);\n      var key = pki2.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\n      md.start();\n      var iv = pki2.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\n      return cipherFn(key, iv);\n    };\n    pki2.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {\n      if (typeof md === \"undefined\" || md === null) {\n        if (!(\"md5\" in forge.md)) {\n          throw new Error('\"md5\" hash algorithm unavailable.');\n        }\n        md = forge.md.md5.create();\n      }\n      if (salt === null) {\n        salt = \"\";\n      }\n      var digests = [hash2(md, password + salt)];\n      for (var length = 16, i = 1; length < dkLen; ++i, length += 16) {\n        digests.push(hash2(md, digests[i - 1] + password + salt));\n      }\n      return digests.join(\"\").substr(0, dkLen);\n    };\n    function hash2(md, bytes) {\n      return md.start().update(bytes).digest().getBytes();\n    }\n    function prfOidToMessageDigest(prfOid) {\n      var prfAlgorithm;\n      if (!prfOid) {\n        prfAlgorithm = \"hmacWithSHA1\";\n      } else {\n        prfAlgorithm = pki2.oids[asn1.derToOid(prfOid)];\n        if (!prfAlgorithm) {\n          var error = new Error(\"Unsupported PRF OID.\");\n          error.oid = prfOid;\n          error.supported = [\n            \"hmacWithSHA1\",\n            \"hmacWithSHA224\",\n            \"hmacWithSHA256\",\n            \"hmacWithSHA384\",\n            \"hmacWithSHA512\"\n          ];\n          throw error;\n        }\n      }\n      return prfAlgorithmToMessageDigest(prfAlgorithm);\n    }\n    function prfAlgorithmToMessageDigest(prfAlgorithm) {\n      var factory = forge.md;\n      switch (prfAlgorithm) {\n        case \"hmacWithSHA224\":\n          factory = forge.md.sha512;\n        case \"hmacWithSHA1\":\n        case \"hmacWithSHA256\":\n        case \"hmacWithSHA384\":\n        case \"hmacWithSHA512\":\n          prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\n          break;\n        default:\n          var error = new Error(\"Unsupported PRF algorithm.\");\n          error.algorithm = prfAlgorithm;\n          error.supported = [\n            \"hmacWithSHA1\",\n            \"hmacWithSHA224\",\n            \"hmacWithSHA256\",\n            \"hmacWithSHA384\",\n            \"hmacWithSHA512\"\n          ];\n          throw error;\n      }\n      if (!factory || !(prfAlgorithm in factory)) {\n        throw new Error(\"Unknown hash algorithm: \" + prfAlgorithm);\n      }\n      return factory[prfAlgorithm].create();\n    }\n    function createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\n      var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // salt\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OCTETSTRING,\n          false,\n          salt\n        ),\n        // iteration count\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          countBytes.getBytes()\n        )\n      ]);\n      if (prfAlgorithm !== \"hmacWithSHA1\") {\n        params.value.push(\n          // key length\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.INTEGER,\n            false,\n            forge.util.hexToBytes(dkLen.toString(16))\n          ),\n          // AlgorithmIdentifier\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // algorithm\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(pki2.oids[prfAlgorithm]).getBytes()\n            ),\n            // parameters (null)\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n          ])\n        );\n      }\n      return params;\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/pkcs7asn1.js\nvar require_pkcs7asn1 = __commonJS({\n  \"../../node_modules/node-forge/lib/pkcs7asn1.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_asn1();\n    require_util();\n    var asn1 = forge.asn1;\n    var p7v = module2.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};\n    forge.pkcs7 = forge.pkcs7 || {};\n    forge.pkcs7.asn1 = p7v;\n    var contentInfoValidator = {\n      name: \"ContentInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"ContentInfo.ContentType\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: \"contentType\"\n      }, {\n        name: \"ContentInfo.content\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        type: 0,\n        constructed: true,\n        optional: true,\n        captureAsn1: \"content\"\n      }]\n    };\n    p7v.contentInfoValidator = contentInfoValidator;\n    var encryptedContentInfoValidator = {\n      name: \"EncryptedContentInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"EncryptedContentInfo.contentType\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: \"contentType\"\n      }, {\n        name: \"EncryptedContentInfo.contentEncryptionAlgorithm\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"EncryptedContentInfo.contentEncryptionAlgorithm.algorithm\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"encAlgorithm\"\n        }, {\n          name: \"EncryptedContentInfo.contentEncryptionAlgorithm.parameter\",\n          tagClass: asn1.Class.UNIVERSAL,\n          captureAsn1: \"encParameter\"\n        }]\n      }, {\n        name: \"EncryptedContentInfo.encryptedContent\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        type: 0,\n        /* The PKCS#7 structure output by OpenSSL somewhat differs from what\n         * other implementations do generate.\n         *\n         * OpenSSL generates a structure like this:\n         * SEQUENCE {\n         *    ...\n         *    [0]\n         *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\n         *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\n         *       ...\n         * }\n         *\n         * Whereas other implementations (and this PKCS#7 module) generate:\n         * SEQUENCE {\n         *    ...\n         *    [0] {\n         *       OCTET STRING\n         *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\n         *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\n         *          ...\n         *    }\n         * }\n         *\n         * In order to support both, we just capture the context specific\n         * field here.  The OCTET STRING bit is removed below.\n         */\n        capture: \"encryptedContent\",\n        captureAsn1: \"encryptedContentAsn1\"\n      }]\n    };\n    p7v.envelopedDataValidator = {\n      name: \"EnvelopedData\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"EnvelopedData.Version\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"version\"\n      }, {\n        name: \"EnvelopedData.RecipientInfos\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SET,\n        constructed: true,\n        captureAsn1: \"recipientInfos\"\n      }].concat(encryptedContentInfoValidator)\n    };\n    p7v.encryptedDataValidator = {\n      name: \"EncryptedData\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"EncryptedData.Version\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"version\"\n      }].concat(encryptedContentInfoValidator)\n    };\n    var signerValidator = {\n      name: \"SignerInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"SignerInfo.version\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false\n      }, {\n        name: \"SignerInfo.issuerAndSerialNumber\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"SignerInfo.issuerAndSerialNumber.issuer\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SEQUENCE,\n          constructed: true,\n          captureAsn1: \"issuer\"\n        }, {\n          name: \"SignerInfo.issuerAndSerialNumber.serialNumber\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.INTEGER,\n          constructed: false,\n          capture: \"serial\"\n        }]\n      }, {\n        name: \"SignerInfo.digestAlgorithm\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"SignerInfo.digestAlgorithm.algorithm\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"digestAlgorithm\"\n        }, {\n          name: \"SignerInfo.digestAlgorithm.parameter\",\n          tagClass: asn1.Class.UNIVERSAL,\n          constructed: false,\n          captureAsn1: \"digestParameter\",\n          optional: true\n        }]\n      }, {\n        name: \"SignerInfo.authenticatedAttributes\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        type: 0,\n        constructed: true,\n        optional: true,\n        capture: \"authenticatedAttributes\"\n      }, {\n        name: \"SignerInfo.digestEncryptionAlgorithm\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        capture: \"signatureAlgorithm\"\n      }, {\n        name: \"SignerInfo.encryptedDigest\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"signature\"\n      }, {\n        name: \"SignerInfo.unauthenticatedAttributes\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        type: 1,\n        constructed: true,\n        optional: true,\n        capture: \"unauthenticatedAttributes\"\n      }]\n    };\n    p7v.signedDataValidator = {\n      name: \"SignedData\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [\n        {\n          name: \"SignedData.Version\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.INTEGER,\n          constructed: false,\n          capture: \"version\"\n        },\n        {\n          name: \"SignedData.DigestAlgorithms\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SET,\n          constructed: true,\n          captureAsn1: \"digestAlgorithms\"\n        },\n        contentInfoValidator,\n        {\n          name: \"SignedData.Certificates\",\n          tagClass: asn1.Class.CONTEXT_SPECIFIC,\n          type: 0,\n          optional: true,\n          captureAsn1: \"certificates\"\n        },\n        {\n          name: \"SignedData.CertificateRevocationLists\",\n          tagClass: asn1.Class.CONTEXT_SPECIFIC,\n          type: 1,\n          optional: true,\n          captureAsn1: \"crls\"\n        },\n        {\n          name: \"SignedData.SignerInfos\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SET,\n          capture: \"signerInfos\",\n          optional: true,\n          value: [signerValidator]\n        }\n      ]\n    };\n    p7v.recipientInfoValidator = {\n      name: \"RecipientInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"RecipientInfo.version\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"version\"\n      }, {\n        name: \"RecipientInfo.issuerAndSerial\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"RecipientInfo.issuerAndSerial.issuer\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SEQUENCE,\n          constructed: true,\n          captureAsn1: \"issuer\"\n        }, {\n          name: \"RecipientInfo.issuerAndSerial.serialNumber\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.INTEGER,\n          constructed: false,\n          capture: \"serial\"\n        }]\n      }, {\n        name: \"RecipientInfo.keyEncryptionAlgorithm\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"RecipientInfo.keyEncryptionAlgorithm.algorithm\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"encAlgorithm\"\n        }, {\n          name: \"RecipientInfo.keyEncryptionAlgorithm.parameter\",\n          tagClass: asn1.Class.UNIVERSAL,\n          constructed: false,\n          captureAsn1: \"encParameter\",\n          optional: true\n        }]\n      }, {\n        name: \"RecipientInfo.encryptedKey\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"encKey\"\n      }]\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/mgf1.js\nvar require_mgf1 = __commonJS({\n  \"../../node_modules/node-forge/lib/mgf1.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    forge.mgf = forge.mgf || {};\n    var mgf1 = module2.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};\n    mgf1.create = function(md) {\n      var mgf = {\n        /**\n         * Generate mask of specified length.\n         *\n         * @param {String} seed The seed for mask generation.\n         * @param maskLen Number of bytes to generate.\n         * @return {String} The generated mask.\n         */\n        generate: function(seed, maskLen) {\n          var t = new forge.util.ByteBuffer();\n          var len = Math.ceil(maskLen / md.digestLength);\n          for (var i = 0; i < len; i++) {\n            var c = new forge.util.ByteBuffer();\n            c.putInt32(i);\n            md.start();\n            md.update(seed + c.getBytes());\n            t.putBuffer(md.digest());\n          }\n          t.truncate(t.length() - maskLen);\n          return t.getBytes();\n        }\n      };\n      return mgf;\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/mgf.js\nvar require_mgf = __commonJS({\n  \"../../node_modules/node-forge/lib/mgf.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_mgf1();\n    module2.exports = forge.mgf = forge.mgf || {};\n    forge.mgf.mgf1 = forge.mgf1;\n  }\n});\n\n// ../../node_modules/node-forge/lib/pss.js\nvar require_pss = __commonJS({\n  \"../../node_modules/node-forge/lib/pss.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_random();\n    require_util();\n    var pss = module2.exports = forge.pss = forge.pss || {};\n    pss.create = function(options) {\n      if (arguments.length === 3) {\n        options = {\n          md: arguments[0],\n          mgf: arguments[1],\n          saltLength: arguments[2]\n        };\n      }\n      var hash2 = options.md;\n      var mgf = options.mgf;\n      var hLen = hash2.digestLength;\n      var salt_ = options.salt || null;\n      if (typeof salt_ === \"string\") {\n        salt_ = forge.util.createBuffer(salt_);\n      }\n      var sLen;\n      if (\"saltLength\" in options) {\n        sLen = options.saltLength;\n      } else if (salt_ !== null) {\n        sLen = salt_.length();\n      } else {\n        throw new Error(\"Salt length not specified or specific salt not given.\");\n      }\n      if (salt_ !== null && salt_.length() !== sLen) {\n        throw new Error(\"Given salt length does not match length of given salt.\");\n      }\n      var prng = options.prng || forge.random;\n      var pssobj = {};\n      pssobj.encode = function(md, modBits) {\n        var i;\n        var emBits = modBits - 1;\n        var emLen = Math.ceil(emBits / 8);\n        var mHash = md.digest().getBytes();\n        if (emLen < hLen + sLen + 2) {\n          throw new Error(\"Message is too long to encrypt.\");\n        }\n        var salt;\n        if (salt_ === null) {\n          salt = prng.getBytesSync(sLen);\n        } else {\n          salt = salt_.bytes();\n        }\n        var m_ = new forge.util.ByteBuffer();\n        m_.fillWithByte(0, 8);\n        m_.putBytes(mHash);\n        m_.putBytes(salt);\n        hash2.start();\n        hash2.update(m_.getBytes());\n        var h = hash2.digest().getBytes();\n        var ps = new forge.util.ByteBuffer();\n        ps.fillWithByte(0, emLen - sLen - hLen - 2);\n        ps.putByte(1);\n        ps.putBytes(salt);\n        var db = ps.getBytes();\n        var maskLen = emLen - hLen - 1;\n        var dbMask = mgf.generate(h, maskLen);\n        var maskedDB = \"\";\n        for (i = 0; i < maskLen; i++) {\n          maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));\n        }\n        var mask = 65280 >> 8 * emLen - emBits & 255;\n        maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) + maskedDB.substr(1);\n        return maskedDB + h + String.fromCharCode(188);\n      };\n      pssobj.verify = function(mHash, em, modBits) {\n        var i;\n        var emBits = modBits - 1;\n        var emLen = Math.ceil(emBits / 8);\n        em = em.substr(-emLen);\n        if (emLen < hLen + sLen + 2) {\n          throw new Error(\"Inconsistent parameters to PSS signature verification.\");\n        }\n        if (em.charCodeAt(emLen - 1) !== 188) {\n          throw new Error(\"Encoded message does not end in 0xBC.\");\n        }\n        var maskLen = emLen - hLen - 1;\n        var maskedDB = em.substr(0, maskLen);\n        var h = em.substr(maskLen, hLen);\n        var mask = 65280 >> 8 * emLen - emBits & 255;\n        if ((maskedDB.charCodeAt(0) & mask) !== 0) {\n          throw new Error(\"Bits beyond keysize not zero as expected.\");\n        }\n        var dbMask = mgf.generate(h, maskLen);\n        var db = \"\";\n        for (i = 0; i < maskLen; i++) {\n          db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));\n        }\n        db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);\n        var checkLen = emLen - hLen - sLen - 2;\n        for (i = 0; i < checkLen; i++) {\n          if (db.charCodeAt(i) !== 0) {\n            throw new Error(\"Leftmost octets not zero as expected\");\n          }\n        }\n        if (db.charCodeAt(checkLen) !== 1) {\n          throw new Error(\"Inconsistent PSS signature, 0x01 marker not found\");\n        }\n        var salt = db.substr(-sLen);\n        var m_ = new forge.util.ByteBuffer();\n        m_.fillWithByte(0, 8);\n        m_.putBytes(mHash);\n        m_.putBytes(salt);\n        hash2.start();\n        hash2.update(m_.getBytes());\n        var h_ = hash2.digest().getBytes();\n        return h === h_;\n      };\n      return pssobj;\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/x509.js\nvar require_x509 = __commonJS({\n  \"../../node_modules/node-forge/lib/x509.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_aes();\n    require_asn1();\n    require_des();\n    require_md();\n    require_mgf();\n    require_oids();\n    require_pem();\n    require_pss();\n    require_rsa();\n    require_util();\n    var asn1 = forge.asn1;\n    var pki2 = module2.exports = forge.pki = forge.pki || {};\n    var oids = pki2.oids;\n    var _shortNames = {};\n    _shortNames[\"CN\"] = oids[\"commonName\"];\n    _shortNames[\"commonName\"] = \"CN\";\n    _shortNames[\"C\"] = oids[\"countryName\"];\n    _shortNames[\"countryName\"] = \"C\";\n    _shortNames[\"L\"] = oids[\"localityName\"];\n    _shortNames[\"localityName\"] = \"L\";\n    _shortNames[\"ST\"] = oids[\"stateOrProvinceName\"];\n    _shortNames[\"stateOrProvinceName\"] = \"ST\";\n    _shortNames[\"O\"] = oids[\"organizationName\"];\n    _shortNames[\"organizationName\"] = \"O\";\n    _shortNames[\"OU\"] = oids[\"organizationalUnitName\"];\n    _shortNames[\"organizationalUnitName\"] = \"OU\";\n    _shortNames[\"E\"] = oids[\"emailAddress\"];\n    _shortNames[\"emailAddress\"] = \"E\";\n    var publicKeyValidator = forge.pki.rsa.publicKeyValidator;\n    var x509CertificateValidator = {\n      name: \"Certificate\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"Certificate.TBSCertificate\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        captureAsn1: \"tbsCertificate\",\n        value: [\n          {\n            name: \"Certificate.TBSCertificate.version\",\n            tagClass: asn1.Class.CONTEXT_SPECIFIC,\n            type: 0,\n            constructed: true,\n            optional: true,\n            value: [{\n              name: \"Certificate.TBSCertificate.version.integer\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.INTEGER,\n              constructed: false,\n              capture: \"certVersion\"\n            }]\n          },\n          {\n            name: \"Certificate.TBSCertificate.serialNumber\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"certSerialNumber\"\n          },\n          {\n            name: \"Certificate.TBSCertificate.signature\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            value: [{\n              name: \"Certificate.TBSCertificate.signature.algorithm\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.OID,\n              constructed: false,\n              capture: \"certinfoSignatureOid\"\n            }, {\n              name: \"Certificate.TBSCertificate.signature.parameters\",\n              tagClass: asn1.Class.UNIVERSAL,\n              optional: true,\n              captureAsn1: \"certinfoSignatureParams\"\n            }]\n          },\n          {\n            name: \"Certificate.TBSCertificate.issuer\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            captureAsn1: \"certIssuer\"\n          },\n          {\n            name: \"Certificate.TBSCertificate.validity\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            // Note: UTC and generalized times may both appear so the capture\n            // names are based on their detected order, the names used below\n            // are only for the common case, which validity time really means\n            // \"notBefore\" and which means \"notAfter\" will be determined by order\n            value: [{\n              // notBefore (Time) (UTC time case)\n              name: \"Certificate.TBSCertificate.validity.notBefore (utc)\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.UTCTIME,\n              constructed: false,\n              optional: true,\n              capture: \"certValidity1UTCTime\"\n            }, {\n              // notBefore (Time) (generalized time case)\n              name: \"Certificate.TBSCertificate.validity.notBefore (generalized)\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.GENERALIZEDTIME,\n              constructed: false,\n              optional: true,\n              capture: \"certValidity2GeneralizedTime\"\n            }, {\n              // notAfter (Time) (only UTC time is supported)\n              name: \"Certificate.TBSCertificate.validity.notAfter (utc)\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.UTCTIME,\n              constructed: false,\n              optional: true,\n              capture: \"certValidity3UTCTime\"\n            }, {\n              // notAfter (Time) (only UTC time is supported)\n              name: \"Certificate.TBSCertificate.validity.notAfter (generalized)\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.GENERALIZEDTIME,\n              constructed: false,\n              optional: true,\n              capture: \"certValidity4GeneralizedTime\"\n            }]\n          },\n          {\n            // Name (subject) (RDNSequence)\n            name: \"Certificate.TBSCertificate.subject\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            captureAsn1: \"certSubject\"\n          },\n          // SubjectPublicKeyInfo\n          publicKeyValidator,\n          {\n            // issuerUniqueID (optional)\n            name: \"Certificate.TBSCertificate.issuerUniqueID\",\n            tagClass: asn1.Class.CONTEXT_SPECIFIC,\n            type: 1,\n            constructed: true,\n            optional: true,\n            value: [{\n              name: \"Certificate.TBSCertificate.issuerUniqueID.id\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.BITSTRING,\n              constructed: false,\n              // TODO: support arbitrary bit length ids\n              captureBitStringValue: \"certIssuerUniqueId\"\n            }]\n          },\n          {\n            // subjectUniqueID (optional)\n            name: \"Certificate.TBSCertificate.subjectUniqueID\",\n            tagClass: asn1.Class.CONTEXT_SPECIFIC,\n            type: 2,\n            constructed: true,\n            optional: true,\n            value: [{\n              name: \"Certificate.TBSCertificate.subjectUniqueID.id\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.BITSTRING,\n              constructed: false,\n              // TODO: support arbitrary bit length ids\n              captureBitStringValue: \"certSubjectUniqueId\"\n            }]\n          },\n          {\n            // Extensions (optional)\n            name: \"Certificate.TBSCertificate.extensions\",\n            tagClass: asn1.Class.CONTEXT_SPECIFIC,\n            type: 3,\n            constructed: true,\n            captureAsn1: \"certExtensions\",\n            optional: true\n          }\n        ]\n      }, {\n        // AlgorithmIdentifier (signature algorithm)\n        name: \"Certificate.signatureAlgorithm\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          // algorithm\n          name: \"Certificate.signatureAlgorithm.algorithm\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"certSignatureOid\"\n        }, {\n          name: \"Certificate.TBSCertificate.signature.parameters\",\n          tagClass: asn1.Class.UNIVERSAL,\n          optional: true,\n          captureAsn1: \"certSignatureParams\"\n        }]\n      }, {\n        // SignatureValue\n        name: \"Certificate.signatureValue\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.BITSTRING,\n        constructed: false,\n        captureBitStringValue: \"certSignature\"\n      }]\n    };\n    var rsassaPssParameterValidator = {\n      name: \"rsapss\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"rsapss.hashAlgorithm\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        type: 0,\n        constructed: true,\n        value: [{\n          name: \"rsapss.hashAlgorithm.AlgorithmIdentifier\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Class.SEQUENCE,\n          constructed: true,\n          optional: true,\n          value: [{\n            name: \"rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OID,\n            constructed: false,\n            capture: \"hashOid\"\n            /* parameter block omitted, for SHA1 NULL anyhow. */\n          }]\n        }]\n      }, {\n        name: \"rsapss.maskGenAlgorithm\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        type: 1,\n        constructed: true,\n        value: [{\n          name: \"rsapss.maskGenAlgorithm.AlgorithmIdentifier\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Class.SEQUENCE,\n          constructed: true,\n          optional: true,\n          value: [{\n            name: \"rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OID,\n            constructed: false,\n            capture: \"maskGenOid\"\n          }, {\n            name: \"rsapss.maskGenAlgorithm.AlgorithmIdentifier.params\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            value: [{\n              name: \"rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.OID,\n              constructed: false,\n              capture: \"maskGenHashOid\"\n              /* parameter block omitted, for SHA1 NULL anyhow. */\n            }]\n          }]\n        }]\n      }, {\n        name: \"rsapss.saltLength\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        type: 2,\n        optional: true,\n        value: [{\n          name: \"rsapss.saltLength.saltLength\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Class.INTEGER,\n          constructed: false,\n          capture: \"saltLength\"\n        }]\n      }, {\n        name: \"rsapss.trailerField\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        type: 3,\n        optional: true,\n        value: [{\n          name: \"rsapss.trailer.trailer\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Class.INTEGER,\n          constructed: false,\n          capture: \"trailer\"\n        }]\n      }]\n    };\n    var certificationRequestInfoValidator = {\n      name: \"CertificationRequestInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: \"certificationRequestInfo\",\n      value: [\n        {\n          name: \"CertificationRequestInfo.integer\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.INTEGER,\n          constructed: false,\n          capture: \"certificationRequestInfoVersion\"\n        },\n        {\n          // Name (subject) (RDNSequence)\n          name: \"CertificationRequestInfo.subject\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SEQUENCE,\n          constructed: true,\n          captureAsn1: \"certificationRequestInfoSubject\"\n        },\n        // SubjectPublicKeyInfo\n        publicKeyValidator,\n        {\n          name: \"CertificationRequestInfo.attributes\",\n          tagClass: asn1.Class.CONTEXT_SPECIFIC,\n          type: 0,\n          constructed: true,\n          optional: true,\n          capture: \"certificationRequestInfoAttributes\",\n          value: [{\n            name: \"CertificationRequestInfo.attributes\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            value: [{\n              name: \"CertificationRequestInfo.attributes.type\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.OID,\n              constructed: false\n            }, {\n              name: \"CertificationRequestInfo.attributes.value\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.SET,\n              constructed: true\n            }]\n          }]\n        }\n      ]\n    };\n    var certificationRequestValidator = {\n      name: \"CertificationRequest\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: \"csr\",\n      value: [\n        certificationRequestInfoValidator,\n        {\n          // AlgorithmIdentifier (signature algorithm)\n          name: \"CertificationRequest.signatureAlgorithm\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SEQUENCE,\n          constructed: true,\n          value: [{\n            // algorithm\n            name: \"CertificationRequest.signatureAlgorithm.algorithm\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OID,\n            constructed: false,\n            capture: \"csrSignatureOid\"\n          }, {\n            name: \"CertificationRequest.signatureAlgorithm.parameters\",\n            tagClass: asn1.Class.UNIVERSAL,\n            optional: true,\n            captureAsn1: \"csrSignatureParams\"\n          }]\n        },\n        {\n          // signature\n          name: \"CertificationRequest.signature\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.BITSTRING,\n          constructed: false,\n          captureBitStringValue: \"csrSignature\"\n        }\n      ]\n    };\n    pki2.RDNAttributesAsArray = function(rdn, md) {\n      var rval = [];\n      var set, attr, obj;\n      for (var si = 0; si < rdn.value.length; ++si) {\n        set = rdn.value[si];\n        for (var i = 0; i < set.value.length; ++i) {\n          obj = {};\n          attr = set.value[i];\n          obj.type = asn1.derToOid(attr.value[0].value);\n          obj.value = attr.value[1].value;\n          obj.valueTagClass = attr.value[1].type;\n          if (obj.type in oids) {\n            obj.name = oids[obj.type];\n            if (obj.name in _shortNames) {\n              obj.shortName = _shortNames[obj.name];\n            }\n          }\n          if (md) {\n            md.update(obj.type);\n            md.update(obj.value);\n          }\n          rval.push(obj);\n        }\n      }\n      return rval;\n    };\n    pki2.CRIAttributesAsArray = function(attributes) {\n      var rval = [];\n      for (var si = 0; si < attributes.length; ++si) {\n        var seq = attributes[si];\n        var type = asn1.derToOid(seq.value[0].value);\n        var values = seq.value[1].value;\n        for (var vi = 0; vi < values.length; ++vi) {\n          var obj = {};\n          obj.type = type;\n          obj.value = values[vi].value;\n          obj.valueTagClass = values[vi].type;\n          if (obj.type in oids) {\n            obj.name = oids[obj.type];\n            if (obj.name in _shortNames) {\n              obj.shortName = _shortNames[obj.name];\n            }\n          }\n          if (obj.type === oids.extensionRequest) {\n            obj.extensions = [];\n            for (var ei = 0; ei < obj.value.length; ++ei) {\n              obj.extensions.push(pki2.certificateExtensionFromAsn1(obj.value[ei]));\n            }\n          }\n          rval.push(obj);\n        }\n      }\n      return rval;\n    };\n    function _getAttribute(obj, options) {\n      if (typeof options === \"string\") {\n        options = { shortName: options };\n      }\n      var rval = null;\n      var attr;\n      for (var i = 0; rval === null && i < obj.attributes.length; ++i) {\n        attr = obj.attributes[i];\n        if (options.type && options.type === attr.type) {\n          rval = attr;\n        } else if (options.name && options.name === attr.name) {\n          rval = attr;\n        } else if (options.shortName && options.shortName === attr.shortName) {\n          rval = attr;\n        }\n      }\n      return rval;\n    }\n    var _readSignatureParameters = function(oid, obj, fillDefaults) {\n      var params = {};\n      if (oid !== oids[\"RSASSA-PSS\"]) {\n        return params;\n      }\n      if (fillDefaults) {\n        params = {\n          hash: {\n            algorithmOid: oids[\"sha1\"]\n          },\n          mgf: {\n            algorithmOid: oids[\"mgf1\"],\n            hash: {\n              algorithmOid: oids[\"sha1\"]\n            }\n          },\n          saltLength: 20\n        };\n      }\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(obj, rsassaPssParameterValidator, capture, errors)) {\n        var error = new Error(\"Cannot read RSASSA-PSS parameter block.\");\n        error.errors = errors;\n        throw error;\n      }\n      if (capture.hashOid !== void 0) {\n        params.hash = params.hash || {};\n        params.hash.algorithmOid = asn1.derToOid(capture.hashOid);\n      }\n      if (capture.maskGenOid !== void 0) {\n        params.mgf = params.mgf || {};\n        params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);\n        params.mgf.hash = params.mgf.hash || {};\n        params.mgf.hash.algorithmOid = asn1.derToOid(capture.maskGenHashOid);\n      }\n      if (capture.saltLength !== void 0) {\n        params.saltLength = capture.saltLength.charCodeAt(0);\n      }\n      return params;\n    };\n    var _createSignatureDigest = function(options) {\n      switch (oids[options.signatureOid]) {\n        case \"sha1WithRSAEncryption\":\n        case \"sha1WithRSASignature\":\n          return forge.md.sha1.create();\n        case \"md5WithRSAEncryption\":\n          return forge.md.md5.create();\n        case \"sha256WithRSAEncryption\":\n          return forge.md.sha256.create();\n        case \"sha384WithRSAEncryption\":\n          return forge.md.sha384.create();\n        case \"sha512WithRSAEncryption\":\n          return forge.md.sha512.create();\n        case \"RSASSA-PSS\":\n          return forge.md.sha256.create();\n        default:\n          var error = new Error(\n            \"Could not compute \" + options.type + \" digest. Unknown signature OID.\"\n          );\n          error.signatureOid = options.signatureOid;\n          throw error;\n      }\n    };\n    var _verifySignature = function(options) {\n      var cert = options.certificate;\n      var scheme;\n      switch (cert.signatureOid) {\n        case oids.sha1WithRSAEncryption:\n        case oids.sha1WithRSASignature:\n          break;\n        case oids[\"RSASSA-PSS\"]:\n          var hash2, mgf;\n          hash2 = oids[cert.signatureParameters.mgf.hash.algorithmOid];\n          if (hash2 === void 0 || forge.md[hash2] === void 0) {\n            var error = new Error(\"Unsupported MGF hash function.\");\n            error.oid = cert.signatureParameters.mgf.hash.algorithmOid;\n            error.name = hash2;\n            throw error;\n          }\n          mgf = oids[cert.signatureParameters.mgf.algorithmOid];\n          if (mgf === void 0 || forge.mgf[mgf] === void 0) {\n            var error = new Error(\"Unsupported MGF function.\");\n            error.oid = cert.signatureParameters.mgf.algorithmOid;\n            error.name = mgf;\n            throw error;\n          }\n          mgf = forge.mgf[mgf].create(forge.md[hash2].create());\n          hash2 = oids[cert.signatureParameters.hash.algorithmOid];\n          if (hash2 === void 0 || forge.md[hash2] === void 0) {\n            var error = new Error(\"Unsupported RSASSA-PSS hash function.\");\n            error.oid = cert.signatureParameters.hash.algorithmOid;\n            error.name = hash2;\n            throw error;\n          }\n          scheme = forge.pss.create(\n            forge.md[hash2].create(),\n            mgf,\n            cert.signatureParameters.saltLength\n          );\n          break;\n      }\n      return cert.publicKey.verify(\n        options.md.digest().getBytes(),\n        options.signature,\n        scheme\n      );\n    };\n    pki2.certificateFromPem = function(pem, computeHash, strict) {\n      var msg = forge.pem.decode(pem)[0];\n      if (msg.type !== \"CERTIFICATE\" && msg.type !== \"X509 CERTIFICATE\" && msg.type !== \"TRUSTED CERTIFICATE\") {\n        var error = new Error(\n          'Could not convert certificate from PEM; PEM header type is not \"CERTIFICATE\", \"X509 CERTIFICATE\", or \"TRUSTED CERTIFICATE\".'\n        );\n        error.headerType = msg.type;\n        throw error;\n      }\n      if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        throw new Error(\n          \"Could not convert certificate from PEM; PEM is encrypted.\"\n        );\n      }\n      var obj = asn1.fromDer(msg.body, strict);\n      return pki2.certificateFromAsn1(obj, computeHash);\n    };\n    pki2.certificateToPem = function(cert, maxline) {\n      var msg = {\n        type: \"CERTIFICATE\",\n        body: asn1.toDer(pki2.certificateToAsn1(cert)).getBytes()\n      };\n      return forge.pem.encode(msg, { maxline });\n    };\n    pki2.publicKeyFromPem = function(pem) {\n      var msg = forge.pem.decode(pem)[0];\n      if (msg.type !== \"PUBLIC KEY\" && msg.type !== \"RSA PUBLIC KEY\") {\n        var error = new Error('Could not convert public key from PEM; PEM header type is not \"PUBLIC KEY\" or \"RSA PUBLIC KEY\".');\n        error.headerType = msg.type;\n        throw error;\n      }\n      if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        throw new Error(\"Could not convert public key from PEM; PEM is encrypted.\");\n      }\n      var obj = asn1.fromDer(msg.body);\n      return pki2.publicKeyFromAsn1(obj);\n    };\n    pki2.publicKeyToPem = function(key, maxline) {\n      var msg = {\n        type: \"PUBLIC KEY\",\n        body: asn1.toDer(pki2.publicKeyToAsn1(key)).getBytes()\n      };\n      return forge.pem.encode(msg, { maxline });\n    };\n    pki2.publicKeyToRSAPublicKeyPem = function(key, maxline) {\n      var msg = {\n        type: \"RSA PUBLIC KEY\",\n        body: asn1.toDer(pki2.publicKeyToRSAPublicKey(key)).getBytes()\n      };\n      return forge.pem.encode(msg, { maxline });\n    };\n    pki2.getPublicKeyFingerprint = function(key, options) {\n      options = options || {};\n      var md = options.md || forge.md.sha1.create();\n      var type = options.type || \"RSAPublicKey\";\n      var bytes;\n      switch (type) {\n        case \"RSAPublicKey\":\n          bytes = asn1.toDer(pki2.publicKeyToRSAPublicKey(key)).getBytes();\n          break;\n        case \"SubjectPublicKeyInfo\":\n          bytes = asn1.toDer(pki2.publicKeyToAsn1(key)).getBytes();\n          break;\n        default:\n          throw new Error('Unknown fingerprint type \"' + options.type + '\".');\n      }\n      md.start();\n      md.update(bytes);\n      var digest = md.digest();\n      if (options.encoding === \"hex\") {\n        var hex = digest.toHex();\n        if (options.delimiter) {\n          return hex.match(/.{2}/g).join(options.delimiter);\n        }\n        return hex;\n      } else if (options.encoding === \"binary\") {\n        return digest.getBytes();\n      } else if (options.encoding) {\n        throw new Error('Unknown encoding \"' + options.encoding + '\".');\n      }\n      return digest;\n    };\n    pki2.certificationRequestFromPem = function(pem, computeHash, strict) {\n      var msg = forge.pem.decode(pem)[0];\n      if (msg.type !== \"CERTIFICATE REQUEST\") {\n        var error = new Error('Could not convert certification request from PEM; PEM header type is not \"CERTIFICATE REQUEST\".');\n        error.headerType = msg.type;\n        throw error;\n      }\n      if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        throw new Error(\"Could not convert certification request from PEM; PEM is encrypted.\");\n      }\n      var obj = asn1.fromDer(msg.body, strict);\n      return pki2.certificationRequestFromAsn1(obj, computeHash);\n    };\n    pki2.certificationRequestToPem = function(csr, maxline) {\n      var msg = {\n        type: \"CERTIFICATE REQUEST\",\n        body: asn1.toDer(pki2.certificationRequestToAsn1(csr)).getBytes()\n      };\n      return forge.pem.encode(msg, { maxline });\n    };\n    pki2.createCertificate = function() {\n      var cert = {};\n      cert.version = 2;\n      cert.serialNumber = \"00\";\n      cert.signatureOid = null;\n      cert.signature = null;\n      cert.siginfo = {};\n      cert.siginfo.algorithmOid = null;\n      cert.validity = {};\n      cert.validity.notBefore = /* @__PURE__ */ new Date();\n      cert.validity.notAfter = /* @__PURE__ */ new Date();\n      cert.issuer = {};\n      cert.issuer.getField = function(sn) {\n        return _getAttribute(cert.issuer, sn);\n      };\n      cert.issuer.addField = function(attr) {\n        _fillMissingFields([attr]);\n        cert.issuer.attributes.push(attr);\n      };\n      cert.issuer.attributes = [];\n      cert.issuer.hash = null;\n      cert.subject = {};\n      cert.subject.getField = function(sn) {\n        return _getAttribute(cert.subject, sn);\n      };\n      cert.subject.addField = function(attr) {\n        _fillMissingFields([attr]);\n        cert.subject.attributes.push(attr);\n      };\n      cert.subject.attributes = [];\n      cert.subject.hash = null;\n      cert.extensions = [];\n      cert.publicKey = null;\n      cert.md = null;\n      cert.setSubject = function(attrs, uniqueId) {\n        _fillMissingFields(attrs);\n        cert.subject.attributes = attrs;\n        delete cert.subject.uniqueId;\n        if (uniqueId) {\n          cert.subject.uniqueId = uniqueId;\n        }\n        cert.subject.hash = null;\n      };\n      cert.setIssuer = function(attrs, uniqueId) {\n        _fillMissingFields(attrs);\n        cert.issuer.attributes = attrs;\n        delete cert.issuer.uniqueId;\n        if (uniqueId) {\n          cert.issuer.uniqueId = uniqueId;\n        }\n        cert.issuer.hash = null;\n      };\n      cert.setExtensions = function(exts) {\n        for (var i = 0; i < exts.length; ++i) {\n          _fillMissingExtensionFields(exts[i], { cert });\n        }\n        cert.extensions = exts;\n      };\n      cert.getExtension = function(options) {\n        if (typeof options === \"string\") {\n          options = { name: options };\n        }\n        var rval = null;\n        var ext;\n        for (var i = 0; rval === null && i < cert.extensions.length; ++i) {\n          ext = cert.extensions[i];\n          if (options.id && ext.id === options.id) {\n            rval = ext;\n          } else if (options.name && ext.name === options.name) {\n            rval = ext;\n          }\n        }\n        return rval;\n      };\n      cert.sign = function(key, md) {\n        cert.md = md || forge.md.sha1.create();\n        var algorithmOid = oids[cert.md.algorithm + \"WithRSAEncryption\"];\n        if (!algorithmOid) {\n          var error = new Error(\"Could not compute certificate digest. Unknown message digest algorithm OID.\");\n          error.algorithm = cert.md.algorithm;\n          throw error;\n        }\n        cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid;\n        cert.tbsCertificate = pki2.getTBSCertificate(cert);\n        var bytes = asn1.toDer(cert.tbsCertificate);\n        cert.md.update(bytes.getBytes());\n        cert.signature = key.sign(cert.md);\n      };\n      cert.verify = function(child) {\n        var rval = false;\n        if (!cert.issued(child)) {\n          var issuer = child.issuer;\n          var subject = cert.subject;\n          var error = new Error(\n            \"The parent certificate did not issue the given child certificate; the child certificate's issuer does not match the parent's subject.\"\n          );\n          error.expectedIssuer = subject.attributes;\n          error.actualIssuer = issuer.attributes;\n          throw error;\n        }\n        var md = child.md;\n        if (md === null) {\n          md = _createSignatureDigest({\n            signatureOid: child.signatureOid,\n            type: \"certificate\"\n          });\n          var tbsCertificate = child.tbsCertificate || pki2.getTBSCertificate(child);\n          var bytes = asn1.toDer(tbsCertificate);\n          md.update(bytes.getBytes());\n        }\n        if (md !== null) {\n          rval = _verifySignature({\n            certificate: cert,\n            md,\n            signature: child.signature\n          });\n        }\n        return rval;\n      };\n      cert.isIssuer = function(parent) {\n        var rval = false;\n        var i = cert.issuer;\n        var s = parent.subject;\n        if (i.hash && s.hash) {\n          rval = i.hash === s.hash;\n        } else if (i.attributes.length === s.attributes.length) {\n          rval = true;\n          var iattr, sattr;\n          for (var n = 0; rval && n < i.attributes.length; ++n) {\n            iattr = i.attributes[n];\n            sattr = s.attributes[n];\n            if (iattr.type !== sattr.type || iattr.value !== sattr.value) {\n              rval = false;\n            }\n          }\n        }\n        return rval;\n      };\n      cert.issued = function(child) {\n        return child.isIssuer(cert);\n      };\n      cert.generateSubjectKeyIdentifier = function() {\n        return pki2.getPublicKeyFingerprint(cert.publicKey, { type: \"RSAPublicKey\" });\n      };\n      cert.verifySubjectKeyIdentifier = function() {\n        var oid = oids[\"subjectKeyIdentifier\"];\n        for (var i = 0; i < cert.extensions.length; ++i) {\n          var ext = cert.extensions[i];\n          if (ext.id === oid) {\n            var ski = cert.generateSubjectKeyIdentifier().getBytes();\n            return forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski;\n          }\n        }\n        return false;\n      };\n      return cert;\n    };\n    pki2.certificateFromAsn1 = function(obj, computeHash) {\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(obj, x509CertificateValidator, capture, errors)) {\n        var error = new Error(\"Cannot read X.509 certificate. ASN.1 object is not an X509v3 Certificate.\");\n        error.errors = errors;\n        throw error;\n      }\n      var oid = asn1.derToOid(capture.publicKeyOid);\n      if (oid !== pki2.oids.rsaEncryption) {\n        throw new Error(\"Cannot read public key. OID is not RSA.\");\n      }\n      var cert = pki2.createCertificate();\n      cert.version = capture.certVersion ? capture.certVersion.charCodeAt(0) : 0;\n      var serial = forge.util.createBuffer(capture.certSerialNumber);\n      cert.serialNumber = serial.toHex();\n      cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);\n      cert.signatureParameters = _readSignatureParameters(\n        cert.signatureOid,\n        capture.certSignatureParams,\n        true\n      );\n      cert.siginfo.algorithmOid = forge.asn1.derToOid(capture.certinfoSignatureOid);\n      cert.siginfo.parameters = _readSignatureParameters(\n        cert.siginfo.algorithmOid,\n        capture.certinfoSignatureParams,\n        false\n      );\n      cert.signature = capture.certSignature;\n      var validity = [];\n      if (capture.certValidity1UTCTime !== void 0) {\n        validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));\n      }\n      if (capture.certValidity2GeneralizedTime !== void 0) {\n        validity.push(asn1.generalizedTimeToDate(\n          capture.certValidity2GeneralizedTime\n        ));\n      }\n      if (capture.certValidity3UTCTime !== void 0) {\n        validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));\n      }\n      if (capture.certValidity4GeneralizedTime !== void 0) {\n        validity.push(asn1.generalizedTimeToDate(\n          capture.certValidity4GeneralizedTime\n        ));\n      }\n      if (validity.length > 2) {\n        throw new Error(\"Cannot read notBefore/notAfter validity times; more than two times were provided in the certificate.\");\n      }\n      if (validity.length < 2) {\n        throw new Error(\"Cannot read notBefore/notAfter validity times; they were not provided as either UTCTime or GeneralizedTime.\");\n      }\n      cert.validity.notBefore = validity[0];\n      cert.validity.notAfter = validity[1];\n      cert.tbsCertificate = capture.tbsCertificate;\n      if (computeHash) {\n        cert.md = _createSignatureDigest({\n          signatureOid: cert.signatureOid,\n          type: \"certificate\"\n        });\n        var bytes = asn1.toDer(cert.tbsCertificate);\n        cert.md.update(bytes.getBytes());\n      }\n      var imd = forge.md.sha1.create();\n      var ibytes = asn1.toDer(capture.certIssuer);\n      imd.update(ibytes.getBytes());\n      cert.issuer.getField = function(sn) {\n        return _getAttribute(cert.issuer, sn);\n      };\n      cert.issuer.addField = function(attr) {\n        _fillMissingFields([attr]);\n        cert.issuer.attributes.push(attr);\n      };\n      cert.issuer.attributes = pki2.RDNAttributesAsArray(capture.certIssuer);\n      if (capture.certIssuerUniqueId) {\n        cert.issuer.uniqueId = capture.certIssuerUniqueId;\n      }\n      cert.issuer.hash = imd.digest().toHex();\n      var smd = forge.md.sha1.create();\n      var sbytes = asn1.toDer(capture.certSubject);\n      smd.update(sbytes.getBytes());\n      cert.subject.getField = function(sn) {\n        return _getAttribute(cert.subject, sn);\n      };\n      cert.subject.addField = function(attr) {\n        _fillMissingFields([attr]);\n        cert.subject.attributes.push(attr);\n      };\n      cert.subject.attributes = pki2.RDNAttributesAsArray(capture.certSubject);\n      if (capture.certSubjectUniqueId) {\n        cert.subject.uniqueId = capture.certSubjectUniqueId;\n      }\n      cert.subject.hash = smd.digest().toHex();\n      if (capture.certExtensions) {\n        cert.extensions = pki2.certificateExtensionsFromAsn1(capture.certExtensions);\n      } else {\n        cert.extensions = [];\n      }\n      cert.publicKey = pki2.publicKeyFromAsn1(capture.subjectPublicKeyInfo);\n      return cert;\n    };\n    pki2.certificateExtensionsFromAsn1 = function(exts) {\n      var rval = [];\n      for (var i = 0; i < exts.value.length; ++i) {\n        var extseq = exts.value[i];\n        for (var ei = 0; ei < extseq.value.length; ++ei) {\n          rval.push(pki2.certificateExtensionFromAsn1(extseq.value[ei]));\n        }\n      }\n      return rval;\n    };\n    pki2.certificateExtensionFromAsn1 = function(ext) {\n      var e = {};\n      e.id = asn1.derToOid(ext.value[0].value);\n      e.critical = false;\n      if (ext.value[1].type === asn1.Type.BOOLEAN) {\n        e.critical = ext.value[1].value.charCodeAt(0) !== 0;\n        e.value = ext.value[2].value;\n      } else {\n        e.value = ext.value[1].value;\n      }\n      if (e.id in oids) {\n        e.name = oids[e.id];\n        if (e.name === \"keyUsage\") {\n          var ev = asn1.fromDer(e.value);\n          var b2 = 0;\n          var b3 = 0;\n          if (ev.value.length > 1) {\n            b2 = ev.value.charCodeAt(1);\n            b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;\n          }\n          e.digitalSignature = (b2 & 128) === 128;\n          e.nonRepudiation = (b2 & 64) === 64;\n          e.keyEncipherment = (b2 & 32) === 32;\n          e.dataEncipherment = (b2 & 16) === 16;\n          e.keyAgreement = (b2 & 8) === 8;\n          e.keyCertSign = (b2 & 4) === 4;\n          e.cRLSign = (b2 & 2) === 2;\n          e.encipherOnly = (b2 & 1) === 1;\n          e.decipherOnly = (b3 & 128) === 128;\n        } else if (e.name === \"basicConstraints\") {\n          var ev = asn1.fromDer(e.value);\n          if (ev.value.length > 0 && ev.value[0].type === asn1.Type.BOOLEAN) {\n            e.cA = ev.value[0].value.charCodeAt(0) !== 0;\n          } else {\n            e.cA = false;\n          }\n          var value = null;\n          if (ev.value.length > 0 && ev.value[0].type === asn1.Type.INTEGER) {\n            value = ev.value[0].value;\n          } else if (ev.value.length > 1) {\n            value = ev.value[1].value;\n          }\n          if (value !== null) {\n            e.pathLenConstraint = asn1.derToInteger(value);\n          }\n        } else if (e.name === \"extKeyUsage\") {\n          var ev = asn1.fromDer(e.value);\n          for (var vi = 0; vi < ev.value.length; ++vi) {\n            var oid = asn1.derToOid(ev.value[vi].value);\n            if (oid in oids) {\n              e[oids[oid]] = true;\n            } else {\n              e[oid] = true;\n            }\n          }\n        } else if (e.name === \"nsCertType\") {\n          var ev = asn1.fromDer(e.value);\n          var b2 = 0;\n          if (ev.value.length > 1) {\n            b2 = ev.value.charCodeAt(1);\n          }\n          e.client = (b2 & 128) === 128;\n          e.server = (b2 & 64) === 64;\n          e.email = (b2 & 32) === 32;\n          e.objsign = (b2 & 16) === 16;\n          e.reserved = (b2 & 8) === 8;\n          e.sslCA = (b2 & 4) === 4;\n          e.emailCA = (b2 & 2) === 2;\n          e.objCA = (b2 & 1) === 1;\n        } else if (e.name === \"subjectAltName\" || e.name === \"issuerAltName\") {\n          e.altNames = [];\n          var gn;\n          var ev = asn1.fromDer(e.value);\n          for (var n = 0; n < ev.value.length; ++n) {\n            gn = ev.value[n];\n            var altName = {\n              type: gn.type,\n              value: gn.value\n            };\n            e.altNames.push(altName);\n            switch (gn.type) {\n              case 1:\n              case 2:\n              case 6:\n                break;\n              case 7:\n                altName.ip = forge.util.bytesToIP(gn.value);\n                break;\n              case 8:\n                altName.oid = asn1.derToOid(gn.value);\n                break;\n              default:\n            }\n          }\n        } else if (e.name === \"subjectKeyIdentifier\") {\n          var ev = asn1.fromDer(e.value);\n          e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);\n        }\n      }\n      return e;\n    };\n    pki2.certificationRequestFromAsn1 = function(obj, computeHash) {\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(obj, certificationRequestValidator, capture, errors)) {\n        var error = new Error(\"Cannot read PKCS#10 certificate request. ASN.1 object is not a PKCS#10 CertificationRequest.\");\n        error.errors = errors;\n        throw error;\n      }\n      var oid = asn1.derToOid(capture.publicKeyOid);\n      if (oid !== pki2.oids.rsaEncryption) {\n        throw new Error(\"Cannot read public key. OID is not RSA.\");\n      }\n      var csr = pki2.createCertificationRequest();\n      csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;\n      csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);\n      csr.signatureParameters = _readSignatureParameters(\n        csr.signatureOid,\n        capture.csrSignatureParams,\n        true\n      );\n      csr.siginfo.algorithmOid = forge.asn1.derToOid(capture.csrSignatureOid);\n      csr.siginfo.parameters = _readSignatureParameters(\n        csr.siginfo.algorithmOid,\n        capture.csrSignatureParams,\n        false\n      );\n      csr.signature = capture.csrSignature;\n      csr.certificationRequestInfo = capture.certificationRequestInfo;\n      if (computeHash) {\n        csr.md = _createSignatureDigest({\n          signatureOid: csr.signatureOid,\n          type: \"certification request\"\n        });\n        var bytes = asn1.toDer(csr.certificationRequestInfo);\n        csr.md.update(bytes.getBytes());\n      }\n      var smd = forge.md.sha1.create();\n      csr.subject.getField = function(sn) {\n        return _getAttribute(csr.subject, sn);\n      };\n      csr.subject.addField = function(attr) {\n        _fillMissingFields([attr]);\n        csr.subject.attributes.push(attr);\n      };\n      csr.subject.attributes = pki2.RDNAttributesAsArray(\n        capture.certificationRequestInfoSubject,\n        smd\n      );\n      csr.subject.hash = smd.digest().toHex();\n      csr.publicKey = pki2.publicKeyFromAsn1(capture.subjectPublicKeyInfo);\n      csr.getAttribute = function(sn) {\n        return _getAttribute(csr, sn);\n      };\n      csr.addAttribute = function(attr) {\n        _fillMissingFields([attr]);\n        csr.attributes.push(attr);\n      };\n      csr.attributes = pki2.CRIAttributesAsArray(\n        capture.certificationRequestInfoAttributes || []\n      );\n      return csr;\n    };\n    pki2.createCertificationRequest = function() {\n      var csr = {};\n      csr.version = 0;\n      csr.signatureOid = null;\n      csr.signature = null;\n      csr.siginfo = {};\n      csr.siginfo.algorithmOid = null;\n      csr.subject = {};\n      csr.subject.getField = function(sn) {\n        return _getAttribute(csr.subject, sn);\n      };\n      csr.subject.addField = function(attr) {\n        _fillMissingFields([attr]);\n        csr.subject.attributes.push(attr);\n      };\n      csr.subject.attributes = [];\n      csr.subject.hash = null;\n      csr.publicKey = null;\n      csr.attributes = [];\n      csr.getAttribute = function(sn) {\n        return _getAttribute(csr, sn);\n      };\n      csr.addAttribute = function(attr) {\n        _fillMissingFields([attr]);\n        csr.attributes.push(attr);\n      };\n      csr.md = null;\n      csr.setSubject = function(attrs) {\n        _fillMissingFields(attrs);\n        csr.subject.attributes = attrs;\n        csr.subject.hash = null;\n      };\n      csr.setAttributes = function(attrs) {\n        _fillMissingFields(attrs);\n        csr.attributes = attrs;\n      };\n      csr.sign = function(key, md) {\n        csr.md = md || forge.md.sha1.create();\n        var algorithmOid = oids[csr.md.algorithm + \"WithRSAEncryption\"];\n        if (!algorithmOid) {\n          var error = new Error(\"Could not compute certification request digest. Unknown message digest algorithm OID.\");\n          error.algorithm = csr.md.algorithm;\n          throw error;\n        }\n        csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid;\n        csr.certificationRequestInfo = pki2.getCertificationRequestInfo(csr);\n        var bytes = asn1.toDer(csr.certificationRequestInfo);\n        csr.md.update(bytes.getBytes());\n        csr.signature = key.sign(csr.md);\n      };\n      csr.verify = function() {\n        var rval = false;\n        var md = csr.md;\n        if (md === null) {\n          md = _createSignatureDigest({\n            signatureOid: csr.signatureOid,\n            type: \"certification request\"\n          });\n          var cri = csr.certificationRequestInfo || pki2.getCertificationRequestInfo(csr);\n          var bytes = asn1.toDer(cri);\n          md.update(bytes.getBytes());\n        }\n        if (md !== null) {\n          rval = _verifySignature({\n            certificate: csr,\n            md,\n            signature: csr.signature\n          });\n        }\n        return rval;\n      };\n      return csr;\n    };\n    function _dnToAsn1(obj) {\n      var rval = asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.SEQUENCE,\n        true,\n        []\n      );\n      var attr, set;\n      var attrs = obj.attributes;\n      for (var i = 0; i < attrs.length; ++i) {\n        attr = attrs[i];\n        var value = attr.value;\n        var valueTagClass = asn1.Type.PRINTABLESTRING;\n        if (\"valueTagClass\" in attr) {\n          valueTagClass = attr.valueTagClass;\n          if (valueTagClass === asn1.Type.UTF8) {\n            value = forge.util.encodeUtf8(value);\n          }\n        }\n        set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // AttributeType\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(attr.type).getBytes()\n            ),\n            // AttributeValue\n            asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)\n          ])\n        ]);\n        rval.value.push(set);\n      }\n      return rval;\n    }\n    function _fillMissingFields(attrs) {\n      var attr;\n      for (var i = 0; i < attrs.length; ++i) {\n        attr = attrs[i];\n        if (typeof attr.name === \"undefined\") {\n          if (attr.type && attr.type in pki2.oids) {\n            attr.name = pki2.oids[attr.type];\n          } else if (attr.shortName && attr.shortName in _shortNames) {\n            attr.name = pki2.oids[_shortNames[attr.shortName]];\n          }\n        }\n        if (typeof attr.type === \"undefined\") {\n          if (attr.name && attr.name in pki2.oids) {\n            attr.type = pki2.oids[attr.name];\n          } else {\n            var error = new Error(\"Attribute type not specified.\");\n            error.attribute = attr;\n            throw error;\n          }\n        }\n        if (typeof attr.shortName === \"undefined\") {\n          if (attr.name && attr.name in _shortNames) {\n            attr.shortName = _shortNames[attr.name];\n          }\n        }\n        if (attr.type === oids.extensionRequest) {\n          attr.valueConstructed = true;\n          attr.valueTagClass = asn1.Type.SEQUENCE;\n          if (!attr.value && attr.extensions) {\n            attr.value = [];\n            for (var ei = 0; ei < attr.extensions.length; ++ei) {\n              attr.value.push(pki2.certificateExtensionToAsn1(\n                _fillMissingExtensionFields(attr.extensions[ei])\n              ));\n            }\n          }\n        }\n        if (typeof attr.value === \"undefined\") {\n          var error = new Error(\"Attribute value not specified.\");\n          error.attribute = attr;\n          throw error;\n        }\n      }\n    }\n    function _fillMissingExtensionFields(e, options) {\n      options = options || {};\n      if (typeof e.name === \"undefined\") {\n        if (e.id && e.id in pki2.oids) {\n          e.name = pki2.oids[e.id];\n        }\n      }\n      if (typeof e.id === \"undefined\") {\n        if (e.name && e.name in pki2.oids) {\n          e.id = pki2.oids[e.name];\n        } else {\n          var error = new Error(\"Extension ID not specified.\");\n          error.extension = e;\n          throw error;\n        }\n      }\n      if (typeof e.value !== \"undefined\") {\n        return e;\n      }\n      if (e.name === \"keyUsage\") {\n        var unused = 0;\n        var b2 = 0;\n        var b3 = 0;\n        if (e.digitalSignature) {\n          b2 |= 128;\n          unused = 7;\n        }\n        if (e.nonRepudiation) {\n          b2 |= 64;\n          unused = 6;\n        }\n        if (e.keyEncipherment) {\n          b2 |= 32;\n          unused = 5;\n        }\n        if (e.dataEncipherment) {\n          b2 |= 16;\n          unused = 4;\n        }\n        if (e.keyAgreement) {\n          b2 |= 8;\n          unused = 3;\n        }\n        if (e.keyCertSign) {\n          b2 |= 4;\n          unused = 2;\n        }\n        if (e.cRLSign) {\n          b2 |= 2;\n          unused = 1;\n        }\n        if (e.encipherOnly) {\n          b2 |= 1;\n          unused = 0;\n        }\n        if (e.decipherOnly) {\n          b3 |= 128;\n          unused = 7;\n        }\n        var value = String.fromCharCode(unused);\n        if (b3 !== 0) {\n          value += String.fromCharCode(b2) + String.fromCharCode(b3);\n        } else if (b2 !== 0) {\n          value += String.fromCharCode(b2);\n        }\n        e.value = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.BITSTRING,\n          false,\n          value\n        );\n      } else if (e.name === \"basicConstraints\") {\n        e.value = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.SEQUENCE,\n          true,\n          []\n        );\n        if (e.cA) {\n          e.value.value.push(asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.BOOLEAN,\n            false,\n            String.fromCharCode(255)\n          ));\n        }\n        if (\"pathLenConstraint\" in e) {\n          e.value.value.push(asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.INTEGER,\n            false,\n            asn1.integerToDer(e.pathLenConstraint).getBytes()\n          ));\n        }\n      } else if (e.name === \"extKeyUsage\") {\n        e.value = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.SEQUENCE,\n          true,\n          []\n        );\n        var seq = e.value.value;\n        for (var key in e) {\n          if (e[key] !== true) {\n            continue;\n          }\n          if (key in oids) {\n            seq.push(asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(oids[key]).getBytes()\n            ));\n          } else if (key.indexOf(\".\") !== -1) {\n            seq.push(asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(key).getBytes()\n            ));\n          }\n        }\n      } else if (e.name === \"nsCertType\") {\n        var unused = 0;\n        var b2 = 0;\n        if (e.client) {\n          b2 |= 128;\n          unused = 7;\n        }\n        if (e.server) {\n          b2 |= 64;\n          unused = 6;\n        }\n        if (e.email) {\n          b2 |= 32;\n          unused = 5;\n        }\n        if (e.objsign) {\n          b2 |= 16;\n          unused = 4;\n        }\n        if (e.reserved) {\n          b2 |= 8;\n          unused = 3;\n        }\n        if (e.sslCA) {\n          b2 |= 4;\n          unused = 2;\n        }\n        if (e.emailCA) {\n          b2 |= 2;\n          unused = 1;\n        }\n        if (e.objCA) {\n          b2 |= 1;\n          unused = 0;\n        }\n        var value = String.fromCharCode(unused);\n        if (b2 !== 0) {\n          value += String.fromCharCode(b2);\n        }\n        e.value = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.BITSTRING,\n          false,\n          value\n        );\n      } else if (e.name === \"subjectAltName\" || e.name === \"issuerAltName\") {\n        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n        var altName;\n        for (var n = 0; n < e.altNames.length; ++n) {\n          altName = e.altNames[n];\n          var value = altName.value;\n          if (altName.type === 7 && altName.ip) {\n            value = forge.util.bytesFromIP(altName.ip);\n            if (value === null) {\n              var error = new Error(\n                'Extension \"ip\" value is not a valid IPv4 or IPv6 address.'\n              );\n              error.extension = e;\n              throw error;\n            }\n          } else if (altName.type === 8) {\n            if (altName.oid) {\n              value = asn1.oidToDer(asn1.oidToDer(altName.oid));\n            } else {\n              value = asn1.oidToDer(value);\n            }\n          }\n          e.value.value.push(asn1.create(\n            asn1.Class.CONTEXT_SPECIFIC,\n            altName.type,\n            false,\n            value\n          ));\n        }\n      } else if (e.name === \"nsComment\" && options.cert) {\n        if (!/^[\\x00-\\x7F]*$/.test(e.comment) || e.comment.length < 1 || e.comment.length > 128) {\n          throw new Error('Invalid \"nsComment\" content.');\n        }\n        e.value = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.IA5STRING,\n          false,\n          e.comment\n        );\n      } else if (e.name === \"subjectKeyIdentifier\" && options.cert) {\n        var ski = options.cert.generateSubjectKeyIdentifier();\n        e.subjectKeyIdentifier = ski.toHex();\n        e.value = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OCTETSTRING,\n          false,\n          ski.getBytes()\n        );\n      } else if (e.name === \"authorityKeyIdentifier\" && options.cert) {\n        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n        var seq = e.value.value;\n        if (e.keyIdentifier) {\n          var keyIdentifier = e.keyIdentifier === true ? options.cert.generateSubjectKeyIdentifier().getBytes() : e.keyIdentifier;\n          seq.push(\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, false, keyIdentifier)\n          );\n        }\n        if (e.authorityCertIssuer) {\n          var authorityCertIssuer = [\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 4, true, [\n              _dnToAsn1(e.authorityCertIssuer === true ? options.cert.issuer : e.authorityCertIssuer)\n            ])\n          ];\n          seq.push(\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, authorityCertIssuer)\n          );\n        }\n        if (e.serialNumber) {\n          var serialNumber = forge.util.hexToBytes(e.serialNumber === true ? options.cert.serialNumber : e.serialNumber);\n          seq.push(\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, false, serialNumber)\n          );\n        }\n      } else if (e.name === \"cRLDistributionPoints\") {\n        e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n        var seq = e.value.value;\n        var subSeq = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.SEQUENCE,\n          true,\n          []\n        );\n        var fullNameGeneralNames = asn1.create(\n          asn1.Class.CONTEXT_SPECIFIC,\n          0,\n          true,\n          []\n        );\n        var altName;\n        for (var n = 0; n < e.altNames.length; ++n) {\n          altName = e.altNames[n];\n          var value = altName.value;\n          if (altName.type === 7 && altName.ip) {\n            value = forge.util.bytesFromIP(altName.ip);\n            if (value === null) {\n              var error = new Error(\n                'Extension \"ip\" value is not a valid IPv4 or IPv6 address.'\n              );\n              error.extension = e;\n              throw error;\n            }\n          } else if (altName.type === 8) {\n            if (altName.oid) {\n              value = asn1.oidToDer(asn1.oidToDer(altName.oid));\n            } else {\n              value = asn1.oidToDer(value);\n            }\n          }\n          fullNameGeneralNames.value.push(asn1.create(\n            asn1.Class.CONTEXT_SPECIFIC,\n            altName.type,\n            false,\n            value\n          ));\n        }\n        subSeq.value.push(asn1.create(\n          asn1.Class.CONTEXT_SPECIFIC,\n          0,\n          true,\n          [fullNameGeneralNames]\n        ));\n        seq.push(subSeq);\n      }\n      if (typeof e.value === \"undefined\") {\n        var error = new Error(\"Extension value not specified.\");\n        error.extension = e;\n        throw error;\n      }\n      return e;\n    }\n    function _signatureParametersToAsn1(oid, params) {\n      switch (oid) {\n        case oids[\"RSASSA-PSS\"]:\n          var parts = [];\n          if (params.hash.algorithmOid !== void 0) {\n            parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.OID,\n                  false,\n                  asn1.oidToDer(params.hash.algorithmOid).getBytes()\n                ),\n                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n              ])\n            ]));\n          }\n          if (params.mgf.algorithmOid !== void 0) {\n            parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.OID,\n                  false,\n                  asn1.oidToDer(params.mgf.algorithmOid).getBytes()\n                ),\n                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                  asn1.create(\n                    asn1.Class.UNIVERSAL,\n                    asn1.Type.OID,\n                    false,\n                    asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()\n                  ),\n                  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n                ])\n              ])\n            ]));\n          }\n          if (params.saltLength !== void 0) {\n            parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.INTEGER,\n                false,\n                asn1.integerToDer(params.saltLength).getBytes()\n              )\n            ]));\n          }\n          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, parts);\n        default:\n          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\");\n      }\n    }\n    function _CRIAttributesToAsn1(csr) {\n      var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);\n      if (csr.attributes.length === 0) {\n        return rval;\n      }\n      var attrs = csr.attributes;\n      for (var i = 0; i < attrs.length; ++i) {\n        var attr = attrs[i];\n        var value = attr.value;\n        var valueTagClass = asn1.Type.UTF8;\n        if (\"valueTagClass\" in attr) {\n          valueTagClass = attr.valueTagClass;\n        }\n        if (valueTagClass === asn1.Type.UTF8) {\n          value = forge.util.encodeUtf8(value);\n        }\n        var valueConstructed = false;\n        if (\"valueConstructed\" in attr) {\n          valueConstructed = attr.valueConstructed;\n        }\n        var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // AttributeType\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(attr.type).getBytes()\n          ),\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n            // AttributeValue\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              valueTagClass,\n              valueConstructed,\n              value\n            )\n          ])\n        ]);\n        rval.value.push(seq);\n      }\n      return rval;\n    }\n    var jan_1_1950 = /* @__PURE__ */ new Date(\"1950-01-01T00:00:00Z\");\n    var jan_1_2050 = /* @__PURE__ */ new Date(\"2050-01-01T00:00:00Z\");\n    function _dateToAsn1(date) {\n      if (date >= jan_1_1950 && date < jan_1_2050) {\n        return asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.UTCTIME,\n          false,\n          asn1.dateToUtcTime(date)\n        );\n      } else {\n        return asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.GENERALIZEDTIME,\n          false,\n          asn1.dateToGeneralizedTime(date)\n        );\n      }\n    }\n    pki2.getTBSCertificate = function(cert) {\n      var notBefore = _dateToAsn1(cert.validity.notBefore);\n      var notAfter = _dateToAsn1(cert.validity.notAfter);\n      var tbs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // version\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          // integer\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.INTEGER,\n            false,\n            asn1.integerToDer(cert.version).getBytes()\n          )\n        ]),\n        // serialNumber\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          forge.util.hexToBytes(cert.serialNumber)\n        ),\n        // signature\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // algorithm\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()\n          ),\n          // parameters\n          _signatureParametersToAsn1(\n            cert.siginfo.algorithmOid,\n            cert.siginfo.parameters\n          )\n        ]),\n        // issuer\n        _dnToAsn1(cert.issuer),\n        // validity\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          notBefore,\n          notAfter\n        ]),\n        // subject\n        _dnToAsn1(cert.subject),\n        // SubjectPublicKeyInfo\n        pki2.publicKeyToAsn1(cert.publicKey)\n      ]);\n      if (cert.issuer.uniqueId) {\n        tbs.value.push(\n          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.BITSTRING,\n              false,\n              // TODO: support arbitrary bit length ids\n              String.fromCharCode(0) + cert.issuer.uniqueId\n            )\n          ])\n        );\n      }\n      if (cert.subject.uniqueId) {\n        tbs.value.push(\n          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.BITSTRING,\n              false,\n              // TODO: support arbitrary bit length ids\n              String.fromCharCode(0) + cert.subject.uniqueId\n            )\n          ])\n        );\n      }\n      if (cert.extensions.length > 0) {\n        tbs.value.push(pki2.certificateExtensionsToAsn1(cert.extensions));\n      }\n      return tbs;\n    };\n    pki2.getCertificationRequestInfo = function(csr) {\n      var cri = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // version\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          asn1.integerToDer(csr.version).getBytes()\n        ),\n        // subject\n        _dnToAsn1(csr.subject),\n        // SubjectPublicKeyInfo\n        pki2.publicKeyToAsn1(csr.publicKey),\n        // attributes\n        _CRIAttributesToAsn1(csr)\n      ]);\n      return cri;\n    };\n    pki2.distinguishedNameToAsn1 = function(dn) {\n      return _dnToAsn1(dn);\n    };\n    pki2.certificateToAsn1 = function(cert) {\n      var tbsCertificate = cert.tbsCertificate || pki2.getTBSCertificate(cert);\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // TBSCertificate\n        tbsCertificate,\n        // AlgorithmIdentifier (signature algorithm)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // algorithm\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(cert.signatureOid).getBytes()\n          ),\n          // parameters\n          _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)\n        ]),\n        // SignatureValue\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.BITSTRING,\n          false,\n          String.fromCharCode(0) + cert.signature\n        )\n      ]);\n    };\n    pki2.certificateExtensionsToAsn1 = function(exts) {\n      var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []);\n      var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n      rval.value.push(seq);\n      for (var i = 0; i < exts.length; ++i) {\n        seq.value.push(pki2.certificateExtensionToAsn1(exts[i]));\n      }\n      return rval;\n    };\n    pki2.certificateExtensionToAsn1 = function(ext) {\n      var extseq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n      extseq.value.push(asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.OID,\n        false,\n        asn1.oidToDer(ext.id).getBytes()\n      ));\n      if (ext.critical) {\n        extseq.value.push(asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.BOOLEAN,\n          false,\n          String.fromCharCode(255)\n        ));\n      }\n      var value = ext.value;\n      if (typeof ext.value !== \"string\") {\n        value = asn1.toDer(value).getBytes();\n      }\n      extseq.value.push(asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.OCTETSTRING,\n        false,\n        value\n      ));\n      return extseq;\n    };\n    pki2.certificationRequestToAsn1 = function(csr) {\n      var cri = csr.certificationRequestInfo || pki2.getCertificationRequestInfo(csr);\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // CertificationRequestInfo\n        cri,\n        // AlgorithmIdentifier (signature algorithm)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // algorithm\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(csr.signatureOid).getBytes()\n          ),\n          // parameters\n          _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)\n        ]),\n        // signature\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.BITSTRING,\n          false,\n          String.fromCharCode(0) + csr.signature\n        )\n      ]);\n    };\n    pki2.createCaStore = function(certs) {\n      var caStore = {\n        // stored certificates\n        certs: {}\n      };\n      caStore.getIssuer = function(cert2) {\n        var rval = getBySubject(cert2.issuer);\n        return rval;\n      };\n      caStore.addCertificate = function(cert2) {\n        if (typeof cert2 === \"string\") {\n          cert2 = forge.pki.certificateFromPem(cert2);\n        }\n        ensureSubjectHasHash(cert2.subject);\n        if (!caStore.hasCertificate(cert2)) {\n          if (cert2.subject.hash in caStore.certs) {\n            var tmp = caStore.certs[cert2.subject.hash];\n            if (!forge.util.isArray(tmp)) {\n              tmp = [tmp];\n            }\n            tmp.push(cert2);\n            caStore.certs[cert2.subject.hash] = tmp;\n          } else {\n            caStore.certs[cert2.subject.hash] = cert2;\n          }\n        }\n      };\n      caStore.hasCertificate = function(cert2) {\n        if (typeof cert2 === \"string\") {\n          cert2 = forge.pki.certificateFromPem(cert2);\n        }\n        var match = getBySubject(cert2.subject);\n        if (!match) {\n          return false;\n        }\n        if (!forge.util.isArray(match)) {\n          match = [match];\n        }\n        var der1 = asn1.toDer(pki2.certificateToAsn1(cert2)).getBytes();\n        for (var i2 = 0; i2 < match.length; ++i2) {\n          var der2 = asn1.toDer(pki2.certificateToAsn1(match[i2])).getBytes();\n          if (der1 === der2) {\n            return true;\n          }\n        }\n        return false;\n      };\n      caStore.listAllCertificates = function() {\n        var certList = [];\n        for (var hash2 in caStore.certs) {\n          if (caStore.certs.hasOwnProperty(hash2)) {\n            var value = caStore.certs[hash2];\n            if (!forge.util.isArray(value)) {\n              certList.push(value);\n            } else {\n              for (var i2 = 0; i2 < value.length; ++i2) {\n                certList.push(value[i2]);\n              }\n            }\n          }\n        }\n        return certList;\n      };\n      caStore.removeCertificate = function(cert2) {\n        var result;\n        if (typeof cert2 === \"string\") {\n          cert2 = forge.pki.certificateFromPem(cert2);\n        }\n        ensureSubjectHasHash(cert2.subject);\n        if (!caStore.hasCertificate(cert2)) {\n          return null;\n        }\n        var match = getBySubject(cert2.subject);\n        if (!forge.util.isArray(match)) {\n          result = caStore.certs[cert2.subject.hash];\n          delete caStore.certs[cert2.subject.hash];\n          return result;\n        }\n        var der1 = asn1.toDer(pki2.certificateToAsn1(cert2)).getBytes();\n        for (var i2 = 0; i2 < match.length; ++i2) {\n          var der2 = asn1.toDer(pki2.certificateToAsn1(match[i2])).getBytes();\n          if (der1 === der2) {\n            result = match[i2];\n            match.splice(i2, 1);\n          }\n        }\n        if (match.length === 0) {\n          delete caStore.certs[cert2.subject.hash];\n        }\n        return result;\n      };\n      function getBySubject(subject) {\n        ensureSubjectHasHash(subject);\n        return caStore.certs[subject.hash] || null;\n      }\n      function ensureSubjectHasHash(subject) {\n        if (!subject.hash) {\n          var md = forge.md.sha1.create();\n          subject.attributes = pki2.RDNAttributesAsArray(_dnToAsn1(subject), md);\n          subject.hash = md.digest().toHex();\n        }\n      }\n      if (certs) {\n        for (var i = 0; i < certs.length; ++i) {\n          var cert = certs[i];\n          caStore.addCertificate(cert);\n        }\n      }\n      return caStore;\n    };\n    pki2.certificateError = {\n      bad_certificate: \"forge.pki.BadCertificate\",\n      unsupported_certificate: \"forge.pki.UnsupportedCertificate\",\n      certificate_revoked: \"forge.pki.CertificateRevoked\",\n      certificate_expired: \"forge.pki.CertificateExpired\",\n      certificate_unknown: \"forge.pki.CertificateUnknown\",\n      unknown_ca: \"forge.pki.UnknownCertificateAuthority\"\n    };\n    pki2.verifyCertificateChain = function(caStore, chain, options) {\n      if (typeof options === \"function\") {\n        options = { verify: options };\n      }\n      options = options || {};\n      chain = chain.slice(0);\n      var certs = chain.slice(0);\n      var validityCheckDate = options.validityCheckDate;\n      if (typeof validityCheckDate === \"undefined\") {\n        validityCheckDate = /* @__PURE__ */ new Date();\n      }\n      var first = true;\n      var error = null;\n      var depth = 0;\n      do {\n        var cert = chain.shift();\n        var parent = null;\n        var selfSigned = false;\n        if (validityCheckDate) {\n          if (validityCheckDate < cert.validity.notBefore || validityCheckDate > cert.validity.notAfter) {\n            error = {\n              message: \"Certificate is not valid yet or has expired.\",\n              error: pki2.certificateError.certificate_expired,\n              notBefore: cert.validity.notBefore,\n              notAfter: cert.validity.notAfter,\n              // TODO: we might want to reconsider renaming 'now' to\n              // 'validityCheckDate' should this API be changed in the future.\n              now: validityCheckDate\n            };\n          }\n        }\n        if (error === null) {\n          parent = chain[0] || caStore.getIssuer(cert);\n          if (parent === null) {\n            if (cert.isIssuer(cert)) {\n              selfSigned = true;\n              parent = cert;\n            }\n          }\n          if (parent) {\n            var parents = parent;\n            if (!forge.util.isArray(parents)) {\n              parents = [parents];\n            }\n            var verified = false;\n            while (!verified && parents.length > 0) {\n              parent = parents.shift();\n              try {\n                verified = parent.verify(cert);\n              } catch (ex) {\n              }\n            }\n            if (!verified) {\n              error = {\n                message: \"Certificate signature is invalid.\",\n                error: pki2.certificateError.bad_certificate\n              };\n            }\n          }\n          if (error === null && (!parent || selfSigned) && !caStore.hasCertificate(cert)) {\n            error = {\n              message: \"Certificate is not trusted.\",\n              error: pki2.certificateError.unknown_ca\n            };\n          }\n        }\n        if (error === null && parent && !cert.isIssuer(parent)) {\n          error = {\n            message: \"Certificate issuer is invalid.\",\n            error: pki2.certificateError.bad_certificate\n          };\n        }\n        if (error === null) {\n          var se = {\n            keyUsage: true,\n            basicConstraints: true\n          };\n          for (var i = 0; error === null && i < cert.extensions.length; ++i) {\n            var ext = cert.extensions[i];\n            if (ext.critical && !(ext.name in se)) {\n              error = {\n                message: \"Certificate has an unsupported critical extension.\",\n                error: pki2.certificateError.unsupported_certificate\n              };\n            }\n          }\n        }\n        if (error === null && (!first || chain.length === 0 && (!parent || selfSigned))) {\n          var bcExt = cert.getExtension(\"basicConstraints\");\n          var keyUsageExt = cert.getExtension(\"keyUsage\");\n          if (keyUsageExt !== null) {\n            if (!keyUsageExt.keyCertSign || bcExt === null) {\n              error = {\n                message: \"Certificate keyUsage or basicConstraints conflict or indicate that the certificate is not a CA. If the certificate is the only one in the chain or isn't the first then the certificate must be a valid CA.\",\n                error: pki2.certificateError.bad_certificate\n              };\n            }\n          }\n          if (error === null && bcExt !== null && !bcExt.cA) {\n            error = {\n              message: \"Certificate basicConstraints indicates the certificate is not a CA.\",\n              error: pki2.certificateError.bad_certificate\n            };\n          }\n          if (error === null && keyUsageExt !== null && \"pathLenConstraint\" in bcExt) {\n            var pathLen = depth - 1;\n            if (pathLen > bcExt.pathLenConstraint) {\n              error = {\n                message: \"Certificate basicConstraints pathLenConstraint violated.\",\n                error: pki2.certificateError.bad_certificate\n              };\n            }\n          }\n        }\n        var vfd = error === null ? true : error.error;\n        var ret = options.verify ? options.verify(vfd, depth, certs) : vfd;\n        if (ret === true) {\n          error = null;\n        } else {\n          if (vfd === true) {\n            error = {\n              message: \"The application rejected the certificate.\",\n              error: pki2.certificateError.bad_certificate\n            };\n          }\n          if (ret || ret === 0) {\n            if (typeof ret === \"object\" && !forge.util.isArray(ret)) {\n              if (ret.message) {\n                error.message = ret.message;\n              }\n              if (ret.error) {\n                error.error = ret.error;\n              }\n            } else if (typeof ret === \"string\") {\n              error.error = ret;\n            }\n          }\n          throw error;\n        }\n        first = false;\n        ++depth;\n      } while (chain.length > 0);\n      return true;\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/pkcs12.js\nvar require_pkcs12 = __commonJS({\n  \"../../node_modules/node-forge/lib/pkcs12.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_asn1();\n    require_hmac();\n    require_oids();\n    require_pkcs7asn1();\n    require_pbe();\n    require_random();\n    require_rsa();\n    require_sha1();\n    require_util();\n    require_x509();\n    var asn1 = forge.asn1;\n    var pki2 = forge.pki;\n    var p12 = module2.exports = forge.pkcs12 = forge.pkcs12 || {};\n    var contentInfoValidator = {\n      name: \"ContentInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      // a ContentInfo\n      constructed: true,\n      value: [{\n        name: \"ContentInfo.contentType\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: \"contentType\"\n      }, {\n        name: \"ContentInfo.content\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        constructed: true,\n        captureAsn1: \"content\"\n      }]\n    };\n    var pfxValidator = {\n      name: \"PFX\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [\n        {\n          name: \"PFX.version\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.INTEGER,\n          constructed: false,\n          capture: \"version\"\n        },\n        contentInfoValidator,\n        {\n          name: \"PFX.macData\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SEQUENCE,\n          constructed: true,\n          optional: true,\n          captureAsn1: \"mac\",\n          value: [{\n            name: \"PFX.macData.mac\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            // DigestInfo\n            constructed: true,\n            value: [{\n              name: \"PFX.macData.mac.digestAlgorithm\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.SEQUENCE,\n              // DigestAlgorithmIdentifier\n              constructed: true,\n              value: [{\n                name: \"PFX.macData.mac.digestAlgorithm.algorithm\",\n                tagClass: asn1.Class.UNIVERSAL,\n                type: asn1.Type.OID,\n                constructed: false,\n                capture: \"macAlgorithm\"\n              }, {\n                name: \"PFX.macData.mac.digestAlgorithm.parameters\",\n                tagClass: asn1.Class.UNIVERSAL,\n                captureAsn1: \"macAlgorithmParameters\"\n              }]\n            }, {\n              name: \"PFX.macData.mac.digest\",\n              tagClass: asn1.Class.UNIVERSAL,\n              type: asn1.Type.OCTETSTRING,\n              constructed: false,\n              capture: \"macDigest\"\n            }]\n          }, {\n            name: \"PFX.macData.macSalt\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OCTETSTRING,\n            constructed: false,\n            capture: \"macSalt\"\n          }, {\n            name: \"PFX.macData.iterations\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            optional: true,\n            capture: \"macIterations\"\n          }]\n        }\n      ]\n    };\n    var safeBagValidator = {\n      name: \"SafeBag\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"SafeBag.bagId\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: \"bagId\"\n      }, {\n        name: \"SafeBag.bagValue\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        constructed: true,\n        captureAsn1: \"bagValue\"\n      }, {\n        name: \"SafeBag.bagAttributes\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SET,\n        constructed: true,\n        optional: true,\n        capture: \"bagAttributes\"\n      }]\n    };\n    var attributeValidator = {\n      name: \"Attribute\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"Attribute.attrId\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: \"oid\"\n      }, {\n        name: \"Attribute.attrValues\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SET,\n        constructed: true,\n        capture: \"values\"\n      }]\n    };\n    var certBagValidator = {\n      name: \"CertBag\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: \"CertBag.certId\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OID,\n        constructed: false,\n        capture: \"certId\"\n      }, {\n        name: \"CertBag.certValue\",\n        tagClass: asn1.Class.CONTEXT_SPECIFIC,\n        constructed: true,\n        /* So far we only support X.509 certificates (which are wrapped in\n           an OCTET STRING, hence hard code that here). */\n        value: [{\n          name: \"CertBag.certValue[0]\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Class.OCTETSTRING,\n          constructed: false,\n          capture: \"cert\"\n        }]\n      }]\n    };\n    function _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {\n      var result = [];\n      for (var i = 0; i < safeContents.length; i++) {\n        for (var j = 0; j < safeContents[i].safeBags.length; j++) {\n          var bag = safeContents[i].safeBags[j];\n          if (bagType !== void 0 && bag.type !== bagType) {\n            continue;\n          }\n          if (attrName === null) {\n            result.push(bag);\n            continue;\n          }\n          if (bag.attributes[attrName] !== void 0 && bag.attributes[attrName].indexOf(attrValue) >= 0) {\n            result.push(bag);\n          }\n        }\n      }\n      return result;\n    }\n    p12.pkcs12FromAsn1 = function(obj, strict, password) {\n      if (typeof strict === \"string\") {\n        password = strict;\n        strict = true;\n      } else if (strict === void 0) {\n        strict = true;\n      }\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(obj, pfxValidator, capture, errors)) {\n        var error = new Error(\"Cannot read PKCS#12 PFX. ASN.1 object is not an PKCS#12 PFX.\");\n        error.errors = error;\n        throw error;\n      }\n      var pfx = {\n        version: capture.version.charCodeAt(0),\n        safeContents: [],\n        /**\n         * Gets bags with matching attributes.\n         *\n         * @param filter the attributes to filter by:\n         *          [localKeyId] the localKeyId to search for.\n         *          [localKeyIdHex] the localKeyId in hex to search for.\n         *          [friendlyName] the friendly name to search for.\n         *          [bagType] bag type to narrow each attribute search by.\n         *\n         * @return a map of attribute type to an array of matching bags or, if no\n         *           attribute was given but a bag type, the map key will be the\n         *           bag type.\n         */\n        getBags: function(filter) {\n          var rval = {};\n          var localKeyId;\n          if (\"localKeyId\" in filter) {\n            localKeyId = filter.localKeyId;\n          } else if (\"localKeyIdHex\" in filter) {\n            localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);\n          }\n          if (localKeyId === void 0 && !(\"friendlyName\" in filter) && \"bagType\" in filter) {\n            rval[filter.bagType] = _getBagsByAttribute(\n              pfx.safeContents,\n              null,\n              null,\n              filter.bagType\n            );\n          }\n          if (localKeyId !== void 0) {\n            rval.localKeyId = _getBagsByAttribute(\n              pfx.safeContents,\n              \"localKeyId\",\n              localKeyId,\n              filter.bagType\n            );\n          }\n          if (\"friendlyName\" in filter) {\n            rval.friendlyName = _getBagsByAttribute(\n              pfx.safeContents,\n              \"friendlyName\",\n              filter.friendlyName,\n              filter.bagType\n            );\n          }\n          return rval;\n        },\n        /**\n         * DEPRECATED: use getBags() instead.\n         *\n         * Get bags with matching friendlyName attribute.\n         *\n         * @param friendlyName the friendly name to search for.\n         * @param [bagType] bag type to narrow search by.\n         *\n         * @return an array of bags with matching friendlyName attribute.\n         */\n        getBagsByFriendlyName: function(friendlyName, bagType) {\n          return _getBagsByAttribute(\n            pfx.safeContents,\n            \"friendlyName\",\n            friendlyName,\n            bagType\n          );\n        },\n        /**\n         * DEPRECATED: use getBags() instead.\n         *\n         * Get bags with matching localKeyId attribute.\n         *\n         * @param localKeyId the localKeyId to search for.\n         * @param [bagType] bag type to narrow search by.\n         *\n         * @return an array of bags with matching localKeyId attribute.\n         */\n        getBagsByLocalKeyId: function(localKeyId, bagType) {\n          return _getBagsByAttribute(\n            pfx.safeContents,\n            \"localKeyId\",\n            localKeyId,\n            bagType\n          );\n        }\n      };\n      if (capture.version.charCodeAt(0) !== 3) {\n        var error = new Error(\"PKCS#12 PFX of version other than 3 not supported.\");\n        error.version = capture.version.charCodeAt(0);\n        throw error;\n      }\n      if (asn1.derToOid(capture.contentType) !== pki2.oids.data) {\n        var error = new Error(\"Only PKCS#12 PFX in password integrity mode supported.\");\n        error.oid = asn1.derToOid(capture.contentType);\n        throw error;\n      }\n      var data = capture.content.value[0];\n      if (data.tagClass !== asn1.Class.UNIVERSAL || data.type !== asn1.Type.OCTETSTRING) {\n        throw new Error(\"PKCS#12 authSafe content data is not an OCTET STRING.\");\n      }\n      data = _decodePkcs7Data(data);\n      if (capture.mac) {\n        var md = null;\n        var macKeyBytes = 0;\n        var macAlgorithm = asn1.derToOid(capture.macAlgorithm);\n        switch (macAlgorithm) {\n          case pki2.oids.sha1:\n            md = forge.md.sha1.create();\n            macKeyBytes = 20;\n            break;\n          case pki2.oids.sha256:\n            md = forge.md.sha256.create();\n            macKeyBytes = 32;\n            break;\n          case pki2.oids.sha384:\n            md = forge.md.sha384.create();\n            macKeyBytes = 48;\n            break;\n          case pki2.oids.sha512:\n            md = forge.md.sha512.create();\n            macKeyBytes = 64;\n            break;\n          case pki2.oids.md5:\n            md = forge.md.md5.create();\n            macKeyBytes = 16;\n            break;\n        }\n        if (md === null) {\n          throw new Error(\"PKCS#12 uses unsupported MAC algorithm: \" + macAlgorithm);\n        }\n        var macSalt = new forge.util.ByteBuffer(capture.macSalt);\n        var macIterations = \"macIterations\" in capture ? parseInt(forge.util.bytesToHex(capture.macIterations), 16) : 1;\n        var macKey = p12.generateKey(\n          password,\n          macSalt,\n          3,\n          macIterations,\n          macKeyBytes,\n          md\n        );\n        var mac = forge.hmac.create();\n        mac.start(md, macKey);\n        mac.update(data.value);\n        var macValue = mac.getMac();\n        if (macValue.getBytes() !== capture.macDigest) {\n          throw new Error(\"PKCS#12 MAC could not be verified. Invalid password?\");\n        }\n      }\n      _decodeAuthenticatedSafe(pfx, data.value, strict, password);\n      return pfx;\n    };\n    function _decodePkcs7Data(data) {\n      if (data.composed || data.constructed) {\n        var value = forge.util.createBuffer();\n        for (var i = 0; i < data.value.length; ++i) {\n          value.putBytes(data.value[i].value);\n        }\n        data.composed = data.constructed = false;\n        data.value = value.getBytes();\n      }\n      return data;\n    }\n    function _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {\n      authSafe = asn1.fromDer(authSafe, strict);\n      if (authSafe.tagClass !== asn1.Class.UNIVERSAL || authSafe.type !== asn1.Type.SEQUENCE || authSafe.constructed !== true) {\n        throw new Error(\"PKCS#12 AuthenticatedSafe expected to be a SEQUENCE OF ContentInfo\");\n      }\n      for (var i = 0; i < authSafe.value.length; i++) {\n        var contentInfo = authSafe.value[i];\n        var capture = {};\n        var errors = [];\n        if (!asn1.validate(contentInfo, contentInfoValidator, capture, errors)) {\n          var error = new Error(\"Cannot read ContentInfo.\");\n          error.errors = errors;\n          throw error;\n        }\n        var obj = {\n          encrypted: false\n        };\n        var safeContents = null;\n        var data = capture.content.value[0];\n        switch (asn1.derToOid(capture.contentType)) {\n          case pki2.oids.data:\n            if (data.tagClass !== asn1.Class.UNIVERSAL || data.type !== asn1.Type.OCTETSTRING) {\n              throw new Error(\"PKCS#12 SafeContents Data is not an OCTET STRING.\");\n            }\n            safeContents = _decodePkcs7Data(data).value;\n            break;\n          case pki2.oids.encryptedData:\n            safeContents = _decryptSafeContents(data, password);\n            obj.encrypted = true;\n            break;\n          default:\n            var error = new Error(\"Unsupported PKCS#12 contentType.\");\n            error.contentType = asn1.derToOid(capture.contentType);\n            throw error;\n        }\n        obj.safeBags = _decodeSafeContents(safeContents, strict, password);\n        pfx.safeContents.push(obj);\n      }\n    }\n    function _decryptSafeContents(data, password) {\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(\n        data,\n        forge.pkcs7.asn1.encryptedDataValidator,\n        capture,\n        errors\n      )) {\n        var error = new Error(\"Cannot read EncryptedContentInfo.\");\n        error.errors = errors;\n        throw error;\n      }\n      var oid = asn1.derToOid(capture.contentType);\n      if (oid !== pki2.oids.data) {\n        var error = new Error(\n          \"PKCS#12 EncryptedContentInfo ContentType is not Data.\"\n        );\n        error.oid = oid;\n        throw error;\n      }\n      oid = asn1.derToOid(capture.encAlgorithm);\n      var cipher = pki2.pbe.getCipher(oid, capture.encParameter, password);\n      var encryptedContentAsn1 = _decodePkcs7Data(capture.encryptedContentAsn1);\n      var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);\n      cipher.update(encrypted);\n      if (!cipher.finish()) {\n        throw new Error(\"Failed to decrypt PKCS#12 SafeContents.\");\n      }\n      return cipher.output.getBytes();\n    }\n    function _decodeSafeContents(safeContents, strict, password) {\n      if (!strict && safeContents.length === 0) {\n        return [];\n      }\n      safeContents = asn1.fromDer(safeContents, strict);\n      if (safeContents.tagClass !== asn1.Class.UNIVERSAL || safeContents.type !== asn1.Type.SEQUENCE || safeContents.constructed !== true) {\n        throw new Error(\n          \"PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.\"\n        );\n      }\n      var res = [];\n      for (var i = 0; i < safeContents.value.length; i++) {\n        var safeBag = safeContents.value[i];\n        var capture = {};\n        var errors = [];\n        if (!asn1.validate(safeBag, safeBagValidator, capture, errors)) {\n          var error = new Error(\"Cannot read SafeBag.\");\n          error.errors = errors;\n          throw error;\n        }\n        var bag = {\n          type: asn1.derToOid(capture.bagId),\n          attributes: _decodeBagAttributes(capture.bagAttributes)\n        };\n        res.push(bag);\n        var validator, decoder;\n        var bagAsn1 = capture.bagValue.value[0];\n        switch (bag.type) {\n          case pki2.oids.pkcs8ShroudedKeyBag:\n            bagAsn1 = pki2.decryptPrivateKeyInfo(bagAsn1, password);\n            if (bagAsn1 === null) {\n              throw new Error(\n                \"Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?\"\n              );\n            }\n          case pki2.oids.keyBag:\n            try {\n              bag.key = pki2.privateKeyFromAsn1(bagAsn1);\n            } catch (e) {\n              bag.key = null;\n              bag.asn1 = bagAsn1;\n            }\n            continue;\n          case pki2.oids.certBag:\n            validator = certBagValidator;\n            decoder = function() {\n              if (asn1.derToOid(capture.certId) !== pki2.oids.x509Certificate) {\n                var error2 = new Error(\n                  \"Unsupported certificate type, only X.509 supported.\"\n                );\n                error2.oid = asn1.derToOid(capture.certId);\n                throw error2;\n              }\n              var certAsn1 = asn1.fromDer(capture.cert, strict);\n              try {\n                bag.cert = pki2.certificateFromAsn1(certAsn1, true);\n              } catch (e) {\n                bag.cert = null;\n                bag.asn1 = certAsn1;\n              }\n            };\n            break;\n          default:\n            var error = new Error(\"Unsupported PKCS#12 SafeBag type.\");\n            error.oid = bag.type;\n            throw error;\n        }\n        if (validator !== void 0 && !asn1.validate(bagAsn1, validator, capture, errors)) {\n          var error = new Error(\"Cannot read PKCS#12 \" + validator.name);\n          error.errors = errors;\n          throw error;\n        }\n        decoder();\n      }\n      return res;\n    }\n    function _decodeBagAttributes(attributes) {\n      var decodedAttrs = {};\n      if (attributes !== void 0) {\n        for (var i = 0; i < attributes.length; ++i) {\n          var capture = {};\n          var errors = [];\n          if (!asn1.validate(attributes[i], attributeValidator, capture, errors)) {\n            var error = new Error(\"Cannot read PKCS#12 BagAttribute.\");\n            error.errors = errors;\n            throw error;\n          }\n          var oid = asn1.derToOid(capture.oid);\n          if (pki2.oids[oid] === void 0) {\n            continue;\n          }\n          decodedAttrs[pki2.oids[oid]] = [];\n          for (var j = 0; j < capture.values.length; ++j) {\n            decodedAttrs[pki2.oids[oid]].push(capture.values[j].value);\n          }\n        }\n      }\n      return decodedAttrs;\n    }\n    p12.toPkcs12Asn1 = function(key, cert, password, options) {\n      options = options || {};\n      options.saltSize = options.saltSize || 8;\n      options.count = options.count || 2048;\n      options.algorithm = options.algorithm || options.encAlgorithm || \"aes128\";\n      if (!(\"useMac\" in options)) {\n        options.useMac = true;\n      }\n      if (!(\"localKeyId\" in options)) {\n        options.localKeyId = null;\n      }\n      if (!(\"generateLocalKeyId\" in options)) {\n        options.generateLocalKeyId = true;\n      }\n      var localKeyId = options.localKeyId;\n      var bagAttrs;\n      if (localKeyId !== null) {\n        localKeyId = forge.util.hexToBytes(localKeyId);\n      } else if (options.generateLocalKeyId) {\n        if (cert) {\n          var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;\n          if (typeof pairedCert === \"string\") {\n            pairedCert = pki2.certificateFromPem(pairedCert);\n          }\n          var sha1 = forge.md.sha1.create();\n          sha1.update(asn1.toDer(pki2.certificateToAsn1(pairedCert)).getBytes());\n          localKeyId = sha1.digest().getBytes();\n        } else {\n          localKeyId = forge.random.getBytes(20);\n        }\n      }\n      var attrs = [];\n      if (localKeyId !== null) {\n        attrs.push(\n          // localKeyID\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // attrId\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(pki2.oids.localKeyId).getBytes()\n            ),\n            // attrValues\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.OCTETSTRING,\n                false,\n                localKeyId\n              )\n            ])\n          ])\n        );\n      }\n      if (\"friendlyName\" in options) {\n        attrs.push(\n          // friendlyName\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // attrId\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(pki2.oids.friendlyName).getBytes()\n            ),\n            // attrValues\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.BMPSTRING,\n                false,\n                options.friendlyName\n              )\n            ])\n          ])\n        );\n      }\n      if (attrs.length > 0) {\n        bagAttrs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);\n      }\n      var contents = [];\n      var chain = [];\n      if (cert !== null) {\n        if (forge.util.isArray(cert)) {\n          chain = cert;\n        } else {\n          chain = [cert];\n        }\n      }\n      var certSafeBags = [];\n      for (var i = 0; i < chain.length; ++i) {\n        cert = chain[i];\n        if (typeof cert === \"string\") {\n          cert = pki2.certificateFromPem(cert);\n        }\n        var certBagAttrs = i === 0 ? bagAttrs : void 0;\n        var certAsn1 = pki2.certificateToAsn1(cert);\n        var certSafeBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // bagId\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(pki2.oids.certBag).getBytes()\n          ),\n          // bagValue\n          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n            // CertBag\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n              // certId\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.OID,\n                false,\n                asn1.oidToDer(pki2.oids.x509Certificate).getBytes()\n              ),\n              // certValue (x509Certificate)\n              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.OCTETSTRING,\n                  false,\n                  asn1.toDer(certAsn1).getBytes()\n                )\n              ])\n            ])\n          ]),\n          // bagAttributes (OPTIONAL)\n          certBagAttrs\n        ]);\n        certSafeBags.push(certSafeBag);\n      }\n      if (certSafeBags.length > 0) {\n        var certSafeContents = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.SEQUENCE,\n          true,\n          certSafeBags\n        );\n        var certCI = (\n          // PKCS#7 ContentInfo\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // contentType\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              // OID for the content type is 'data'\n              asn1.oidToDer(pki2.oids.data).getBytes()\n            ),\n            // content\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.OCTETSTRING,\n                false,\n                asn1.toDer(certSafeContents).getBytes()\n              )\n            ])\n          ])\n        );\n        contents.push(certCI);\n      }\n      var keyBag = null;\n      if (key !== null) {\n        var pkAsn1 = pki2.wrapRsaPrivateKey(pki2.privateKeyToAsn1(key));\n        if (password === null) {\n          keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // bagId\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(pki2.oids.keyBag).getBytes()\n            ),\n            // bagValue\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n              // PrivateKeyInfo\n              pkAsn1\n            ]),\n            // bagAttributes (OPTIONAL)\n            bagAttrs\n          ]);\n        } else {\n          keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // bagId\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(pki2.oids.pkcs8ShroudedKeyBag).getBytes()\n            ),\n            // bagValue\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n              // EncryptedPrivateKeyInfo\n              pki2.encryptPrivateKeyInfo(pkAsn1, password, options)\n            ]),\n            // bagAttributes (OPTIONAL)\n            bagAttrs\n          ]);\n        }\n        var keySafeContents = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [keyBag]);\n        var keyCI = (\n          // PKCS#7 ContentInfo\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // contentType\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              // OID for the content type is 'data'\n              asn1.oidToDer(pki2.oids.data).getBytes()\n            ),\n            // content\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.OCTETSTRING,\n                false,\n                asn1.toDer(keySafeContents).getBytes()\n              )\n            ])\n          ])\n        );\n        contents.push(keyCI);\n      }\n      var safe = asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.SEQUENCE,\n        true,\n        contents\n      );\n      var macData;\n      if (options.useMac) {\n        var sha1 = forge.md.sha1.create();\n        var macSalt = new forge.util.ByteBuffer(\n          forge.random.getBytes(options.saltSize)\n        );\n        var count = options.count;\n        var key = p12.generateKey(password, macSalt, 3, count, 20);\n        var mac = forge.hmac.create();\n        mac.start(sha1, key);\n        mac.update(asn1.toDer(safe).getBytes());\n        var macValue = mac.getMac();\n        macData = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // mac DigestInfo\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // digestAlgorithm\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n              // algorithm = SHA-1\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.OID,\n                false,\n                asn1.oidToDer(pki2.oids.sha1).getBytes()\n              ),\n              // parameters = Null\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n            ]),\n            // digest\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OCTETSTRING,\n              false,\n              macValue.getBytes()\n            )\n          ]),\n          // macSalt OCTET STRING\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OCTETSTRING,\n            false,\n            macSalt.getBytes()\n          ),\n          // iterations INTEGER (XXX: Only support count < 65536)\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.INTEGER,\n            false,\n            asn1.integerToDer(count).getBytes()\n          )\n        ]);\n      }\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // version (3)\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          asn1.integerToDer(3).getBytes()\n        ),\n        // PKCS#7 ContentInfo\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // contentType\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            // OID for the content type is 'data'\n            asn1.oidToDer(pki2.oids.data).getBytes()\n          ),\n          // content\n          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OCTETSTRING,\n              false,\n              asn1.toDer(safe).getBytes()\n            )\n          ])\n        ]),\n        macData\n      ]);\n    };\n    p12.generateKey = forge.pbe.generatePkcs12Key;\n  }\n});\n\n// ../../node_modules/node-forge/lib/pki.js\nvar require_pki = __commonJS({\n  \"../../node_modules/node-forge/lib/pki.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_asn1();\n    require_oids();\n    require_pbe();\n    require_pem();\n    require_pbkdf2();\n    require_pkcs12();\n    require_pss();\n    require_rsa();\n    require_util();\n    require_x509();\n    var asn1 = forge.asn1;\n    var pki2 = module2.exports = forge.pki = forge.pki || {};\n    pki2.pemToDer = function(pem) {\n      var msg = forge.pem.decode(pem)[0];\n      if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        throw new Error(\"Could not convert PEM to DER; PEM is encrypted.\");\n      }\n      return forge.util.createBuffer(msg.body);\n    };\n    pki2.privateKeyFromPem = function(pem) {\n      var msg = forge.pem.decode(pem)[0];\n      if (msg.type !== \"PRIVATE KEY\" && msg.type !== \"RSA PRIVATE KEY\") {\n        var error = new Error('Could not convert private key from PEM; PEM header type is not \"PRIVATE KEY\" or \"RSA PRIVATE KEY\".');\n        error.headerType = msg.type;\n        throw error;\n      }\n      if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        throw new Error(\"Could not convert private key from PEM; PEM is encrypted.\");\n      }\n      var obj = asn1.fromDer(msg.body);\n      return pki2.privateKeyFromAsn1(obj);\n    };\n    pki2.privateKeyToPem = function(key, maxline) {\n      var msg = {\n        type: \"RSA PRIVATE KEY\",\n        body: asn1.toDer(pki2.privateKeyToAsn1(key)).getBytes()\n      };\n      return forge.pem.encode(msg, { maxline });\n    };\n    pki2.privateKeyInfoToPem = function(pki3, maxline) {\n      var msg = {\n        type: \"PRIVATE KEY\",\n        body: asn1.toDer(pki3).getBytes()\n      };\n      return forge.pem.encode(msg, { maxline });\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/tls.js\nvar require_tls = __commonJS({\n  \"../../node_modules/node-forge/lib/tls.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_asn1();\n    require_hmac();\n    require_md5();\n    require_pem();\n    require_pki();\n    require_random();\n    require_sha1();\n    require_util();\n    var prf_TLS1 = function(secret, label, seed, length) {\n      var rval = forge.util.createBuffer();\n      var idx = secret.length >> 1;\n      var slen = idx + (secret.length & 1);\n      var s1 = secret.substr(0, slen);\n      var s2 = secret.substr(idx, slen);\n      var ai = forge.util.createBuffer();\n      var hmac = forge.hmac.create();\n      seed = label + seed;\n      var md5itr = Math.ceil(length / 16);\n      var sha1itr = Math.ceil(length / 20);\n      hmac.start(\"MD5\", s1);\n      var md5bytes = forge.util.createBuffer();\n      ai.putBytes(seed);\n      for (var i = 0; i < md5itr; ++i) {\n        hmac.start(null, null);\n        hmac.update(ai.getBytes());\n        ai.putBuffer(hmac.digest());\n        hmac.start(null, null);\n        hmac.update(ai.bytes() + seed);\n        md5bytes.putBuffer(hmac.digest());\n      }\n      hmac.start(\"SHA1\", s2);\n      var sha1bytes = forge.util.createBuffer();\n      ai.clear();\n      ai.putBytes(seed);\n      for (var i = 0; i < sha1itr; ++i) {\n        hmac.start(null, null);\n        hmac.update(ai.getBytes());\n        ai.putBuffer(hmac.digest());\n        hmac.start(null, null);\n        hmac.update(ai.bytes() + seed);\n        sha1bytes.putBuffer(hmac.digest());\n      }\n      rval.putBytes(forge.util.xorBytes(\n        md5bytes.getBytes(),\n        sha1bytes.getBytes(),\n        length\n      ));\n      return rval;\n    };\n    var hmac_sha1 = function(key2, seqNum, record) {\n      var hmac = forge.hmac.create();\n      hmac.start(\"SHA1\", key2);\n      var b = forge.util.createBuffer();\n      b.putInt32(seqNum[0]);\n      b.putInt32(seqNum[1]);\n      b.putByte(record.type);\n      b.putByte(record.version.major);\n      b.putByte(record.version.minor);\n      b.putInt16(record.length);\n      b.putBytes(record.fragment.bytes());\n      hmac.update(b.getBytes());\n      return hmac.digest().getBytes();\n    };\n    var deflate = function(c, record, s) {\n      var rval = false;\n      try {\n        var bytes = c.deflate(record.fragment.getBytes());\n        record.fragment = forge.util.createBuffer(bytes);\n        record.length = bytes.length;\n        rval = true;\n      } catch (ex) {\n      }\n      return rval;\n    };\n    var inflate = function(c, record, s) {\n      var rval = false;\n      try {\n        var bytes = c.inflate(record.fragment.getBytes());\n        record.fragment = forge.util.createBuffer(bytes);\n        record.length = bytes.length;\n        rval = true;\n      } catch (ex) {\n      }\n      return rval;\n    };\n    var readVector = function(b, lenBytes) {\n      var len = 0;\n      switch (lenBytes) {\n        case 1:\n          len = b.getByte();\n          break;\n        case 2:\n          len = b.getInt16();\n          break;\n        case 3:\n          len = b.getInt24();\n          break;\n        case 4:\n          len = b.getInt32();\n          break;\n      }\n      return forge.util.createBuffer(b.getBytes(len));\n    };\n    var writeVector = function(b, lenBytes, v) {\n      b.putInt(v.length(), lenBytes << 3);\n      b.putBuffer(v);\n    };\n    var tls = {};\n    tls.Versions = {\n      TLS_1_0: { major: 3, minor: 1 },\n      TLS_1_1: { major: 3, minor: 2 },\n      TLS_1_2: { major: 3, minor: 3 }\n    };\n    tls.SupportedVersions = [\n      tls.Versions.TLS_1_1,\n      tls.Versions.TLS_1_0\n    ];\n    tls.Version = tls.SupportedVersions[0];\n    tls.MaxFragment = 16384 - 1024;\n    tls.ConnectionEnd = {\n      server: 0,\n      client: 1\n    };\n    tls.PRFAlgorithm = {\n      tls_prf_sha256: 0\n    };\n    tls.BulkCipherAlgorithm = {\n      none: null,\n      rc4: 0,\n      des3: 1,\n      aes: 2\n    };\n    tls.CipherType = {\n      stream: 0,\n      block: 1,\n      aead: 2\n    };\n    tls.MACAlgorithm = {\n      none: null,\n      hmac_md5: 0,\n      hmac_sha1: 1,\n      hmac_sha256: 2,\n      hmac_sha384: 3,\n      hmac_sha512: 4\n    };\n    tls.CompressionMethod = {\n      none: 0,\n      deflate: 1\n    };\n    tls.ContentType = {\n      change_cipher_spec: 20,\n      alert: 21,\n      handshake: 22,\n      application_data: 23,\n      heartbeat: 24\n    };\n    tls.HandshakeType = {\n      hello_request: 0,\n      client_hello: 1,\n      server_hello: 2,\n      certificate: 11,\n      server_key_exchange: 12,\n      certificate_request: 13,\n      server_hello_done: 14,\n      certificate_verify: 15,\n      client_key_exchange: 16,\n      finished: 20\n    };\n    tls.Alert = {};\n    tls.Alert.Level = {\n      warning: 1,\n      fatal: 2\n    };\n    tls.Alert.Description = {\n      close_notify: 0,\n      unexpected_message: 10,\n      bad_record_mac: 20,\n      decryption_failed: 21,\n      record_overflow: 22,\n      decompression_failure: 30,\n      handshake_failure: 40,\n      bad_certificate: 42,\n      unsupported_certificate: 43,\n      certificate_revoked: 44,\n      certificate_expired: 45,\n      certificate_unknown: 46,\n      illegal_parameter: 47,\n      unknown_ca: 48,\n      access_denied: 49,\n      decode_error: 50,\n      decrypt_error: 51,\n      export_restriction: 60,\n      protocol_version: 70,\n      insufficient_security: 71,\n      internal_error: 80,\n      user_canceled: 90,\n      no_renegotiation: 100\n    };\n    tls.HeartbeatMessageType = {\n      heartbeat_request: 1,\n      heartbeat_response: 2\n    };\n    tls.CipherSuites = {};\n    tls.getCipherSuite = function(twoBytes) {\n      var rval = null;\n      for (var key2 in tls.CipherSuites) {\n        var cs = tls.CipherSuites[key2];\n        if (cs.id[0] === twoBytes.charCodeAt(0) && cs.id[1] === twoBytes.charCodeAt(1)) {\n          rval = cs;\n          break;\n        }\n      }\n      return rval;\n    };\n    tls.handleUnexpected = function(c, record) {\n      var ignore = !c.open && c.entity === tls.ConnectionEnd.client;\n      if (!ignore) {\n        c.error(c, {\n          message: \"Unexpected message. Received TLS record out of order.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.unexpected_message\n          }\n        });\n      }\n    };\n    tls.handleHelloRequest = function(c, record, length) {\n      if (!c.handshaking && c.handshakes > 0) {\n        tls.queue(c, tls.createAlert(c, {\n          level: tls.Alert.Level.warning,\n          description: tls.Alert.Description.no_renegotiation\n        }));\n        tls.flush(c);\n      }\n      c.process();\n    };\n    tls.parseHelloMessage = function(c, record, length) {\n      var msg = null;\n      var client = c.entity === tls.ConnectionEnd.client;\n      if (length < 38) {\n        c.error(c, {\n          message: client ? \"Invalid ServerHello message. Message too short.\" : \"Invalid ClientHello message. Message too short.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.illegal_parameter\n          }\n        });\n      } else {\n        var b = record.fragment;\n        var remaining = b.length();\n        msg = {\n          version: {\n            major: b.getByte(),\n            minor: b.getByte()\n          },\n          random: forge.util.createBuffer(b.getBytes(32)),\n          session_id: readVector(b, 1),\n          extensions: []\n        };\n        if (client) {\n          msg.cipher_suite = b.getBytes(2);\n          msg.compression_method = b.getByte();\n        } else {\n          msg.cipher_suites = readVector(b, 2);\n          msg.compression_methods = readVector(b, 1);\n        }\n        remaining = length - (remaining - b.length());\n        if (remaining > 0) {\n          var exts = readVector(b, 2);\n          while (exts.length() > 0) {\n            msg.extensions.push({\n              type: [exts.getByte(), exts.getByte()],\n              data: readVector(exts, 2)\n            });\n          }\n          if (!client) {\n            for (var i = 0; i < msg.extensions.length; ++i) {\n              var ext = msg.extensions[i];\n              if (ext.type[0] === 0 && ext.type[1] === 0) {\n                var snl = readVector(ext.data, 2);\n                while (snl.length() > 0) {\n                  var snType = snl.getByte();\n                  if (snType !== 0) {\n                    break;\n                  }\n                  c.session.extensions.server_name.serverNameList.push(\n                    readVector(snl, 2).getBytes()\n                  );\n                }\n              }\n            }\n          }\n        }\n        if (c.session.version) {\n          if (msg.version.major !== c.session.version.major || msg.version.minor !== c.session.version.minor) {\n            return c.error(c, {\n              message: \"TLS version change is disallowed during renegotiation.\",\n              send: true,\n              alert: {\n                level: tls.Alert.Level.fatal,\n                description: tls.Alert.Description.protocol_version\n              }\n            });\n          }\n        }\n        if (client) {\n          c.session.cipherSuite = tls.getCipherSuite(msg.cipher_suite);\n        } else {\n          var tmp = forge.util.createBuffer(msg.cipher_suites.bytes());\n          while (tmp.length() > 0) {\n            c.session.cipherSuite = tls.getCipherSuite(tmp.getBytes(2));\n            if (c.session.cipherSuite !== null) {\n              break;\n            }\n          }\n        }\n        if (c.session.cipherSuite === null) {\n          return c.error(c, {\n            message: \"No cipher suites in common.\",\n            send: true,\n            alert: {\n              level: tls.Alert.Level.fatal,\n              description: tls.Alert.Description.handshake_failure\n            },\n            cipherSuite: forge.util.bytesToHex(msg.cipher_suite)\n          });\n        }\n        if (client) {\n          c.session.compressionMethod = msg.compression_method;\n        } else {\n          c.session.compressionMethod = tls.CompressionMethod.none;\n        }\n      }\n      return msg;\n    };\n    tls.createSecurityParameters = function(c, msg) {\n      var client = c.entity === tls.ConnectionEnd.client;\n      var msgRandom = msg.random.bytes();\n      var cRandom = client ? c.session.sp.client_random : msgRandom;\n      var sRandom = client ? msgRandom : tls.createRandom().getBytes();\n      c.session.sp = {\n        entity: c.entity,\n        prf_algorithm: tls.PRFAlgorithm.tls_prf_sha256,\n        bulk_cipher_algorithm: null,\n        cipher_type: null,\n        enc_key_length: null,\n        block_length: null,\n        fixed_iv_length: null,\n        record_iv_length: null,\n        mac_algorithm: null,\n        mac_length: null,\n        mac_key_length: null,\n        compression_algorithm: c.session.compressionMethod,\n        pre_master_secret: null,\n        master_secret: null,\n        client_random: cRandom,\n        server_random: sRandom\n      };\n    };\n    tls.handleServerHello = function(c, record, length) {\n      var msg = tls.parseHelloMessage(c, record, length);\n      if (c.fail) {\n        return;\n      }\n      if (msg.version.minor <= c.version.minor) {\n        c.version.minor = msg.version.minor;\n      } else {\n        return c.error(c, {\n          message: \"Incompatible TLS version.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.protocol_version\n          }\n        });\n      }\n      c.session.version = c.version;\n      var sessionId = msg.session_id.bytes();\n      if (sessionId.length > 0 && sessionId === c.session.id) {\n        c.expect = SCC;\n        c.session.resuming = true;\n        c.session.sp.server_random = msg.random.bytes();\n      } else {\n        c.expect = SCE;\n        c.session.resuming = false;\n        tls.createSecurityParameters(c, msg);\n      }\n      c.session.id = sessionId;\n      c.process();\n    };\n    tls.handleClientHello = function(c, record, length) {\n      var msg = tls.parseHelloMessage(c, record, length);\n      if (c.fail) {\n        return;\n      }\n      var sessionId = msg.session_id.bytes();\n      var session = null;\n      if (c.sessionCache) {\n        session = c.sessionCache.getSession(sessionId);\n        if (session === null) {\n          sessionId = \"\";\n        } else if (session.version.major !== msg.version.major || session.version.minor > msg.version.minor) {\n          session = null;\n          sessionId = \"\";\n        }\n      }\n      if (sessionId.length === 0) {\n        sessionId = forge.random.getBytes(32);\n      }\n      c.session.id = sessionId;\n      c.session.clientHelloVersion = msg.version;\n      c.session.sp = {};\n      if (session) {\n        c.version = c.session.version = session.version;\n        c.session.sp = session.sp;\n      } else {\n        var version4;\n        for (var i = 1; i < tls.SupportedVersions.length; ++i) {\n          version4 = tls.SupportedVersions[i];\n          if (version4.minor <= msg.version.minor) {\n            break;\n          }\n        }\n        c.version = { major: version4.major, minor: version4.minor };\n        c.session.version = c.version;\n      }\n      if (session !== null) {\n        c.expect = CCC;\n        c.session.resuming = true;\n        c.session.sp.client_random = msg.random.bytes();\n      } else {\n        c.expect = c.verifyClient !== false ? CCE : CKE;\n        c.session.resuming = false;\n        tls.createSecurityParameters(c, msg);\n      }\n      c.open = true;\n      tls.queue(c, tls.createRecord(c, {\n        type: tls.ContentType.handshake,\n        data: tls.createServerHello(c)\n      }));\n      if (c.session.resuming) {\n        tls.queue(c, tls.createRecord(c, {\n          type: tls.ContentType.change_cipher_spec,\n          data: tls.createChangeCipherSpec()\n        }));\n        c.state.pending = tls.createConnectionState(c);\n        c.state.current.write = c.state.pending.write;\n        tls.queue(c, tls.createRecord(c, {\n          type: tls.ContentType.handshake,\n          data: tls.createFinished(c)\n        }));\n      } else {\n        tls.queue(c, tls.createRecord(c, {\n          type: tls.ContentType.handshake,\n          data: tls.createCertificate(c)\n        }));\n        if (!c.fail) {\n          tls.queue(c, tls.createRecord(c, {\n            type: tls.ContentType.handshake,\n            data: tls.createServerKeyExchange(c)\n          }));\n          if (c.verifyClient !== false) {\n            tls.queue(c, tls.createRecord(c, {\n              type: tls.ContentType.handshake,\n              data: tls.createCertificateRequest(c)\n            }));\n          }\n          tls.queue(c, tls.createRecord(c, {\n            type: tls.ContentType.handshake,\n            data: tls.createServerHelloDone(c)\n          }));\n        }\n      }\n      tls.flush(c);\n      c.process();\n    };\n    tls.handleCertificate = function(c, record, length) {\n      if (length < 3) {\n        return c.error(c, {\n          message: \"Invalid Certificate message. Message too short.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.illegal_parameter\n          }\n        });\n      }\n      var b = record.fragment;\n      var msg = {\n        certificate_list: readVector(b, 3)\n      };\n      var cert, asn1;\n      var certs = [];\n      try {\n        while (msg.certificate_list.length() > 0) {\n          cert = readVector(msg.certificate_list, 3);\n          asn1 = forge.asn1.fromDer(cert);\n          cert = forge.pki.certificateFromAsn1(asn1, true);\n          certs.push(cert);\n        }\n      } catch (ex) {\n        return c.error(c, {\n          message: \"Could not parse certificate list.\",\n          cause: ex,\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.bad_certificate\n          }\n        });\n      }\n      var client = c.entity === tls.ConnectionEnd.client;\n      if ((client || c.verifyClient === true) && certs.length === 0) {\n        c.error(c, {\n          message: client ? \"No server certificate provided.\" : \"No client certificate provided.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.illegal_parameter\n          }\n        });\n      } else if (certs.length === 0) {\n        c.expect = client ? SKE : CKE;\n      } else {\n        if (client) {\n          c.session.serverCertificate = certs[0];\n        } else {\n          c.session.clientCertificate = certs[0];\n        }\n        if (tls.verifyCertificateChain(c, certs)) {\n          c.expect = client ? SKE : CKE;\n        }\n      }\n      c.process();\n    };\n    tls.handleServerKeyExchange = function(c, record, length) {\n      if (length > 0) {\n        return c.error(c, {\n          message: \"Invalid key parameters. Only RSA is supported.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.unsupported_certificate\n          }\n        });\n      }\n      c.expect = SCR;\n      c.process();\n    };\n    tls.handleClientKeyExchange = function(c, record, length) {\n      if (length < 48) {\n        return c.error(c, {\n          message: \"Invalid key parameters. Only RSA is supported.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.unsupported_certificate\n          }\n        });\n      }\n      var b = record.fragment;\n      var msg = {\n        enc_pre_master_secret: readVector(b, 2).getBytes()\n      };\n      var privateKey = null;\n      if (c.getPrivateKey) {\n        try {\n          privateKey = c.getPrivateKey(c, c.session.serverCertificate);\n          privateKey = forge.pki.privateKeyFromPem(privateKey);\n        } catch (ex) {\n          c.error(c, {\n            message: \"Could not get private key.\",\n            cause: ex,\n            send: true,\n            alert: {\n              level: tls.Alert.Level.fatal,\n              description: tls.Alert.Description.internal_error\n            }\n          });\n        }\n      }\n      if (privateKey === null) {\n        return c.error(c, {\n          message: \"No private key set.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.internal_error\n          }\n        });\n      }\n      try {\n        var sp = c.session.sp;\n        sp.pre_master_secret = privateKey.decrypt(msg.enc_pre_master_secret);\n        var version4 = c.session.clientHelloVersion;\n        if (version4.major !== sp.pre_master_secret.charCodeAt(0) || version4.minor !== sp.pre_master_secret.charCodeAt(1)) {\n          throw new Error(\"TLS version rollback attack detected.\");\n        }\n      } catch (ex) {\n        sp.pre_master_secret = forge.random.getBytes(48);\n      }\n      c.expect = CCC;\n      if (c.session.clientCertificate !== null) {\n        c.expect = CCV;\n      }\n      c.process();\n    };\n    tls.handleCertificateRequest = function(c, record, length) {\n      if (length < 3) {\n        return c.error(c, {\n          message: \"Invalid CertificateRequest. Message too short.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.illegal_parameter\n          }\n        });\n      }\n      var b = record.fragment;\n      var msg = {\n        certificate_types: readVector(b, 1),\n        certificate_authorities: readVector(b, 2)\n      };\n      c.session.certificateRequest = msg;\n      c.expect = SHD;\n      c.process();\n    };\n    tls.handleCertificateVerify = function(c, record, length) {\n      if (length < 2) {\n        return c.error(c, {\n          message: \"Invalid CertificateVerify. Message too short.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.illegal_parameter\n          }\n        });\n      }\n      var b = record.fragment;\n      b.read -= 4;\n      var msgBytes = b.bytes();\n      b.read += 4;\n      var msg = {\n        signature: readVector(b, 2).getBytes()\n      };\n      var verify2 = forge.util.createBuffer();\n      verify2.putBuffer(c.session.md5.digest());\n      verify2.putBuffer(c.session.sha1.digest());\n      verify2 = verify2.getBytes();\n      try {\n        var cert = c.session.clientCertificate;\n        if (!cert.publicKey.verify(verify2, msg.signature, \"NONE\")) {\n          throw new Error(\"CertificateVerify signature does not match.\");\n        }\n        c.session.md5.update(msgBytes);\n        c.session.sha1.update(msgBytes);\n      } catch (ex) {\n        return c.error(c, {\n          message: \"Bad signature in CertificateVerify.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.handshake_failure\n          }\n        });\n      }\n      c.expect = CCC;\n      c.process();\n    };\n    tls.handleServerHelloDone = function(c, record, length) {\n      if (length > 0) {\n        return c.error(c, {\n          message: \"Invalid ServerHelloDone message. Invalid length.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.record_overflow\n          }\n        });\n      }\n      if (c.serverCertificate === null) {\n        var error = {\n          message: \"No server certificate provided. Not enough security.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.insufficient_security\n          }\n        };\n        var depth = 0;\n        var ret = c.verify(c, error.alert.description, depth, []);\n        if (ret !== true) {\n          if (ret || ret === 0) {\n            if (typeof ret === \"object\" && !forge.util.isArray(ret)) {\n              if (ret.message) {\n                error.message = ret.message;\n              }\n              if (ret.alert) {\n                error.alert.description = ret.alert;\n              }\n            } else if (typeof ret === \"number\") {\n              error.alert.description = ret;\n            }\n          }\n          return c.error(c, error);\n        }\n      }\n      if (c.session.certificateRequest !== null) {\n        record = tls.createRecord(c, {\n          type: tls.ContentType.handshake,\n          data: tls.createCertificate(c)\n        });\n        tls.queue(c, record);\n      }\n      record = tls.createRecord(c, {\n        type: tls.ContentType.handshake,\n        data: tls.createClientKeyExchange(c)\n      });\n      tls.queue(c, record);\n      c.expect = SER;\n      var callback = function(c2, signature) {\n        if (c2.session.certificateRequest !== null && c2.session.clientCertificate !== null) {\n          tls.queue(c2, tls.createRecord(c2, {\n            type: tls.ContentType.handshake,\n            data: tls.createCertificateVerify(c2, signature)\n          }));\n        }\n        tls.queue(c2, tls.createRecord(c2, {\n          type: tls.ContentType.change_cipher_spec,\n          data: tls.createChangeCipherSpec()\n        }));\n        c2.state.pending = tls.createConnectionState(c2);\n        c2.state.current.write = c2.state.pending.write;\n        tls.queue(c2, tls.createRecord(c2, {\n          type: tls.ContentType.handshake,\n          data: tls.createFinished(c2)\n        }));\n        c2.expect = SCC;\n        tls.flush(c2);\n        c2.process();\n      };\n      if (c.session.certificateRequest === null || c.session.clientCertificate === null) {\n        return callback(c, null);\n      }\n      tls.getClientSignature(c, callback);\n    };\n    tls.handleChangeCipherSpec = function(c, record) {\n      if (record.fragment.getByte() !== 1) {\n        return c.error(c, {\n          message: \"Invalid ChangeCipherSpec message received.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.illegal_parameter\n          }\n        });\n      }\n      var client = c.entity === tls.ConnectionEnd.client;\n      if (c.session.resuming && client || !c.session.resuming && !client) {\n        c.state.pending = tls.createConnectionState(c);\n      }\n      c.state.current.read = c.state.pending.read;\n      if (!c.session.resuming && client || c.session.resuming && !client) {\n        c.state.pending = null;\n      }\n      c.expect = client ? SFI : CFI;\n      c.process();\n    };\n    tls.handleFinished = function(c, record, length) {\n      var b = record.fragment;\n      b.read -= 4;\n      var msgBytes = b.bytes();\n      b.read += 4;\n      var vd = record.fragment.getBytes();\n      b = forge.util.createBuffer();\n      b.putBuffer(c.session.md5.digest());\n      b.putBuffer(c.session.sha1.digest());\n      var client = c.entity === tls.ConnectionEnd.client;\n      var label = client ? \"server finished\" : \"client finished\";\n      var sp = c.session.sp;\n      var vdl = 12;\n      var prf = prf_TLS1;\n      b = prf(sp.master_secret, label, b.getBytes(), vdl);\n      if (b.getBytes() !== vd) {\n        return c.error(c, {\n          message: \"Invalid verify_data in Finished message.\",\n          send: true,\n          alert: {\n            level: tls.Alert.Level.fatal,\n            description: tls.Alert.Description.decrypt_error\n          }\n        });\n      }\n      c.session.md5.update(msgBytes);\n      c.session.sha1.update(msgBytes);\n      if (c.session.resuming && client || !c.session.resuming && !client) {\n        tls.queue(c, tls.createRecord(c, {\n          type: tls.ContentType.change_cipher_spec,\n          data: tls.createChangeCipherSpec()\n        }));\n        c.state.current.write = c.state.pending.write;\n        c.state.pending = null;\n        tls.queue(c, tls.createRecord(c, {\n          type: tls.ContentType.handshake,\n          data: tls.createFinished(c)\n        }));\n      }\n      c.expect = client ? SAD : CAD;\n      c.handshaking = false;\n      ++c.handshakes;\n      c.peerCertificate = client ? c.session.serverCertificate : c.session.clientCertificate;\n      tls.flush(c);\n      c.isConnected = true;\n      c.connected(c);\n      c.process();\n    };\n    tls.handleAlert = function(c, record) {\n      var b = record.fragment;\n      var alert = {\n        level: b.getByte(),\n        description: b.getByte()\n      };\n      var msg;\n      switch (alert.description) {\n        case tls.Alert.Description.close_notify:\n          msg = \"Connection closed.\";\n          break;\n        case tls.Alert.Description.unexpected_message:\n          msg = \"Unexpected message.\";\n          break;\n        case tls.Alert.Description.bad_record_mac:\n          msg = \"Bad record MAC.\";\n          break;\n        case tls.Alert.Description.decryption_failed:\n          msg = \"Decryption failed.\";\n          break;\n        case tls.Alert.Description.record_overflow:\n          msg = \"Record overflow.\";\n          break;\n        case tls.Alert.Description.decompression_failure:\n          msg = \"Decompression failed.\";\n          break;\n        case tls.Alert.Description.handshake_failure:\n          msg = \"Handshake failure.\";\n          break;\n        case tls.Alert.Description.bad_certificate:\n          msg = \"Bad certificate.\";\n          break;\n        case tls.Alert.Description.unsupported_certificate:\n          msg = \"Unsupported certificate.\";\n          break;\n        case tls.Alert.Description.certificate_revoked:\n          msg = \"Certificate revoked.\";\n          break;\n        case tls.Alert.Description.certificate_expired:\n          msg = \"Certificate expired.\";\n          break;\n        case tls.Alert.Description.certificate_unknown:\n          msg = \"Certificate unknown.\";\n          break;\n        case tls.Alert.Description.illegal_parameter:\n          msg = \"Illegal parameter.\";\n          break;\n        case tls.Alert.Description.unknown_ca:\n          msg = \"Unknown certificate authority.\";\n          break;\n        case tls.Alert.Description.access_denied:\n          msg = \"Access denied.\";\n          break;\n        case tls.Alert.Description.decode_error:\n          msg = \"Decode error.\";\n          break;\n        case tls.Alert.Description.decrypt_error:\n          msg = \"Decrypt error.\";\n          break;\n        case tls.Alert.Description.export_restriction:\n          msg = \"Export restriction.\";\n          break;\n        case tls.Alert.Description.protocol_version:\n          msg = \"Unsupported protocol version.\";\n          break;\n        case tls.Alert.Description.insufficient_security:\n          msg = \"Insufficient security.\";\n          break;\n        case tls.Alert.Description.internal_error:\n          msg = \"Internal error.\";\n          break;\n        case tls.Alert.Description.user_canceled:\n          msg = \"User canceled.\";\n          break;\n        case tls.Alert.Description.no_renegotiation:\n          msg = \"Renegotiation not supported.\";\n          break;\n        default:\n          msg = \"Unknown error.\";\n          break;\n      }\n      if (alert.description === tls.Alert.Description.close_notify) {\n        return c.close();\n      }\n      c.error(c, {\n        message: msg,\n        send: false,\n        // origin is the opposite end\n        origin: c.entity === tls.ConnectionEnd.client ? \"server\" : \"client\",\n        alert\n      });\n      c.process();\n    };\n    tls.handleHandshake = function(c, record) {\n      var b = record.fragment;\n      var type = b.getByte();\n      var length = b.getInt24();\n      if (length > b.length()) {\n        c.fragmented = record;\n        record.fragment = forge.util.createBuffer();\n        b.read -= 4;\n        return c.process();\n      }\n      c.fragmented = null;\n      b.read -= 4;\n      var bytes = b.bytes(length + 4);\n      b.read += 4;\n      if (type in hsTable[c.entity][c.expect]) {\n        if (c.entity === tls.ConnectionEnd.server && !c.open && !c.fail) {\n          c.handshaking = true;\n          c.session = {\n            version: null,\n            extensions: {\n              server_name: {\n                serverNameList: []\n              }\n            },\n            cipherSuite: null,\n            compressionMethod: null,\n            serverCertificate: null,\n            clientCertificate: null,\n            md5: forge.md.md5.create(),\n            sha1: forge.md.sha1.create()\n          };\n        }\n        if (type !== tls.HandshakeType.hello_request && type !== tls.HandshakeType.certificate_verify && type !== tls.HandshakeType.finished) {\n          c.session.md5.update(bytes);\n          c.session.sha1.update(bytes);\n        }\n        hsTable[c.entity][c.expect][type](c, record, length);\n      } else {\n        tls.handleUnexpected(c, record);\n      }\n    };\n    tls.handleApplicationData = function(c, record) {\n      c.data.putBuffer(record.fragment);\n      c.dataReady(c);\n      c.process();\n    };\n    tls.handleHeartbeat = function(c, record) {\n      var b = record.fragment;\n      var type = b.getByte();\n      var length = b.getInt16();\n      var payload = b.getBytes(length);\n      if (type === tls.HeartbeatMessageType.heartbeat_request) {\n        if (c.handshaking || length > payload.length) {\n          return c.process();\n        }\n        tls.queue(c, tls.createRecord(c, {\n          type: tls.ContentType.heartbeat,\n          data: tls.createHeartbeat(\n            tls.HeartbeatMessageType.heartbeat_response,\n            payload\n          )\n        }));\n        tls.flush(c);\n      } else if (type === tls.HeartbeatMessageType.heartbeat_response) {\n        if (payload !== c.expectedHeartbeatPayload) {\n          return c.process();\n        }\n        if (c.heartbeatReceived) {\n          c.heartbeatReceived(c, forge.util.createBuffer(payload));\n        }\n      }\n      c.process();\n    };\n    var SHE = 0;\n    var SCE = 1;\n    var SKE = 2;\n    var SCR = 3;\n    var SHD = 4;\n    var SCC = 5;\n    var SFI = 6;\n    var SAD = 7;\n    var SER = 8;\n    var CHE = 0;\n    var CCE = 1;\n    var CKE = 2;\n    var CCV = 3;\n    var CCC = 4;\n    var CFI = 5;\n    var CAD = 6;\n    var __ = tls.handleUnexpected;\n    var R0 = tls.handleChangeCipherSpec;\n    var R1 = tls.handleAlert;\n    var R2 = tls.handleHandshake;\n    var R3 = tls.handleApplicationData;\n    var R4 = tls.handleHeartbeat;\n    var ctTable = [];\n    ctTable[tls.ConnectionEnd.client] = [\n      //      CC,AL,HS,AD,HB\n      /*SHE*/\n      [__, R1, R2, __, R4],\n      /*SCE*/\n      [__, R1, R2, __, R4],\n      /*SKE*/\n      [__, R1, R2, __, R4],\n      /*SCR*/\n      [__, R1, R2, __, R4],\n      /*SHD*/\n      [__, R1, R2, __, R4],\n      /*SCC*/\n      [R0, R1, __, __, R4],\n      /*SFI*/\n      [__, R1, R2, __, R4],\n      /*SAD*/\n      [__, R1, R2, R3, R4],\n      /*SER*/\n      [__, R1, R2, __, R4]\n    ];\n    ctTable[tls.ConnectionEnd.server] = [\n      //      CC,AL,HS,AD\n      /*CHE*/\n      [__, R1, R2, __, R4],\n      /*CCE*/\n      [__, R1, R2, __, R4],\n      /*CKE*/\n      [__, R1, R2, __, R4],\n      /*CCV*/\n      [__, R1, R2, __, R4],\n      /*CCC*/\n      [R0, R1, __, __, R4],\n      /*CFI*/\n      [__, R1, R2, __, R4],\n      /*CAD*/\n      [__, R1, R2, R3, R4],\n      /*CER*/\n      [__, R1, R2, __, R4]\n    ];\n    var H0 = tls.handleHelloRequest;\n    var H1 = tls.handleServerHello;\n    var H2 = tls.handleCertificate;\n    var H3 = tls.handleServerKeyExchange;\n    var H4 = tls.handleCertificateRequest;\n    var H5 = tls.handleServerHelloDone;\n    var H6 = tls.handleFinished;\n    var hsTable = [];\n    hsTable[tls.ConnectionEnd.client] = [\n      //      HR,01,SH,03,04,05,06,07,08,09,10,SC,SK,CR,HD,15,CK,17,18,19,FI\n      /*SHE*/\n      [__, __, H1, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],\n      /*SCE*/\n      [H0, __, __, __, __, __, __, __, __, __, __, H2, H3, H4, H5, __, __, __, __, __, __],\n      /*SKE*/\n      [H0, __, __, __, __, __, __, __, __, __, __, __, H3, H4, H5, __, __, __, __, __, __],\n      /*SCR*/\n      [H0, __, __, __, __, __, __, __, __, __, __, __, __, H4, H5, __, __, __, __, __, __],\n      /*SHD*/\n      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, H5, __, __, __, __, __, __],\n      /*SCC*/\n      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],\n      /*SFI*/\n      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, H6],\n      /*SAD*/\n      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],\n      /*SER*/\n      [H0, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __]\n    ];\n    var H7 = tls.handleClientHello;\n    var H8 = tls.handleClientKeyExchange;\n    var H9 = tls.handleCertificateVerify;\n    hsTable[tls.ConnectionEnd.server] = [\n      //      01,CH,02,03,04,05,06,07,08,09,10,CC,12,13,14,CV,CK,17,18,19,FI\n      /*CHE*/\n      [__, H7, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],\n      /*CCE*/\n      [__, __, __, __, __, __, __, __, __, __, __, H2, __, __, __, __, __, __, __, __, __],\n      /*CKE*/\n      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, H8, __, __, __, __],\n      /*CCV*/\n      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, H9, __, __, __, __, __],\n      /*CCC*/\n      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],\n      /*CFI*/\n      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, H6],\n      /*CAD*/\n      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __],\n      /*CER*/\n      [__, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __]\n    ];\n    tls.generateKeys = function(c, sp) {\n      var prf = prf_TLS1;\n      var random = sp.client_random + sp.server_random;\n      if (!c.session.resuming) {\n        sp.master_secret = prf(\n          sp.pre_master_secret,\n          \"master secret\",\n          random,\n          48\n        ).bytes();\n        sp.pre_master_secret = null;\n      }\n      random = sp.server_random + sp.client_random;\n      var length = 2 * sp.mac_key_length + 2 * sp.enc_key_length;\n      var tls10 = c.version.major === tls.Versions.TLS_1_0.major && c.version.minor === tls.Versions.TLS_1_0.minor;\n      if (tls10) {\n        length += 2 * sp.fixed_iv_length;\n      }\n      var km = prf(sp.master_secret, \"key expansion\", random, length);\n      var rval = {\n        client_write_MAC_key: km.getBytes(sp.mac_key_length),\n        server_write_MAC_key: km.getBytes(sp.mac_key_length),\n        client_write_key: km.getBytes(sp.enc_key_length),\n        server_write_key: km.getBytes(sp.enc_key_length)\n      };\n      if (tls10) {\n        rval.client_write_IV = km.getBytes(sp.fixed_iv_length);\n        rval.server_write_IV = km.getBytes(sp.fixed_iv_length);\n      }\n      return rval;\n    };\n    tls.createConnectionState = function(c) {\n      var client = c.entity === tls.ConnectionEnd.client;\n      var createMode = function() {\n        var mode = {\n          // two 32-bit numbers, first is most significant\n          sequenceNumber: [0, 0],\n          macKey: null,\n          macLength: 0,\n          macFunction: null,\n          cipherState: null,\n          cipherFunction: function(record) {\n            return true;\n          },\n          compressionState: null,\n          compressFunction: function(record) {\n            return true;\n          },\n          updateSequenceNumber: function() {\n            if (mode.sequenceNumber[1] === 4294967295) {\n              mode.sequenceNumber[1] = 0;\n              ++mode.sequenceNumber[0];\n            } else {\n              ++mode.sequenceNumber[1];\n            }\n          }\n        };\n        return mode;\n      };\n      var state = {\n        read: createMode(),\n        write: createMode()\n      };\n      state.read.update = function(c2, record) {\n        if (!state.read.cipherFunction(record, state.read)) {\n          c2.error(c2, {\n            message: \"Could not decrypt record or bad MAC.\",\n            send: true,\n            alert: {\n              level: tls.Alert.Level.fatal,\n              // doesn't matter if decryption failed or MAC was\n              // invalid, return the same error so as not to reveal\n              // which one occurred\n              description: tls.Alert.Description.bad_record_mac\n            }\n          });\n        } else if (!state.read.compressFunction(c2, record, state.read)) {\n          c2.error(c2, {\n            message: \"Could not decompress record.\",\n            send: true,\n            alert: {\n              level: tls.Alert.Level.fatal,\n              description: tls.Alert.Description.decompression_failure\n            }\n          });\n        }\n        return !c2.fail;\n      };\n      state.write.update = function(c2, record) {\n        if (!state.write.compressFunction(c2, record, state.write)) {\n          c2.error(c2, {\n            message: \"Could not compress record.\",\n            send: false,\n            alert: {\n              level: tls.Alert.Level.fatal,\n              description: tls.Alert.Description.internal_error\n            }\n          });\n        } else if (!state.write.cipherFunction(record, state.write)) {\n          c2.error(c2, {\n            message: \"Could not encrypt record.\",\n            send: false,\n            alert: {\n              level: tls.Alert.Level.fatal,\n              description: tls.Alert.Description.internal_error\n            }\n          });\n        }\n        return !c2.fail;\n      };\n      if (c.session) {\n        var sp = c.session.sp;\n        c.session.cipherSuite.initSecurityParameters(sp);\n        sp.keys = tls.generateKeys(c, sp);\n        state.read.macKey = client ? sp.keys.server_write_MAC_key : sp.keys.client_write_MAC_key;\n        state.write.macKey = client ? sp.keys.client_write_MAC_key : sp.keys.server_write_MAC_key;\n        c.session.cipherSuite.initConnectionState(state, c, sp);\n        switch (sp.compression_algorithm) {\n          case tls.CompressionMethod.none:\n            break;\n          case tls.CompressionMethod.deflate:\n            state.read.compressFunction = inflate;\n            state.write.compressFunction = deflate;\n            break;\n          default:\n            throw new Error(\"Unsupported compression algorithm.\");\n        }\n      }\n      return state;\n    };\n    tls.createRandom = function() {\n      var d = /* @__PURE__ */ new Date();\n      var utc = +d + d.getTimezoneOffset() * 6e4;\n      var rval = forge.util.createBuffer();\n      rval.putInt32(utc);\n      rval.putBytes(forge.random.getBytes(28));\n      return rval;\n    };\n    tls.createRecord = function(c, options) {\n      if (!options.data) {\n        return null;\n      }\n      var record = {\n        type: options.type,\n        version: {\n          major: c.version.major,\n          minor: c.version.minor\n        },\n        length: options.data.length(),\n        fragment: options.data\n      };\n      return record;\n    };\n    tls.createAlert = function(c, alert) {\n      var b = forge.util.createBuffer();\n      b.putByte(alert.level);\n      b.putByte(alert.description);\n      return tls.createRecord(c, {\n        type: tls.ContentType.alert,\n        data: b\n      });\n    };\n    tls.createClientHello = function(c) {\n      c.session.clientHelloVersion = {\n        major: c.version.major,\n        minor: c.version.minor\n      };\n      var cipherSuites = forge.util.createBuffer();\n      for (var i = 0; i < c.cipherSuites.length; ++i) {\n        var cs = c.cipherSuites[i];\n        cipherSuites.putByte(cs.id[0]);\n        cipherSuites.putByte(cs.id[1]);\n      }\n      var cSuites = cipherSuites.length();\n      var compressionMethods = forge.util.createBuffer();\n      compressionMethods.putByte(tls.CompressionMethod.none);\n      var cMethods = compressionMethods.length();\n      var extensions = forge.util.createBuffer();\n      if (c.virtualHost) {\n        var ext = forge.util.createBuffer();\n        ext.putByte(0);\n        ext.putByte(0);\n        var serverName = forge.util.createBuffer();\n        serverName.putByte(0);\n        writeVector(serverName, 2, forge.util.createBuffer(c.virtualHost));\n        var snList = forge.util.createBuffer();\n        writeVector(snList, 2, serverName);\n        writeVector(ext, 2, snList);\n        extensions.putBuffer(ext);\n      }\n      var extLength = extensions.length();\n      if (extLength > 0) {\n        extLength += 2;\n      }\n      var sessionId = c.session.id;\n      var length = sessionId.length + 1 + // session ID vector\n      2 + // version (major + minor)\n      4 + 28 + // random time and random bytes\n      2 + cSuites + // cipher suites vector\n      1 + cMethods + // compression methods vector\n      extLength;\n      var rval = forge.util.createBuffer();\n      rval.putByte(tls.HandshakeType.client_hello);\n      rval.putInt24(length);\n      rval.putByte(c.version.major);\n      rval.putByte(c.version.minor);\n      rval.putBytes(c.session.sp.client_random);\n      writeVector(rval, 1, forge.util.createBuffer(sessionId));\n      writeVector(rval, 2, cipherSuites);\n      writeVector(rval, 1, compressionMethods);\n      if (extLength > 0) {\n        writeVector(rval, 2, extensions);\n      }\n      return rval;\n    };\n    tls.createServerHello = function(c) {\n      var sessionId = c.session.id;\n      var length = sessionId.length + 1 + // session ID vector\n      2 + // version (major + minor)\n      4 + 28 + // random time and random bytes\n      2 + // chosen cipher suite\n      1;\n      var rval = forge.util.createBuffer();\n      rval.putByte(tls.HandshakeType.server_hello);\n      rval.putInt24(length);\n      rval.putByte(c.version.major);\n      rval.putByte(c.version.minor);\n      rval.putBytes(c.session.sp.server_random);\n      writeVector(rval, 1, forge.util.createBuffer(sessionId));\n      rval.putByte(c.session.cipherSuite.id[0]);\n      rval.putByte(c.session.cipherSuite.id[1]);\n      rval.putByte(c.session.compressionMethod);\n      return rval;\n    };\n    tls.createCertificate = function(c) {\n      var client = c.entity === tls.ConnectionEnd.client;\n      var cert = null;\n      if (c.getCertificate) {\n        var hint;\n        if (client) {\n          hint = c.session.certificateRequest;\n        } else {\n          hint = c.session.extensions.server_name.serverNameList;\n        }\n        cert = c.getCertificate(c, hint);\n      }\n      var certList = forge.util.createBuffer();\n      if (cert !== null) {\n        try {\n          if (!forge.util.isArray(cert)) {\n            cert = [cert];\n          }\n          var asn1 = null;\n          for (var i = 0; i < cert.length; ++i) {\n            var msg = forge.pem.decode(cert[i])[0];\n            if (msg.type !== \"CERTIFICATE\" && msg.type !== \"X509 CERTIFICATE\" && msg.type !== \"TRUSTED CERTIFICATE\") {\n              var error = new Error('Could not convert certificate from PEM; PEM header type is not \"CERTIFICATE\", \"X509 CERTIFICATE\", or \"TRUSTED CERTIFICATE\".');\n              error.headerType = msg.type;\n              throw error;\n            }\n            if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n              throw new Error(\"Could not convert certificate from PEM; PEM is encrypted.\");\n            }\n            var der = forge.util.createBuffer(msg.body);\n            if (asn1 === null) {\n              asn1 = forge.asn1.fromDer(der.bytes(), false);\n            }\n            var certBuffer = forge.util.createBuffer();\n            writeVector(certBuffer, 3, der);\n            certList.putBuffer(certBuffer);\n          }\n          cert = forge.pki.certificateFromAsn1(asn1);\n          if (client) {\n            c.session.clientCertificate = cert;\n          } else {\n            c.session.serverCertificate = cert;\n          }\n        } catch (ex) {\n          return c.error(c, {\n            message: \"Could not send certificate list.\",\n            cause: ex,\n            send: true,\n            alert: {\n              level: tls.Alert.Level.fatal,\n              description: tls.Alert.Description.bad_certificate\n            }\n          });\n        }\n      }\n      var length = 3 + certList.length();\n      var rval = forge.util.createBuffer();\n      rval.putByte(tls.HandshakeType.certificate);\n      rval.putInt24(length);\n      writeVector(rval, 3, certList);\n      return rval;\n    };\n    tls.createClientKeyExchange = function(c) {\n      var b = forge.util.createBuffer();\n      b.putByte(c.session.clientHelloVersion.major);\n      b.putByte(c.session.clientHelloVersion.minor);\n      b.putBytes(forge.random.getBytes(46));\n      var sp = c.session.sp;\n      sp.pre_master_secret = b.getBytes();\n      var key2 = c.session.serverCertificate.publicKey;\n      b = key2.encrypt(sp.pre_master_secret);\n      var length = b.length + 2;\n      var rval = forge.util.createBuffer();\n      rval.putByte(tls.HandshakeType.client_key_exchange);\n      rval.putInt24(length);\n      rval.putInt16(b.length);\n      rval.putBytes(b);\n      return rval;\n    };\n    tls.createServerKeyExchange = function(c) {\n      var length = 0;\n      var rval = forge.util.createBuffer();\n      if (length > 0) {\n        rval.putByte(tls.HandshakeType.server_key_exchange);\n        rval.putInt24(length);\n      }\n      return rval;\n    };\n    tls.getClientSignature = function(c, callback) {\n      var b = forge.util.createBuffer();\n      b.putBuffer(c.session.md5.digest());\n      b.putBuffer(c.session.sha1.digest());\n      b = b.getBytes();\n      c.getSignature = c.getSignature || function(c2, b2, callback2) {\n        var privateKey = null;\n        if (c2.getPrivateKey) {\n          try {\n            privateKey = c2.getPrivateKey(c2, c2.session.clientCertificate);\n            privateKey = forge.pki.privateKeyFromPem(privateKey);\n          } catch (ex) {\n            c2.error(c2, {\n              message: \"Could not get private key.\",\n              cause: ex,\n              send: true,\n              alert: {\n                level: tls.Alert.Level.fatal,\n                description: tls.Alert.Description.internal_error\n              }\n            });\n          }\n        }\n        if (privateKey === null) {\n          c2.error(c2, {\n            message: \"No private key set.\",\n            send: true,\n            alert: {\n              level: tls.Alert.Level.fatal,\n              description: tls.Alert.Description.internal_error\n            }\n          });\n        } else {\n          b2 = privateKey.sign(b2, null);\n        }\n        callback2(c2, b2);\n      };\n      c.getSignature(c, b, callback);\n    };\n    tls.createCertificateVerify = function(c, signature) {\n      var length = signature.length + 2;\n      var rval = forge.util.createBuffer();\n      rval.putByte(tls.HandshakeType.certificate_verify);\n      rval.putInt24(length);\n      rval.putInt16(signature.length);\n      rval.putBytes(signature);\n      return rval;\n    };\n    tls.createCertificateRequest = function(c) {\n      var certTypes = forge.util.createBuffer();\n      certTypes.putByte(1);\n      var cAs = forge.util.createBuffer();\n      for (var key2 in c.caStore.certs) {\n        var cert = c.caStore.certs[key2];\n        var dn = forge.pki.distinguishedNameToAsn1(cert.subject);\n        var byteBuffer = forge.asn1.toDer(dn);\n        cAs.putInt16(byteBuffer.length());\n        cAs.putBuffer(byteBuffer);\n      }\n      var length = 1 + certTypes.length() + 2 + cAs.length();\n      var rval = forge.util.createBuffer();\n      rval.putByte(tls.HandshakeType.certificate_request);\n      rval.putInt24(length);\n      writeVector(rval, 1, certTypes);\n      writeVector(rval, 2, cAs);\n      return rval;\n    };\n    tls.createServerHelloDone = function(c) {\n      var rval = forge.util.createBuffer();\n      rval.putByte(tls.HandshakeType.server_hello_done);\n      rval.putInt24(0);\n      return rval;\n    };\n    tls.createChangeCipherSpec = function() {\n      var rval = forge.util.createBuffer();\n      rval.putByte(1);\n      return rval;\n    };\n    tls.createFinished = function(c) {\n      var b = forge.util.createBuffer();\n      b.putBuffer(c.session.md5.digest());\n      b.putBuffer(c.session.sha1.digest());\n      var client = c.entity === tls.ConnectionEnd.client;\n      var sp = c.session.sp;\n      var vdl = 12;\n      var prf = prf_TLS1;\n      var label = client ? \"client finished\" : \"server finished\";\n      b = prf(sp.master_secret, label, b.getBytes(), vdl);\n      var rval = forge.util.createBuffer();\n      rval.putByte(tls.HandshakeType.finished);\n      rval.putInt24(b.length());\n      rval.putBuffer(b);\n      return rval;\n    };\n    tls.createHeartbeat = function(type, payload, payloadLength) {\n      if (typeof payloadLength === \"undefined\") {\n        payloadLength = payload.length;\n      }\n      var rval = forge.util.createBuffer();\n      rval.putByte(type);\n      rval.putInt16(payloadLength);\n      rval.putBytes(payload);\n      var plaintextLength = rval.length();\n      var paddingLength = Math.max(16, plaintextLength - payloadLength - 3);\n      rval.putBytes(forge.random.getBytes(paddingLength));\n      return rval;\n    };\n    tls.queue = function(c, record) {\n      if (!record) {\n        return;\n      }\n      if (record.fragment.length() === 0) {\n        if (record.type === tls.ContentType.handshake || record.type === tls.ContentType.alert || record.type === tls.ContentType.change_cipher_spec) {\n          return;\n        }\n      }\n      if (record.type === tls.ContentType.handshake) {\n        var bytes = record.fragment.bytes();\n        c.session.md5.update(bytes);\n        c.session.sha1.update(bytes);\n        bytes = null;\n      }\n      var records;\n      if (record.fragment.length() <= tls.MaxFragment) {\n        records = [record];\n      } else {\n        records = [];\n        var data = record.fragment.bytes();\n        while (data.length > tls.MaxFragment) {\n          records.push(tls.createRecord(c, {\n            type: record.type,\n            data: forge.util.createBuffer(data.slice(0, tls.MaxFragment))\n          }));\n          data = data.slice(tls.MaxFragment);\n        }\n        if (data.length > 0) {\n          records.push(tls.createRecord(c, {\n            type: record.type,\n            data: forge.util.createBuffer(data)\n          }));\n        }\n      }\n      for (var i = 0; i < records.length && !c.fail; ++i) {\n        var rec = records[i];\n        var s = c.state.current.write;\n        if (s.update(c, rec)) {\n          c.records.push(rec);\n        }\n      }\n    };\n    tls.flush = function(c) {\n      for (var i = 0; i < c.records.length; ++i) {\n        var record = c.records[i];\n        c.tlsData.putByte(record.type);\n        c.tlsData.putByte(record.version.major);\n        c.tlsData.putByte(record.version.minor);\n        c.tlsData.putInt16(record.fragment.length());\n        c.tlsData.putBuffer(c.records[i].fragment);\n      }\n      c.records = [];\n      return c.tlsDataReady(c);\n    };\n    var _certErrorToAlertDesc = function(error) {\n      switch (error) {\n        case true:\n          return true;\n        case forge.pki.certificateError.bad_certificate:\n          return tls.Alert.Description.bad_certificate;\n        case forge.pki.certificateError.unsupported_certificate:\n          return tls.Alert.Description.unsupported_certificate;\n        case forge.pki.certificateError.certificate_revoked:\n          return tls.Alert.Description.certificate_revoked;\n        case forge.pki.certificateError.certificate_expired:\n          return tls.Alert.Description.certificate_expired;\n        case forge.pki.certificateError.certificate_unknown:\n          return tls.Alert.Description.certificate_unknown;\n        case forge.pki.certificateError.unknown_ca:\n          return tls.Alert.Description.unknown_ca;\n        default:\n          return tls.Alert.Description.bad_certificate;\n      }\n    };\n    var _alertDescToCertError = function(desc) {\n      switch (desc) {\n        case true:\n          return true;\n        case tls.Alert.Description.bad_certificate:\n          return forge.pki.certificateError.bad_certificate;\n        case tls.Alert.Description.unsupported_certificate:\n          return forge.pki.certificateError.unsupported_certificate;\n        case tls.Alert.Description.certificate_revoked:\n          return forge.pki.certificateError.certificate_revoked;\n        case tls.Alert.Description.certificate_expired:\n          return forge.pki.certificateError.certificate_expired;\n        case tls.Alert.Description.certificate_unknown:\n          return forge.pki.certificateError.certificate_unknown;\n        case tls.Alert.Description.unknown_ca:\n          return forge.pki.certificateError.unknown_ca;\n        default:\n          return forge.pki.certificateError.bad_certificate;\n      }\n    };\n    tls.verifyCertificateChain = function(c, chain) {\n      try {\n        var options = {};\n        for (var key2 in c.verifyOptions) {\n          options[key2] = c.verifyOptions[key2];\n        }\n        options.verify = function(vfd, depth, chain2) {\n          var desc = _certErrorToAlertDesc(vfd);\n          var ret = c.verify(c, vfd, depth, chain2);\n          if (ret !== true) {\n            if (typeof ret === \"object\" && !forge.util.isArray(ret)) {\n              var error = new Error(\"The application rejected the certificate.\");\n              error.send = true;\n              error.alert = {\n                level: tls.Alert.Level.fatal,\n                description: tls.Alert.Description.bad_certificate\n              };\n              if (ret.message) {\n                error.message = ret.message;\n              }\n              if (ret.alert) {\n                error.alert.description = ret.alert;\n              }\n              throw error;\n            }\n            if (ret !== vfd) {\n              ret = _alertDescToCertError(ret);\n            }\n          }\n          return ret;\n        };\n        forge.pki.verifyCertificateChain(c.caStore, chain, options);\n      } catch (ex) {\n        var err = ex;\n        if (typeof err !== \"object\" || forge.util.isArray(err)) {\n          err = {\n            send: true,\n            alert: {\n              level: tls.Alert.Level.fatal,\n              description: _certErrorToAlertDesc(ex)\n            }\n          };\n        }\n        if (!(\"send\" in err)) {\n          err.send = true;\n        }\n        if (!(\"alert\" in err)) {\n          err.alert = {\n            level: tls.Alert.Level.fatal,\n            description: _certErrorToAlertDesc(err.error)\n          };\n        }\n        c.error(c, err);\n      }\n      return !c.fail;\n    };\n    tls.createSessionCache = function(cache, capacity) {\n      var rval = null;\n      if (cache && cache.getSession && cache.setSession && cache.order) {\n        rval = cache;\n      } else {\n        rval = {};\n        rval.cache = cache || {};\n        rval.capacity = Math.max(capacity || 100, 1);\n        rval.order = [];\n        for (var key2 in cache) {\n          if (rval.order.length <= capacity) {\n            rval.order.push(key2);\n          } else {\n            delete cache[key2];\n          }\n        }\n        rval.getSession = function(sessionId) {\n          var session = null;\n          var key3 = null;\n          if (sessionId) {\n            key3 = forge.util.bytesToHex(sessionId);\n          } else if (rval.order.length > 0) {\n            key3 = rval.order[0];\n          }\n          if (key3 !== null && key3 in rval.cache) {\n            session = rval.cache[key3];\n            delete rval.cache[key3];\n            for (var i in rval.order) {\n              if (rval.order[i] === key3) {\n                rval.order.splice(i, 1);\n                break;\n              }\n            }\n          }\n          return session;\n        };\n        rval.setSession = function(sessionId, session) {\n          if (rval.order.length === rval.capacity) {\n            var key3 = rval.order.shift();\n            delete rval.cache[key3];\n          }\n          var key3 = forge.util.bytesToHex(sessionId);\n          rval.order.push(key3);\n          rval.cache[key3] = session;\n        };\n      }\n      return rval;\n    };\n    tls.createConnection = function(options) {\n      var caStore = null;\n      if (options.caStore) {\n        if (forge.util.isArray(options.caStore)) {\n          caStore = forge.pki.createCaStore(options.caStore);\n        } else {\n          caStore = options.caStore;\n        }\n      } else {\n        caStore = forge.pki.createCaStore();\n      }\n      var cipherSuites = options.cipherSuites || null;\n      if (cipherSuites === null) {\n        cipherSuites = [];\n        for (var key2 in tls.CipherSuites) {\n          cipherSuites.push(tls.CipherSuites[key2]);\n        }\n      }\n      var entity = options.server || false ? tls.ConnectionEnd.server : tls.ConnectionEnd.client;\n      var sessionCache = options.sessionCache ? tls.createSessionCache(options.sessionCache) : null;\n      var c = {\n        version: { major: tls.Version.major, minor: tls.Version.minor },\n        entity,\n        sessionId: options.sessionId,\n        caStore,\n        sessionCache,\n        cipherSuites,\n        connected: options.connected,\n        virtualHost: options.virtualHost || null,\n        verifyClient: options.verifyClient || false,\n        verify: options.verify || function(cn, vfd, dpth, cts) {\n          return vfd;\n        },\n        verifyOptions: options.verifyOptions || {},\n        getCertificate: options.getCertificate || null,\n        getPrivateKey: options.getPrivateKey || null,\n        getSignature: options.getSignature || null,\n        input: forge.util.createBuffer(),\n        tlsData: forge.util.createBuffer(),\n        data: forge.util.createBuffer(),\n        tlsDataReady: options.tlsDataReady,\n        dataReady: options.dataReady,\n        heartbeatReceived: options.heartbeatReceived,\n        closed: options.closed,\n        error: function(c2, ex) {\n          ex.origin = ex.origin || (c2.entity === tls.ConnectionEnd.client ? \"client\" : \"server\");\n          if (ex.send) {\n            tls.queue(c2, tls.createAlert(c2, ex.alert));\n            tls.flush(c2);\n          }\n          var fatal = ex.fatal !== false;\n          if (fatal) {\n            c2.fail = true;\n          }\n          options.error(c2, ex);\n          if (fatal) {\n            c2.close(false);\n          }\n        },\n        deflate: options.deflate || null,\n        inflate: options.inflate || null\n      };\n      c.reset = function(clearFail) {\n        c.version = { major: tls.Version.major, minor: tls.Version.minor };\n        c.record = null;\n        c.session = null;\n        c.peerCertificate = null;\n        c.state = {\n          pending: null,\n          current: null\n        };\n        c.expect = c.entity === tls.ConnectionEnd.client ? SHE : CHE;\n        c.fragmented = null;\n        c.records = [];\n        c.open = false;\n        c.handshakes = 0;\n        c.handshaking = false;\n        c.isConnected = false;\n        c.fail = !(clearFail || typeof clearFail === \"undefined\");\n        c.input.clear();\n        c.tlsData.clear();\n        c.data.clear();\n        c.state.current = tls.createConnectionState(c);\n      };\n      c.reset();\n      var _update = function(c2, record) {\n        var aligned = record.type - tls.ContentType.change_cipher_spec;\n        var handlers = ctTable[c2.entity][c2.expect];\n        if (aligned in handlers) {\n          handlers[aligned](c2, record);\n        } else {\n          tls.handleUnexpected(c2, record);\n        }\n      };\n      var _readRecordHeader = function(c2) {\n        var rval = 0;\n        var b = c2.input;\n        var len = b.length();\n        if (len < 5) {\n          rval = 5 - len;\n        } else {\n          c2.record = {\n            type: b.getByte(),\n            version: {\n              major: b.getByte(),\n              minor: b.getByte()\n            },\n            length: b.getInt16(),\n            fragment: forge.util.createBuffer(),\n            ready: false\n          };\n          var compatibleVersion = c2.record.version.major === c2.version.major;\n          if (compatibleVersion && c2.session && c2.session.version) {\n            compatibleVersion = c2.record.version.minor === c2.version.minor;\n          }\n          if (!compatibleVersion) {\n            c2.error(c2, {\n              message: \"Incompatible TLS version.\",\n              send: true,\n              alert: {\n                level: tls.Alert.Level.fatal,\n                description: tls.Alert.Description.protocol_version\n              }\n            });\n          }\n        }\n        return rval;\n      };\n      var _readRecord = function(c2) {\n        var rval = 0;\n        var b = c2.input;\n        var len = b.length();\n        if (len < c2.record.length) {\n          rval = c2.record.length - len;\n        } else {\n          c2.record.fragment.putBytes(b.getBytes(c2.record.length));\n          b.compact();\n          var s = c2.state.current.read;\n          if (s.update(c2, c2.record)) {\n            if (c2.fragmented !== null) {\n              if (c2.fragmented.type === c2.record.type) {\n                c2.fragmented.fragment.putBuffer(c2.record.fragment);\n                c2.record = c2.fragmented;\n              } else {\n                c2.error(c2, {\n                  message: \"Invalid fragmented record.\",\n                  send: true,\n                  alert: {\n                    level: tls.Alert.Level.fatal,\n                    description: tls.Alert.Description.unexpected_message\n                  }\n                });\n              }\n            }\n            c2.record.ready = true;\n          }\n        }\n        return rval;\n      };\n      c.handshake = function(sessionId) {\n        if (c.entity !== tls.ConnectionEnd.client) {\n          c.error(c, {\n            message: \"Cannot initiate handshake as a server.\",\n            fatal: false\n          });\n        } else if (c.handshaking) {\n          c.error(c, {\n            message: \"Handshake already in progress.\",\n            fatal: false\n          });\n        } else {\n          if (c.fail && !c.open && c.handshakes === 0) {\n            c.fail = false;\n          }\n          c.handshaking = true;\n          sessionId = sessionId || \"\";\n          var session = null;\n          if (sessionId.length > 0) {\n            if (c.sessionCache) {\n              session = c.sessionCache.getSession(sessionId);\n            }\n            if (session === null) {\n              sessionId = \"\";\n            }\n          }\n          if (sessionId.length === 0 && c.sessionCache) {\n            session = c.sessionCache.getSession();\n            if (session !== null) {\n              sessionId = session.id;\n            }\n          }\n          c.session = {\n            id: sessionId,\n            version: null,\n            cipherSuite: null,\n            compressionMethod: null,\n            serverCertificate: null,\n            certificateRequest: null,\n            clientCertificate: null,\n            sp: {},\n            md5: forge.md.md5.create(),\n            sha1: forge.md.sha1.create()\n          };\n          if (session) {\n            c.version = session.version;\n            c.session.sp = session.sp;\n          }\n          c.session.sp.client_random = tls.createRandom().getBytes();\n          c.open = true;\n          tls.queue(c, tls.createRecord(c, {\n            type: tls.ContentType.handshake,\n            data: tls.createClientHello(c)\n          }));\n          tls.flush(c);\n        }\n      };\n      c.process = function(data) {\n        var rval = 0;\n        if (data) {\n          c.input.putBytes(data);\n        }\n        if (!c.fail) {\n          if (c.record !== null && c.record.ready && c.record.fragment.isEmpty()) {\n            c.record = null;\n          }\n          if (c.record === null) {\n            rval = _readRecordHeader(c);\n          }\n          if (!c.fail && c.record !== null && !c.record.ready) {\n            rval = _readRecord(c);\n          }\n          if (!c.fail && c.record !== null && c.record.ready) {\n            _update(c, c.record);\n          }\n        }\n        return rval;\n      };\n      c.prepare = function(data) {\n        tls.queue(c, tls.createRecord(c, {\n          type: tls.ContentType.application_data,\n          data: forge.util.createBuffer(data)\n        }));\n        return tls.flush(c);\n      };\n      c.prepareHeartbeatRequest = function(payload, payloadLength) {\n        if (payload instanceof forge.util.ByteBuffer) {\n          payload = payload.bytes();\n        }\n        if (typeof payloadLength === \"undefined\") {\n          payloadLength = payload.length;\n        }\n        c.expectedHeartbeatPayload = payload;\n        tls.queue(c, tls.createRecord(c, {\n          type: tls.ContentType.heartbeat,\n          data: tls.createHeartbeat(\n            tls.HeartbeatMessageType.heartbeat_request,\n            payload,\n            payloadLength\n          )\n        }));\n        return tls.flush(c);\n      };\n      c.close = function(clearFail) {\n        if (!c.fail && c.sessionCache && c.session) {\n          var session = {\n            id: c.session.id,\n            version: c.session.version,\n            sp: c.session.sp\n          };\n          session.sp.keys = null;\n          c.sessionCache.setSession(session.id, session);\n        }\n        if (c.open) {\n          c.open = false;\n          c.input.clear();\n          if (c.isConnected || c.handshaking) {\n            c.isConnected = c.handshaking = false;\n            tls.queue(c, tls.createAlert(c, {\n              level: tls.Alert.Level.warning,\n              description: tls.Alert.Description.close_notify\n            }));\n            tls.flush(c);\n          }\n          c.closed(c);\n        }\n        c.reset(clearFail);\n      };\n      return c;\n    };\n    module2.exports = forge.tls = forge.tls || {};\n    for (key in tls) {\n      if (typeof tls[key] !== \"function\") {\n        forge.tls[key] = tls[key];\n      }\n    }\n    var key;\n    forge.tls.prf_tls1 = prf_TLS1;\n    forge.tls.hmac_sha1 = hmac_sha1;\n    forge.tls.createSessionCache = tls.createSessionCache;\n    forge.tls.createConnection = tls.createConnection;\n  }\n});\n\n// ../../node_modules/node-forge/lib/aesCipherSuites.js\nvar require_aesCipherSuites = __commonJS({\n  \"../../node_modules/node-forge/lib/aesCipherSuites.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_aes();\n    require_tls();\n    var tls = module2.exports = forge.tls;\n    tls.CipherSuites[\"TLS_RSA_WITH_AES_128_CBC_SHA\"] = {\n      id: [0, 47],\n      name: \"TLS_RSA_WITH_AES_128_CBC_SHA\",\n      initSecurityParameters: function(sp) {\n        sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;\n        sp.cipher_type = tls.CipherType.block;\n        sp.enc_key_length = 16;\n        sp.block_length = 16;\n        sp.fixed_iv_length = 16;\n        sp.record_iv_length = 16;\n        sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;\n        sp.mac_length = 20;\n        sp.mac_key_length = 20;\n      },\n      initConnectionState\n    };\n    tls.CipherSuites[\"TLS_RSA_WITH_AES_256_CBC_SHA\"] = {\n      id: [0, 53],\n      name: \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n      initSecurityParameters: function(sp) {\n        sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;\n        sp.cipher_type = tls.CipherType.block;\n        sp.enc_key_length = 32;\n        sp.block_length = 16;\n        sp.fixed_iv_length = 16;\n        sp.record_iv_length = 16;\n        sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;\n        sp.mac_length = 20;\n        sp.mac_key_length = 20;\n      },\n      initConnectionState\n    };\n    function initConnectionState(state, c, sp) {\n      var client = c.entity === forge.tls.ConnectionEnd.client;\n      state.read.cipherState = {\n        init: false,\n        cipher: forge.cipher.createDecipher(\"AES-CBC\", client ? sp.keys.server_write_key : sp.keys.client_write_key),\n        iv: client ? sp.keys.server_write_IV : sp.keys.client_write_IV\n      };\n      state.write.cipherState = {\n        init: false,\n        cipher: forge.cipher.createCipher(\"AES-CBC\", client ? sp.keys.client_write_key : sp.keys.server_write_key),\n        iv: client ? sp.keys.client_write_IV : sp.keys.server_write_IV\n      };\n      state.read.cipherFunction = decrypt_aes_cbc_sha1;\n      state.write.cipherFunction = encrypt_aes_cbc_sha1;\n      state.read.macLength = state.write.macLength = sp.mac_length;\n      state.read.macFunction = state.write.macFunction = tls.hmac_sha1;\n    }\n    function encrypt_aes_cbc_sha1(record, s) {\n      var rval = false;\n      var mac = s.macFunction(s.macKey, s.sequenceNumber, record);\n      record.fragment.putBytes(mac);\n      s.updateSequenceNumber();\n      var iv;\n      if (record.version.minor === tls.Versions.TLS_1_0.minor) {\n        iv = s.cipherState.init ? null : s.cipherState.iv;\n      } else {\n        iv = forge.random.getBytesSync(16);\n      }\n      s.cipherState.init = true;\n      var cipher = s.cipherState.cipher;\n      cipher.start({ iv });\n      if (record.version.minor >= tls.Versions.TLS_1_1.minor) {\n        cipher.output.putBytes(iv);\n      }\n      cipher.update(record.fragment);\n      if (cipher.finish(encrypt_aes_cbc_sha1_padding)) {\n        record.fragment = cipher.output;\n        record.length = record.fragment.length();\n        rval = true;\n      }\n      return rval;\n    }\n    function encrypt_aes_cbc_sha1_padding(blockSize, input, decrypt) {\n      if (!decrypt) {\n        var padding = blockSize - input.length() % blockSize;\n        input.fillWithByte(padding - 1, padding);\n      }\n      return true;\n    }\n    function decrypt_aes_cbc_sha1_padding(blockSize, output, decrypt) {\n      var rval = true;\n      if (decrypt) {\n        var len = output.length();\n        var paddingLength = output.last();\n        for (var i = len - 1 - paddingLength; i < len - 1; ++i) {\n          rval = rval && output.at(i) == paddingLength;\n        }\n        if (rval) {\n          output.truncate(paddingLength + 1);\n        }\n      }\n      return rval;\n    }\n    function decrypt_aes_cbc_sha1(record, s) {\n      var rval = false;\n      var iv;\n      if (record.version.minor === tls.Versions.TLS_1_0.minor) {\n        iv = s.cipherState.init ? null : s.cipherState.iv;\n      } else {\n        iv = record.fragment.getBytes(16);\n      }\n      s.cipherState.init = true;\n      var cipher = s.cipherState.cipher;\n      cipher.start({ iv });\n      cipher.update(record.fragment);\n      rval = cipher.finish(decrypt_aes_cbc_sha1_padding);\n      var macLen = s.macLength;\n      var mac = forge.random.getBytesSync(macLen);\n      var len = cipher.output.length();\n      if (len >= macLen) {\n        record.fragment = cipher.output.getBytes(len - macLen);\n        mac = cipher.output.getBytes(macLen);\n      } else {\n        record.fragment = cipher.output.getBytes();\n      }\n      record.fragment = forge.util.createBuffer(record.fragment);\n      record.length = record.fragment.length();\n      var mac2 = s.macFunction(s.macKey, s.sequenceNumber, record);\n      s.updateSequenceNumber();\n      rval = compareMacs(s.macKey, mac, mac2) && rval;\n      return rval;\n    }\n    function compareMacs(key, mac1, mac2) {\n      var hmac = forge.hmac.create();\n      hmac.start(\"SHA1\", key);\n      hmac.update(mac1);\n      mac1 = hmac.digest().getBytes();\n      hmac.start(null, null);\n      hmac.update(mac2);\n      mac2 = hmac.digest().getBytes();\n      return mac1 === mac2;\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/sha512.js\nvar require_sha512 = __commonJS({\n  \"../../node_modules/node-forge/lib/sha512.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_md();\n    require_util();\n    var sha512 = module2.exports = forge.sha512 = forge.sha512 || {};\n    forge.md.sha512 = forge.md.algorithms.sha512 = sha512;\n    var sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};\n    sha384.create = function() {\n      return sha512.create(\"SHA-384\");\n    };\n    forge.md.sha384 = forge.md.algorithms.sha384 = sha384;\n    forge.sha512.sha256 = forge.sha512.sha256 || {\n      create: function() {\n        return sha512.create(\"SHA-512/256\");\n      }\n    };\n    forge.md[\"sha512/256\"] = forge.md.algorithms[\"sha512/256\"] = forge.sha512.sha256;\n    forge.sha512.sha224 = forge.sha512.sha224 || {\n      create: function() {\n        return sha512.create(\"SHA-512/224\");\n      }\n    };\n    forge.md[\"sha512/224\"] = forge.md.algorithms[\"sha512/224\"] = forge.sha512.sha224;\n    sha512.create = function(algorithm) {\n      if (!_initialized) {\n        _init();\n      }\n      if (typeof algorithm === \"undefined\") {\n        algorithm = \"SHA-512\";\n      }\n      if (!(algorithm in _states)) {\n        throw new Error(\"Invalid SHA-512 algorithm: \" + algorithm);\n      }\n      var _state = _states[algorithm];\n      var _h = null;\n      var _input = forge.util.createBuffer();\n      var _w = new Array(80);\n      for (var wi = 0; wi < 80; ++wi) {\n        _w[wi] = new Array(2);\n      }\n      var digestLength = 64;\n      switch (algorithm) {\n        case \"SHA-384\":\n          digestLength = 48;\n          break;\n        case \"SHA-512/256\":\n          digestLength = 32;\n          break;\n        case \"SHA-512/224\":\n          digestLength = 28;\n          break;\n      }\n      var md = {\n        // SHA-512 => sha512\n        algorithm: algorithm.replace(\"-\", \"\").toLowerCase(),\n        blockLength: 128,\n        digestLength,\n        // 56-bit length of message so far (does not including padding)\n        messageLength: 0,\n        // true message length\n        fullMessageLength: null,\n        // size of message length in bytes\n        messageLengthSize: 16\n      };\n      md.start = function() {\n        md.messageLength = 0;\n        md.fullMessageLength = md.messageLength128 = [];\n        var int32s = md.messageLengthSize / 4;\n        for (var i = 0; i < int32s; ++i) {\n          md.fullMessageLength.push(0);\n        }\n        _input = forge.util.createBuffer();\n        _h = new Array(_state.length);\n        for (var i = 0; i < _state.length; ++i) {\n          _h[i] = _state[i].slice(0);\n        }\n        return md;\n      };\n      md.start();\n      md.update = function(msg, encoding) {\n        if (encoding === \"utf8\") {\n          msg = forge.util.encodeUtf8(msg);\n        }\n        var len = msg.length;\n        md.messageLength += len;\n        len = [len / 4294967296 >>> 0, len >>> 0];\n        for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n          md.fullMessageLength[i] += len[1];\n          len[1] = len[0] + (md.fullMessageLength[i] / 4294967296 >>> 0);\n          md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n          len[0] = len[1] / 4294967296 >>> 0;\n        }\n        _input.putBytes(msg);\n        _update(_h, _w, _input);\n        if (_input.read > 2048 || _input.length() === 0) {\n          _input.compact();\n        }\n        return md;\n      };\n      md.digest = function() {\n        var finalBlock = forge.util.createBuffer();\n        finalBlock.putBytes(_input.bytes());\n        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;\n        var overflow = remaining & md.blockLength - 1;\n        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n        var next, carry;\n        var bits = md.fullMessageLength[0] * 8;\n        for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {\n          next = md.fullMessageLength[i + 1] * 8;\n          carry = next / 4294967296 >>> 0;\n          bits += carry;\n          finalBlock.putInt32(bits >>> 0);\n          bits = next >>> 0;\n        }\n        finalBlock.putInt32(bits);\n        var h = new Array(_h.length);\n        for (var i = 0; i < _h.length; ++i) {\n          h[i] = _h[i].slice(0);\n        }\n        _update(h, _w, finalBlock);\n        var rval = forge.util.createBuffer();\n        var hlen;\n        if (algorithm === \"SHA-512\") {\n          hlen = h.length;\n        } else if (algorithm === \"SHA-384\") {\n          hlen = h.length - 2;\n        } else {\n          hlen = h.length - 4;\n        }\n        for (var i = 0; i < hlen; ++i) {\n          rval.putInt32(h[i][0]);\n          if (i !== hlen - 1 || algorithm !== \"SHA-512/224\") {\n            rval.putInt32(h[i][1]);\n          }\n        }\n        return rval;\n      };\n      return md;\n    };\n    var _padding = null;\n    var _initialized = false;\n    var _k = null;\n    var _states = null;\n    function _init() {\n      _padding = String.fromCharCode(128);\n      _padding += forge.util.fillString(String.fromCharCode(0), 128);\n      _k = [\n        [1116352408, 3609767458],\n        [1899447441, 602891725],\n        [3049323471, 3964484399],\n        [3921009573, 2173295548],\n        [961987163, 4081628472],\n        [1508970993, 3053834265],\n        [2453635748, 2937671579],\n        [2870763221, 3664609560],\n        [3624381080, 2734883394],\n        [310598401, 1164996542],\n        [607225278, 1323610764],\n        [1426881987, 3590304994],\n        [1925078388, 4068182383],\n        [2162078206, 991336113],\n        [2614888103, 633803317],\n        [3248222580, 3479774868],\n        [3835390401, 2666613458],\n        [4022224774, 944711139],\n        [264347078, 2341262773],\n        [604807628, 2007800933],\n        [770255983, 1495990901],\n        [1249150122, 1856431235],\n        [1555081692, 3175218132],\n        [1996064986, 2198950837],\n        [2554220882, 3999719339],\n        [2821834349, 766784016],\n        [2952996808, 2566594879],\n        [3210313671, 3203337956],\n        [3336571891, 1034457026],\n        [3584528711, 2466948901],\n        [113926993, 3758326383],\n        [338241895, 168717936],\n        [666307205, 1188179964],\n        [773529912, 1546045734],\n        [1294757372, 1522805485],\n        [1396182291, 2643833823],\n        [1695183700, 2343527390],\n        [1986661051, 1014477480],\n        [2177026350, 1206759142],\n        [2456956037, 344077627],\n        [2730485921, 1290863460],\n        [2820302411, 3158454273],\n        [3259730800, 3505952657],\n        [3345764771, 106217008],\n        [3516065817, 3606008344],\n        [3600352804, 1432725776],\n        [4094571909, 1467031594],\n        [275423344, 851169720],\n        [430227734, 3100823752],\n        [506948616, 1363258195],\n        [659060556, 3750685593],\n        [883997877, 3785050280],\n        [958139571, 3318307427],\n        [1322822218, 3812723403],\n        [1537002063, 2003034995],\n        [1747873779, 3602036899],\n        [1955562222, 1575990012],\n        [2024104815, 1125592928],\n        [2227730452, 2716904306],\n        [2361852424, 442776044],\n        [2428436474, 593698344],\n        [2756734187, 3733110249],\n        [3204031479, 2999351573],\n        [3329325298, 3815920427],\n        [3391569614, 3928383900],\n        [3515267271, 566280711],\n        [3940187606, 3454069534],\n        [4118630271, 4000239992],\n        [116418474, 1914138554],\n        [174292421, 2731055270],\n        [289380356, 3203993006],\n        [460393269, 320620315],\n        [685471733, 587496836],\n        [852142971, 1086792851],\n        [1017036298, 365543100],\n        [1126000580, 2618297676],\n        [1288033470, 3409855158],\n        [1501505948, 4234509866],\n        [1607167915, 987167468],\n        [1816402316, 1246189591]\n      ];\n      _states = {};\n      _states[\"SHA-512\"] = [\n        [1779033703, 4089235720],\n        [3144134277, 2227873595],\n        [1013904242, 4271175723],\n        [2773480762, 1595750129],\n        [1359893119, 2917565137],\n        [2600822924, 725511199],\n        [528734635, 4215389547],\n        [1541459225, 327033209]\n      ];\n      _states[\"SHA-384\"] = [\n        [3418070365, 3238371032],\n        [1654270250, 914150663],\n        [2438529370, 812702999],\n        [355462360, 4144912697],\n        [1731405415, 4290775857],\n        [2394180231, 1750603025],\n        [3675008525, 1694076839],\n        [1203062813, 3204075428]\n      ];\n      _states[\"SHA-512/256\"] = [\n        [573645204, 4230739756],\n        [2673172387, 3360449730],\n        [596883563, 1867755857],\n        [2520282905, 1497426621],\n        [2519219938, 2827943907],\n        [3193839141, 1401305490],\n        [721525244, 746961066],\n        [246885852, 2177182882]\n      ];\n      _states[\"SHA-512/224\"] = [\n        [2352822216, 424955298],\n        [1944164710, 2312950998],\n        [502970286, 855612546],\n        [1738396948, 1479516111],\n        [258812777, 2077511080],\n        [2011393907, 79989058],\n        [1067287976, 1780299464],\n        [286451373, 2446758561]\n      ];\n      _initialized = true;\n    }\n    function _update(s, w, bytes) {\n      var t1_hi, t1_lo;\n      var t2_hi, t2_lo;\n      var s0_hi, s0_lo;\n      var s1_hi, s1_lo;\n      var ch_hi, ch_lo;\n      var maj_hi, maj_lo;\n      var a_hi, a_lo;\n      var b_hi, b_lo;\n      var c_hi, c_lo;\n      var d_hi, d_lo;\n      var e_hi, e_lo;\n      var f_hi, f_lo;\n      var g_hi, g_lo;\n      var h_hi, h_lo;\n      var i, hi, lo, w2, w7, w15, w16;\n      var len = bytes.length();\n      while (len >= 128) {\n        for (i = 0; i < 16; ++i) {\n          w[i][0] = bytes.getInt32() >>> 0;\n          w[i][1] = bytes.getInt32() >>> 0;\n        }\n        for (; i < 80; ++i) {\n          w2 = w[i - 2];\n          hi = w2[0];\n          lo = w2[1];\n          t1_hi = ((hi >>> 19 | lo << 13) ^ // ROTR 19\n          (lo >>> 29 | hi << 3) ^ // ROTR 61/(swap + ROTR 29)\n          hi >>> 6) >>> 0;\n          t1_lo = ((hi << 13 | lo >>> 19) ^ // ROTR 19\n          (lo << 3 | hi >>> 29) ^ // ROTR 61/(swap + ROTR 29)\n          (hi << 26 | lo >>> 6)) >>> 0;\n          w15 = w[i - 15];\n          hi = w15[0];\n          lo = w15[1];\n          t2_hi = ((hi >>> 1 | lo << 31) ^ // ROTR 1\n          (hi >>> 8 | lo << 24) ^ // ROTR 8\n          hi >>> 7) >>> 0;\n          t2_lo = ((hi << 31 | lo >>> 1) ^ // ROTR 1\n          (hi << 24 | lo >>> 8) ^ // ROTR 8\n          (hi << 25 | lo >>> 7)) >>> 0;\n          w7 = w[i - 7];\n          w16 = w[i - 16];\n          lo = t1_lo + w7[1] + t2_lo + w16[1];\n          w[i][0] = t1_hi + w7[0] + t2_hi + w16[0] + (lo / 4294967296 >>> 0) >>> 0;\n          w[i][1] = lo >>> 0;\n        }\n        a_hi = s[0][0];\n        a_lo = s[0][1];\n        b_hi = s[1][0];\n        b_lo = s[1][1];\n        c_hi = s[2][0];\n        c_lo = s[2][1];\n        d_hi = s[3][0];\n        d_lo = s[3][1];\n        e_hi = s[4][0];\n        e_lo = s[4][1];\n        f_hi = s[5][0];\n        f_lo = s[5][1];\n        g_hi = s[6][0];\n        g_lo = s[6][1];\n        h_hi = s[7][0];\n        h_lo = s[7][1];\n        for (i = 0; i < 80; ++i) {\n          s1_hi = ((e_hi >>> 14 | e_lo << 18) ^ // ROTR 14\n          (e_hi >>> 18 | e_lo << 14) ^ // ROTR 18\n          (e_lo >>> 9 | e_hi << 23)) >>> 0;\n          s1_lo = ((e_hi << 18 | e_lo >>> 14) ^ // ROTR 14\n          (e_hi << 14 | e_lo >>> 18) ^ // ROTR 18\n          (e_lo << 23 | e_hi >>> 9)) >>> 0;\n          ch_hi = (g_hi ^ e_hi & (f_hi ^ g_hi)) >>> 0;\n          ch_lo = (g_lo ^ e_lo & (f_lo ^ g_lo)) >>> 0;\n          s0_hi = ((a_hi >>> 28 | a_lo << 4) ^ // ROTR 28\n          (a_lo >>> 2 | a_hi << 30) ^ // ROTR 34/(swap + ROTR 2)\n          (a_lo >>> 7 | a_hi << 25)) >>> 0;\n          s0_lo = ((a_hi << 4 | a_lo >>> 28) ^ // ROTR 28\n          (a_lo << 30 | a_hi >>> 2) ^ // ROTR 34/(swap + ROTR 2)\n          (a_lo << 25 | a_hi >>> 7)) >>> 0;\n          maj_hi = (a_hi & b_hi | c_hi & (a_hi ^ b_hi)) >>> 0;\n          maj_lo = (a_lo & b_lo | c_lo & (a_lo ^ b_lo)) >>> 0;\n          lo = h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1];\n          t1_hi = h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] + (lo / 4294967296 >>> 0) >>> 0;\n          t1_lo = lo >>> 0;\n          lo = s0_lo + maj_lo;\n          t2_hi = s0_hi + maj_hi + (lo / 4294967296 >>> 0) >>> 0;\n          t2_lo = lo >>> 0;\n          h_hi = g_hi;\n          h_lo = g_lo;\n          g_hi = f_hi;\n          g_lo = f_lo;\n          f_hi = e_hi;\n          f_lo = e_lo;\n          lo = d_lo + t1_lo;\n          e_hi = d_hi + t1_hi + (lo / 4294967296 >>> 0) >>> 0;\n          e_lo = lo >>> 0;\n          d_hi = c_hi;\n          d_lo = c_lo;\n          c_hi = b_hi;\n          c_lo = b_lo;\n          b_hi = a_hi;\n          b_lo = a_lo;\n          lo = t1_lo + t2_lo;\n          a_hi = t1_hi + t2_hi + (lo / 4294967296 >>> 0) >>> 0;\n          a_lo = lo >>> 0;\n        }\n        lo = s[0][1] + a_lo;\n        s[0][0] = s[0][0] + a_hi + (lo / 4294967296 >>> 0) >>> 0;\n        s[0][1] = lo >>> 0;\n        lo = s[1][1] + b_lo;\n        s[1][0] = s[1][0] + b_hi + (lo / 4294967296 >>> 0) >>> 0;\n        s[1][1] = lo >>> 0;\n        lo = s[2][1] + c_lo;\n        s[2][0] = s[2][0] + c_hi + (lo / 4294967296 >>> 0) >>> 0;\n        s[2][1] = lo >>> 0;\n        lo = s[3][1] + d_lo;\n        s[3][0] = s[3][0] + d_hi + (lo / 4294967296 >>> 0) >>> 0;\n        s[3][1] = lo >>> 0;\n        lo = s[4][1] + e_lo;\n        s[4][0] = s[4][0] + e_hi + (lo / 4294967296 >>> 0) >>> 0;\n        s[4][1] = lo >>> 0;\n        lo = s[5][1] + f_lo;\n        s[5][0] = s[5][0] + f_hi + (lo / 4294967296 >>> 0) >>> 0;\n        s[5][1] = lo >>> 0;\n        lo = s[6][1] + g_lo;\n        s[6][0] = s[6][0] + g_hi + (lo / 4294967296 >>> 0) >>> 0;\n        s[6][1] = lo >>> 0;\n        lo = s[7][1] + h_lo;\n        s[7][0] = s[7][0] + h_hi + (lo / 4294967296 >>> 0) >>> 0;\n        s[7][1] = lo >>> 0;\n        len -= 128;\n      }\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/asn1-validator.js\nvar require_asn1_validator = __commonJS({\n  \"../../node_modules/node-forge/lib/asn1-validator.js\"(exports) {\n    \"use strict\";\n    var forge = require_forge();\n    require_asn1();\n    var asn1 = forge.asn1;\n    exports.privateKeyValidator = {\n      // PrivateKeyInfo\n      name: \"PrivateKeyInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        // Version (INTEGER)\n        name: \"PrivateKeyInfo.version\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: \"privateKeyVersion\"\n      }, {\n        // privateKeyAlgorithm\n        name: \"PrivateKeyInfo.privateKeyAlgorithm\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        value: [{\n          name: \"AlgorithmIdentifier.algorithm\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: \"privateKeyOid\"\n        }]\n      }, {\n        // PrivateKey\n        name: \"PrivateKeyInfo\",\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: \"privateKey\"\n      }]\n    };\n    exports.publicKeyValidator = {\n      name: \"SubjectPublicKeyInfo\",\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: \"subjectPublicKeyInfo\",\n      value: [\n        {\n          name: \"SubjectPublicKeyInfo.AlgorithmIdentifier\",\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.SEQUENCE,\n          constructed: true,\n          value: [{\n            name: \"AlgorithmIdentifier.algorithm\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OID,\n            constructed: false,\n            capture: \"publicKeyOid\"\n          }]\n        },\n        // capture group for ed25519PublicKey\n        {\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.BITSTRING,\n          constructed: false,\n          composed: true,\n          captureBitStringValue: \"ed25519PublicKey\"\n        }\n        // FIXME: this is capture group for rsaPublicKey, use it in this API or\n        // discard?\n        /* {\n          // subjectPublicKey\n          name: 'SubjectPublicKeyInfo.subjectPublicKey',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.BITSTRING,\n          constructed: false,\n          value: [{\n            // RSAPublicKey\n            name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            optional: true,\n            captureAsn1: 'rsaPublicKey'\n          }]\n        } */\n      ]\n    };\n  }\n});\n\n// ../../node_modules/node-forge/lib/ed25519.js\nvar require_ed25519 = __commonJS({\n  \"../../node_modules/node-forge/lib/ed25519.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_jsbn();\n    require_random();\n    require_sha512();\n    require_util();\n    var asn1Validator = require_asn1_validator();\n    var publicKeyValidator = asn1Validator.publicKeyValidator;\n    var privateKeyValidator = asn1Validator.privateKeyValidator;\n    if (typeof BigInteger === \"undefined\") {\n      BigInteger = forge.jsbn.BigInteger;\n    }\n    var BigInteger;\n    var ByteBuffer = forge.util.ByteBuffer;\n    var NativeBuffer = typeof Buffer === \"undefined\" ? Uint8Array : Buffer;\n    forge.pki = forge.pki || {};\n    module2.exports = forge.pki.ed25519 = forge.ed25519 = forge.ed25519 || {};\n    var ed25519 = forge.ed25519;\n    ed25519.constants = {};\n    ed25519.constants.PUBLIC_KEY_BYTE_LENGTH = 32;\n    ed25519.constants.PRIVATE_KEY_BYTE_LENGTH = 64;\n    ed25519.constants.SEED_BYTE_LENGTH = 32;\n    ed25519.constants.SIGN_BYTE_LENGTH = 64;\n    ed25519.constants.HASH_BYTE_LENGTH = 64;\n    ed25519.generateKeyPair = function(options) {\n      options = options || {};\n      var seed = options.seed;\n      if (seed === void 0) {\n        seed = forge.random.getBytesSync(ed25519.constants.SEED_BYTE_LENGTH);\n      } else if (typeof seed === \"string\") {\n        if (seed.length !== ed25519.constants.SEED_BYTE_LENGTH) {\n          throw new TypeError(\n            '\"seed\" must be ' + ed25519.constants.SEED_BYTE_LENGTH + \" bytes in length.\"\n          );\n        }\n      } else if (!(seed instanceof Uint8Array)) {\n        throw new TypeError(\n          '\"seed\" must be a node.js Buffer, Uint8Array, or a binary string.'\n        );\n      }\n      seed = messageToNativeBuffer({ message: seed, encoding: \"binary\" });\n      var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);\n      var sk = new NativeBuffer(ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);\n      for (var i = 0; i < 32; ++i) {\n        sk[i] = seed[i];\n      }\n      crypto_sign_keypair(pk, sk);\n      return { publicKey: pk, privateKey: sk };\n    };\n    ed25519.privateKeyFromAsn1 = function(obj) {\n      var capture = {};\n      var errors = [];\n      var valid = forge.asn1.validate(obj, privateKeyValidator, capture, errors);\n      if (!valid) {\n        var error = new Error(\"Invalid Key.\");\n        error.errors = errors;\n        throw error;\n      }\n      var oid = forge.asn1.derToOid(capture.privateKeyOid);\n      var ed25519Oid = forge.oids.EdDSA25519;\n      if (oid !== ed25519Oid) {\n        throw new Error('Invalid OID \"' + oid + '\"; OID must be \"' + ed25519Oid + '\".');\n      }\n      var privateKey = capture.privateKey;\n      var privateKeyBytes = messageToNativeBuffer({\n        message: forge.asn1.fromDer(privateKey).value,\n        encoding: \"binary\"\n      });\n      return { privateKeyBytes };\n    };\n    ed25519.publicKeyFromAsn1 = function(obj) {\n      var capture = {};\n      var errors = [];\n      var valid = forge.asn1.validate(obj, publicKeyValidator, capture, errors);\n      if (!valid) {\n        var error = new Error(\"Invalid Key.\");\n        error.errors = errors;\n        throw error;\n      }\n      var oid = forge.asn1.derToOid(capture.publicKeyOid);\n      var ed25519Oid = forge.oids.EdDSA25519;\n      if (oid !== ed25519Oid) {\n        throw new Error('Invalid OID \"' + oid + '\"; OID must be \"' + ed25519Oid + '\".');\n      }\n      var publicKeyBytes = capture.ed25519PublicKey;\n      if (publicKeyBytes.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) {\n        throw new Error(\"Key length is invalid.\");\n      }\n      return messageToNativeBuffer({\n        message: publicKeyBytes,\n        encoding: \"binary\"\n      });\n    };\n    ed25519.publicKeyFromPrivateKey = function(options) {\n      options = options || {};\n      var privateKey = messageToNativeBuffer({\n        message: options.privateKey,\n        encoding: \"binary\"\n      });\n      if (privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) {\n        throw new TypeError(\n          '\"options.privateKey\" must have a byte length of ' + ed25519.constants.PRIVATE_KEY_BYTE_LENGTH\n        );\n      }\n      var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);\n      for (var i = 0; i < pk.length; ++i) {\n        pk[i] = privateKey[32 + i];\n      }\n      return pk;\n    };\n    ed25519.sign = function(options) {\n      options = options || {};\n      var msg = messageToNativeBuffer(options);\n      var privateKey = messageToNativeBuffer({\n        message: options.privateKey,\n        encoding: \"binary\"\n      });\n      if (privateKey.length === ed25519.constants.SEED_BYTE_LENGTH) {\n        var keyPair = ed25519.generateKeyPair({ seed: privateKey });\n        privateKey = keyPair.privateKey;\n      } else if (privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) {\n        throw new TypeError(\n          '\"options.privateKey\" must have a byte length of ' + ed25519.constants.SEED_BYTE_LENGTH + \" or \" + ed25519.constants.PRIVATE_KEY_BYTE_LENGTH\n        );\n      }\n      var signedMsg = new NativeBuffer(\n        ed25519.constants.SIGN_BYTE_LENGTH + msg.length\n      );\n      crypto_sign(signedMsg, msg, msg.length, privateKey);\n      var sig = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH);\n      for (var i = 0; i < sig.length; ++i) {\n        sig[i] = signedMsg[i];\n      }\n      return sig;\n    };\n    ed25519.verify = function(options) {\n      options = options || {};\n      var msg = messageToNativeBuffer(options);\n      if (options.signature === void 0) {\n        throw new TypeError(\n          '\"options.signature\" must be a node.js Buffer, a Uint8Array, a forge ByteBuffer, or a binary string.'\n        );\n      }\n      var sig = messageToNativeBuffer({\n        message: options.signature,\n        encoding: \"binary\"\n      });\n      if (sig.length !== ed25519.constants.SIGN_BYTE_LENGTH) {\n        throw new TypeError(\n          '\"options.signature\" must have a byte length of ' + ed25519.constants.SIGN_BYTE_LENGTH\n        );\n      }\n      var publicKey = messageToNativeBuffer({\n        message: options.publicKey,\n        encoding: \"binary\"\n      });\n      if (publicKey.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) {\n        throw new TypeError(\n          '\"options.publicKey\" must have a byte length of ' + ed25519.constants.PUBLIC_KEY_BYTE_LENGTH\n        );\n      }\n      var sm = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);\n      var m = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);\n      var i;\n      for (i = 0; i < ed25519.constants.SIGN_BYTE_LENGTH; ++i) {\n        sm[i] = sig[i];\n      }\n      for (i = 0; i < msg.length; ++i) {\n        sm[i + ed25519.constants.SIGN_BYTE_LENGTH] = msg[i];\n      }\n      return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;\n    };\n    function messageToNativeBuffer(options) {\n      var message = options.message;\n      if (message instanceof Uint8Array || message instanceof NativeBuffer) {\n        return message;\n      }\n      var encoding = options.encoding;\n      if (message === void 0) {\n        if (options.md) {\n          message = options.md.digest().getBytes();\n          encoding = \"binary\";\n        } else {\n          throw new TypeError('\"options.message\" or \"options.md\" not specified.');\n        }\n      }\n      if (typeof message === \"string\" && !encoding) {\n        throw new TypeError('\"options.encoding\" must be \"binary\" or \"utf8\".');\n      }\n      if (typeof message === \"string\") {\n        if (typeof Buffer !== \"undefined\") {\n          return Buffer.from(message, encoding);\n        }\n        message = new ByteBuffer(message, encoding);\n      } else if (!(message instanceof ByteBuffer)) {\n        throw new TypeError(\n          '\"options.message\" must be a node.js Buffer, a Uint8Array, a forge ByteBuffer, or a string with \"options.encoding\" specifying its encoding.'\n        );\n      }\n      var buffer = new NativeBuffer(message.length());\n      for (var i = 0; i < buffer.length; ++i) {\n        buffer[i] = message.at(i);\n      }\n      return buffer;\n    }\n    var gf0 = gf();\n    var gf1 = gf([1]);\n    var D = gf([\n      30883,\n      4953,\n      19914,\n      30187,\n      55467,\n      16705,\n      2637,\n      112,\n      59544,\n      30585,\n      16505,\n      36039,\n      65139,\n      11119,\n      27886,\n      20995\n    ]);\n    var D2 = gf([\n      61785,\n      9906,\n      39828,\n      60374,\n      45398,\n      33411,\n      5274,\n      224,\n      53552,\n      61171,\n      33010,\n      6542,\n      64743,\n      22239,\n      55772,\n      9222\n    ]);\n    var X = gf([\n      54554,\n      36645,\n      11616,\n      51542,\n      42930,\n      38181,\n      51040,\n      26924,\n      56412,\n      64982,\n      57905,\n      49316,\n      21502,\n      52590,\n      14035,\n      8553\n    ]);\n    var Y = gf([\n      26200,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214,\n      26214\n    ]);\n    var L = new Float64Array([\n      237,\n      211,\n      245,\n      92,\n      26,\n      99,\n      18,\n      88,\n      214,\n      156,\n      247,\n      162,\n      222,\n      249,\n      222,\n      20,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      16\n    ]);\n    var I = gf([\n      41136,\n      18958,\n      6951,\n      50414,\n      58488,\n      44335,\n      6150,\n      12099,\n      55207,\n      15867,\n      153,\n      11085,\n      57099,\n      20417,\n      9344,\n      11139\n    ]);\n    function sha512(msg, msgLen) {\n      var md = forge.md.sha512.create();\n      var buffer = new ByteBuffer(msg);\n      md.update(buffer.getBytes(msgLen), \"binary\");\n      var hash2 = md.digest().getBytes();\n      if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(hash2, \"binary\");\n      }\n      var out = new NativeBuffer(ed25519.constants.HASH_BYTE_LENGTH);\n      for (var i = 0; i < 64; ++i) {\n        out[i] = hash2.charCodeAt(i);\n      }\n      return out;\n    }\n    function crypto_sign_keypair(pk, sk) {\n      var p = [gf(), gf(), gf(), gf()];\n      var i;\n      var d = sha512(sk, 32);\n      d[0] &= 248;\n      d[31] &= 127;\n      d[31] |= 64;\n      scalarbase(p, d);\n      pack(pk, p);\n      for (i = 0; i < 32; ++i) {\n        sk[i + 32] = pk[i];\n      }\n      return 0;\n    }\n    function crypto_sign(sm, m, n, sk) {\n      var i, j, x = new Float64Array(64);\n      var p = [gf(), gf(), gf(), gf()];\n      var d = sha512(sk, 32);\n      d[0] &= 248;\n      d[31] &= 127;\n      d[31] |= 64;\n      var smlen = n + 64;\n      for (i = 0; i < n; ++i) {\n        sm[64 + i] = m[i];\n      }\n      for (i = 0; i < 32; ++i) {\n        sm[32 + i] = d[32 + i];\n      }\n      var r = sha512(sm.subarray(32), n + 32);\n      reduce(r);\n      scalarbase(p, r);\n      pack(sm, p);\n      for (i = 32; i < 64; ++i) {\n        sm[i] = sk[i];\n      }\n      var h = sha512(sm, n + 64);\n      reduce(h);\n      for (i = 32; i < 64; ++i) {\n        x[i] = 0;\n      }\n      for (i = 0; i < 32; ++i) {\n        x[i] = r[i];\n      }\n      for (i = 0; i < 32; ++i) {\n        for (j = 0; j < 32; j++) {\n          x[i + j] += h[i] * d[j];\n        }\n      }\n      modL(sm.subarray(32), x);\n      return smlen;\n    }\n    function crypto_sign_open(m, sm, n, pk) {\n      var i, mlen;\n      var t = new NativeBuffer(32);\n      var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()];\n      mlen = -1;\n      if (n < 64) {\n        return -1;\n      }\n      if (unpackneg(q, pk)) {\n        return -1;\n      }\n      for (i = 0; i < n; ++i) {\n        m[i] = sm[i];\n      }\n      for (i = 0; i < 32; ++i) {\n        m[i + 32] = pk[i];\n      }\n      var h = sha512(m, n);\n      reduce(h);\n      scalarmult(p, q, h);\n      scalarbase(q, sm.subarray(32));\n      add(p, q);\n      pack(t, p);\n      n -= 64;\n      if (crypto_verify_32(sm, 0, t, 0)) {\n        for (i = 0; i < n; ++i) {\n          m[i] = 0;\n        }\n        return -1;\n      }\n      for (i = 0; i < n; ++i) {\n        m[i] = sm[i + 64];\n      }\n      mlen = n;\n      return mlen;\n    }\n    function modL(r, x) {\n      var carry, i, j, k;\n      for (i = 63; i >= 32; --i) {\n        carry = 0;\n        for (j = i - 32, k = i - 12; j < k; ++j) {\n          x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n          carry = x[j] + 128 >> 8;\n          x[j] -= carry * 256;\n        }\n        x[j] += carry;\n        x[i] = 0;\n      }\n      carry = 0;\n      for (j = 0; j < 32; ++j) {\n        x[j] += carry - (x[31] >> 4) * L[j];\n        carry = x[j] >> 8;\n        x[j] &= 255;\n      }\n      for (j = 0; j < 32; ++j) {\n        x[j] -= carry * L[j];\n      }\n      for (i = 0; i < 32; ++i) {\n        x[i + 1] += x[i] >> 8;\n        r[i] = x[i] & 255;\n      }\n    }\n    function reduce(r) {\n      var x = new Float64Array(64);\n      for (var i = 0; i < 64; ++i) {\n        x[i] = r[i];\n        r[i] = 0;\n      }\n      modL(r, x);\n    }\n    function add(p, q) {\n      var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();\n      Z(a, p[1], p[0]);\n      Z(t, q[1], q[0]);\n      M(a, a, t);\n      A(b, p[0], p[1]);\n      A(t, q[0], q[1]);\n      M(b, b, t);\n      M(c, p[3], q[3]);\n      M(c, c, D2);\n      M(d, p[2], q[2]);\n      A(d, d, d);\n      Z(e, b, a);\n      Z(f, d, c);\n      A(g, d, c);\n      A(h, b, a);\n      M(p[0], e, f);\n      M(p[1], h, g);\n      M(p[2], g, f);\n      M(p[3], e, h);\n    }\n    function cswap(p, q, b) {\n      for (var i = 0; i < 4; ++i) {\n        sel25519(p[i], q[i], b);\n      }\n    }\n    function pack(r, p) {\n      var tx = gf(), ty = gf(), zi = gf();\n      inv25519(zi, p[2]);\n      M(tx, p[0], zi);\n      M(ty, p[1], zi);\n      pack25519(r, ty);\n      r[31] ^= par25519(tx) << 7;\n    }\n    function pack25519(o, n) {\n      var i, j, b;\n      var m = gf(), t = gf();\n      for (i = 0; i < 16; ++i) {\n        t[i] = n[i];\n      }\n      car25519(t);\n      car25519(t);\n      car25519(t);\n      for (j = 0; j < 2; ++j) {\n        m[0] = t[0] - 65517;\n        for (i = 1; i < 15; ++i) {\n          m[i] = t[i] - 65535 - (m[i - 1] >> 16 & 1);\n          m[i - 1] &= 65535;\n        }\n        m[15] = t[15] - 32767 - (m[14] >> 16 & 1);\n        b = m[15] >> 16 & 1;\n        m[14] &= 65535;\n        sel25519(t, m, 1 - b);\n      }\n      for (i = 0; i < 16; i++) {\n        o[2 * i] = t[i] & 255;\n        o[2 * i + 1] = t[i] >> 8;\n      }\n    }\n    function unpackneg(r, p) {\n      var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();\n      set25519(r[2], gf1);\n      unpack25519(r[1], p);\n      S(num, r[1]);\n      M(den, num, D);\n      Z(num, num, r[2]);\n      A(den, r[2], den);\n      S(den2, den);\n      S(den4, den2);\n      M(den6, den4, den2);\n      M(t, den6, num);\n      M(t, t, den);\n      pow2523(t, t);\n      M(t, t, num);\n      M(t, t, den);\n      M(t, t, den);\n      M(r[0], t, den);\n      S(chk, r[0]);\n      M(chk, chk, den);\n      if (neq25519(chk, num)) {\n        M(r[0], r[0], I);\n      }\n      S(chk, r[0]);\n      M(chk, chk, den);\n      if (neq25519(chk, num)) {\n        return -1;\n      }\n      if (par25519(r[0]) === p[31] >> 7) {\n        Z(r[0], gf0, r[0]);\n      }\n      M(r[3], r[0], r[1]);\n      return 0;\n    }\n    function unpack25519(o, n) {\n      var i;\n      for (i = 0; i < 16; ++i) {\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n      }\n      o[15] &= 32767;\n    }\n    function pow2523(o, i) {\n      var c = gf();\n      var a;\n      for (a = 0; a < 16; ++a) {\n        c[a] = i[a];\n      }\n      for (a = 250; a >= 0; --a) {\n        S(c, c);\n        if (a !== 1) {\n          M(c, c, i);\n        }\n      }\n      for (a = 0; a < 16; ++a) {\n        o[a] = c[a];\n      }\n    }\n    function neq25519(a, b) {\n      var c = new NativeBuffer(32);\n      var d = new NativeBuffer(32);\n      pack25519(c, a);\n      pack25519(d, b);\n      return crypto_verify_32(c, 0, d, 0);\n    }\n    function crypto_verify_32(x, xi, y, yi) {\n      return vn(x, xi, y, yi, 32);\n    }\n    function vn(x, xi, y, yi, n) {\n      var i, d = 0;\n      for (i = 0; i < n; ++i) {\n        d |= x[xi + i] ^ y[yi + i];\n      }\n      return (1 & d - 1 >>> 8) - 1;\n    }\n    function par25519(a) {\n      var d = new NativeBuffer(32);\n      pack25519(d, a);\n      return d[0] & 1;\n    }\n    function scalarmult(p, q, s) {\n      var b, i;\n      set25519(p[0], gf0);\n      set25519(p[1], gf1);\n      set25519(p[2], gf1);\n      set25519(p[3], gf0);\n      for (i = 255; i >= 0; --i) {\n        b = s[i / 8 | 0] >> (i & 7) & 1;\n        cswap(p, q, b);\n        add(q, p);\n        add(p, p);\n        cswap(p, q, b);\n      }\n    }\n    function scalarbase(p, s) {\n      var q = [gf(), gf(), gf(), gf()];\n      set25519(q[0], X);\n      set25519(q[1], Y);\n      set25519(q[2], gf1);\n      M(q[3], X, Y);\n      scalarmult(p, q, s);\n    }\n    function set25519(r, a) {\n      var i;\n      for (i = 0; i < 16; i++) {\n        r[i] = a[i] | 0;\n      }\n    }\n    function inv25519(o, i) {\n      var c = gf();\n      var a;\n      for (a = 0; a < 16; ++a) {\n        c[a] = i[a];\n      }\n      for (a = 253; a >= 0; --a) {\n        S(c, c);\n        if (a !== 2 && a !== 4) {\n          M(c, c, i);\n        }\n      }\n      for (a = 0; a < 16; ++a) {\n        o[a] = c[a];\n      }\n    }\n    function car25519(o) {\n      var i, v, c = 1;\n      for (i = 0; i < 16; ++i) {\n        v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n      }\n      o[0] += c - 1 + 37 * (c - 1);\n    }\n    function sel25519(p, q, b) {\n      var t, c = ~(b - 1);\n      for (var i = 0; i < 16; ++i) {\n        t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n      }\n    }\n    function gf(init2) {\n      var i, r = new Float64Array(16);\n      if (init2) {\n        for (i = 0; i < init2.length; ++i) {\n          r[i] = init2[i];\n        }\n      }\n      return r;\n    }\n    function A(o, a, b) {\n      for (var i = 0; i < 16; ++i) {\n        o[i] = a[i] + b[i];\n      }\n    }\n    function Z(o, a, b) {\n      for (var i = 0; i < 16; ++i) {\n        o[i] = a[i] - b[i];\n      }\n    }\n    function S(o, a) {\n      M(o, a, a);\n    }\n    function M(o, a, b) {\n      var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n      v = a[0];\n      t0 += v * b0;\n      t1 += v * b1;\n      t2 += v * b2;\n      t3 += v * b3;\n      t4 += v * b4;\n      t5 += v * b5;\n      t6 += v * b6;\n      t7 += v * b7;\n      t8 += v * b8;\n      t9 += v * b9;\n      t10 += v * b10;\n      t11 += v * b11;\n      t12 += v * b12;\n      t13 += v * b13;\n      t14 += v * b14;\n      t15 += v * b15;\n      v = a[1];\n      t1 += v * b0;\n      t2 += v * b1;\n      t3 += v * b2;\n      t4 += v * b3;\n      t5 += v * b4;\n      t6 += v * b5;\n      t7 += v * b6;\n      t8 += v * b7;\n      t9 += v * b8;\n      t10 += v * b9;\n      t11 += v * b10;\n      t12 += v * b11;\n      t13 += v * b12;\n      t14 += v * b13;\n      t15 += v * b14;\n      t16 += v * b15;\n      v = a[2];\n      t2 += v * b0;\n      t3 += v * b1;\n      t4 += v * b2;\n      t5 += v * b3;\n      t6 += v * b4;\n      t7 += v * b5;\n      t8 += v * b6;\n      t9 += v * b7;\n      t10 += v * b8;\n      t11 += v * b9;\n      t12 += v * b10;\n      t13 += v * b11;\n      t14 += v * b12;\n      t15 += v * b13;\n      t16 += v * b14;\n      t17 += v * b15;\n      v = a[3];\n      t3 += v * b0;\n      t4 += v * b1;\n      t5 += v * b2;\n      t6 += v * b3;\n      t7 += v * b4;\n      t8 += v * b5;\n      t9 += v * b6;\n      t10 += v * b7;\n      t11 += v * b8;\n      t12 += v * b9;\n      t13 += v * b10;\n      t14 += v * b11;\n      t15 += v * b12;\n      t16 += v * b13;\n      t17 += v * b14;\n      t18 += v * b15;\n      v = a[4];\n      t4 += v * b0;\n      t5 += v * b1;\n      t6 += v * b2;\n      t7 += v * b3;\n      t8 += v * b4;\n      t9 += v * b5;\n      t10 += v * b6;\n      t11 += v * b7;\n      t12 += v * b8;\n      t13 += v * b9;\n      t14 += v * b10;\n      t15 += v * b11;\n      t16 += v * b12;\n      t17 += v * b13;\n      t18 += v * b14;\n      t19 += v * b15;\n      v = a[5];\n      t5 += v * b0;\n      t6 += v * b1;\n      t7 += v * b2;\n      t8 += v * b3;\n      t9 += v * b4;\n      t10 += v * b5;\n      t11 += v * b6;\n      t12 += v * b7;\n      t13 += v * b8;\n      t14 += v * b9;\n      t15 += v * b10;\n      t16 += v * b11;\n      t17 += v * b12;\n      t18 += v * b13;\n      t19 += v * b14;\n      t20 += v * b15;\n      v = a[6];\n      t6 += v * b0;\n      t7 += v * b1;\n      t8 += v * b2;\n      t9 += v * b3;\n      t10 += v * b4;\n      t11 += v * b5;\n      t12 += v * b6;\n      t13 += v * b7;\n      t14 += v * b8;\n      t15 += v * b9;\n      t16 += v * b10;\n      t17 += v * b11;\n      t18 += v * b12;\n      t19 += v * b13;\n      t20 += v * b14;\n      t21 += v * b15;\n      v = a[7];\n      t7 += v * b0;\n      t8 += v * b1;\n      t9 += v * b2;\n      t10 += v * b3;\n      t11 += v * b4;\n      t12 += v * b5;\n      t13 += v * b6;\n      t14 += v * b7;\n      t15 += v * b8;\n      t16 += v * b9;\n      t17 += v * b10;\n      t18 += v * b11;\n      t19 += v * b12;\n      t20 += v * b13;\n      t21 += v * b14;\n      t22 += v * b15;\n      v = a[8];\n      t8 += v * b0;\n      t9 += v * b1;\n      t10 += v * b2;\n      t11 += v * b3;\n      t12 += v * b4;\n      t13 += v * b5;\n      t14 += v * b6;\n      t15 += v * b7;\n      t16 += v * b8;\n      t17 += v * b9;\n      t18 += v * b10;\n      t19 += v * b11;\n      t20 += v * b12;\n      t21 += v * b13;\n      t22 += v * b14;\n      t23 += v * b15;\n      v = a[9];\n      t9 += v * b0;\n      t10 += v * b1;\n      t11 += v * b2;\n      t12 += v * b3;\n      t13 += v * b4;\n      t14 += v * b5;\n      t15 += v * b6;\n      t16 += v * b7;\n      t17 += v * b8;\n      t18 += v * b9;\n      t19 += v * b10;\n      t20 += v * b11;\n      t21 += v * b12;\n      t22 += v * b13;\n      t23 += v * b14;\n      t24 += v * b15;\n      v = a[10];\n      t10 += v * b0;\n      t11 += v * b1;\n      t12 += v * b2;\n      t13 += v * b3;\n      t14 += v * b4;\n      t15 += v * b5;\n      t16 += v * b6;\n      t17 += v * b7;\n      t18 += v * b8;\n      t19 += v * b9;\n      t20 += v * b10;\n      t21 += v * b11;\n      t22 += v * b12;\n      t23 += v * b13;\n      t24 += v * b14;\n      t25 += v * b15;\n      v = a[11];\n      t11 += v * b0;\n      t12 += v * b1;\n      t13 += v * b2;\n      t14 += v * b3;\n      t15 += v * b4;\n      t16 += v * b5;\n      t17 += v * b6;\n      t18 += v * b7;\n      t19 += v * b8;\n      t20 += v * b9;\n      t21 += v * b10;\n      t22 += v * b11;\n      t23 += v * b12;\n      t24 += v * b13;\n      t25 += v * b14;\n      t26 += v * b15;\n      v = a[12];\n      t12 += v * b0;\n      t13 += v * b1;\n      t14 += v * b2;\n      t15 += v * b3;\n      t16 += v * b4;\n      t17 += v * b5;\n      t18 += v * b6;\n      t19 += v * b7;\n      t20 += v * b8;\n      t21 += v * b9;\n      t22 += v * b10;\n      t23 += v * b11;\n      t24 += v * b12;\n      t25 += v * b13;\n      t26 += v * b14;\n      t27 += v * b15;\n      v = a[13];\n      t13 += v * b0;\n      t14 += v * b1;\n      t15 += v * b2;\n      t16 += v * b3;\n      t17 += v * b4;\n      t18 += v * b5;\n      t19 += v * b6;\n      t20 += v * b7;\n      t21 += v * b8;\n      t22 += v * b9;\n      t23 += v * b10;\n      t24 += v * b11;\n      t25 += v * b12;\n      t26 += v * b13;\n      t27 += v * b14;\n      t28 += v * b15;\n      v = a[14];\n      t14 += v * b0;\n      t15 += v * b1;\n      t16 += v * b2;\n      t17 += v * b3;\n      t18 += v * b4;\n      t19 += v * b5;\n      t20 += v * b6;\n      t21 += v * b7;\n      t22 += v * b8;\n      t23 += v * b9;\n      t24 += v * b10;\n      t25 += v * b11;\n      t26 += v * b12;\n      t27 += v * b13;\n      t28 += v * b14;\n      t29 += v * b15;\n      v = a[15];\n      t15 += v * b0;\n      t16 += v * b1;\n      t17 += v * b2;\n      t18 += v * b3;\n      t19 += v * b4;\n      t20 += v * b5;\n      t21 += v * b6;\n      t22 += v * b7;\n      t23 += v * b8;\n      t24 += v * b9;\n      t25 += v * b10;\n      t26 += v * b11;\n      t27 += v * b12;\n      t28 += v * b13;\n      t29 += v * b14;\n      t30 += v * b15;\n      t0 += 38 * t16;\n      t1 += 38 * t17;\n      t2 += 38 * t18;\n      t3 += 38 * t19;\n      t4 += 38 * t20;\n      t5 += 38 * t21;\n      t6 += 38 * t22;\n      t7 += 38 * t23;\n      t8 += 38 * t24;\n      t9 += 38 * t25;\n      t10 += 38 * t26;\n      t11 += 38 * t27;\n      t12 += 38 * t28;\n      t13 += 38 * t29;\n      t14 += 38 * t30;\n      c = 1;\n      v = t0 + c + 65535;\n      c = Math.floor(v / 65536);\n      t0 = v - c * 65536;\n      v = t1 + c + 65535;\n      c = Math.floor(v / 65536);\n      t1 = v - c * 65536;\n      v = t2 + c + 65535;\n      c = Math.floor(v / 65536);\n      t2 = v - c * 65536;\n      v = t3 + c + 65535;\n      c = Math.floor(v / 65536);\n      t3 = v - c * 65536;\n      v = t4 + c + 65535;\n      c = Math.floor(v / 65536);\n      t4 = v - c * 65536;\n      v = t5 + c + 65535;\n      c = Math.floor(v / 65536);\n      t5 = v - c * 65536;\n      v = t6 + c + 65535;\n      c = Math.floor(v / 65536);\n      t6 = v - c * 65536;\n      v = t7 + c + 65535;\n      c = Math.floor(v / 65536);\n      t7 = v - c * 65536;\n      v = t8 + c + 65535;\n      c = Math.floor(v / 65536);\n      t8 = v - c * 65536;\n      v = t9 + c + 65535;\n      c = Math.floor(v / 65536);\n      t9 = v - c * 65536;\n      v = t10 + c + 65535;\n      c = Math.floor(v / 65536);\n      t10 = v - c * 65536;\n      v = t11 + c + 65535;\n      c = Math.floor(v / 65536);\n      t11 = v - c * 65536;\n      v = t12 + c + 65535;\n      c = Math.floor(v / 65536);\n      t12 = v - c * 65536;\n      v = t13 + c + 65535;\n      c = Math.floor(v / 65536);\n      t13 = v - c * 65536;\n      v = t14 + c + 65535;\n      c = Math.floor(v / 65536);\n      t14 = v - c * 65536;\n      v = t15 + c + 65535;\n      c = Math.floor(v / 65536);\n      t15 = v - c * 65536;\n      t0 += c - 1 + 37 * (c - 1);\n      c = 1;\n      v = t0 + c + 65535;\n      c = Math.floor(v / 65536);\n      t0 = v - c * 65536;\n      v = t1 + c + 65535;\n      c = Math.floor(v / 65536);\n      t1 = v - c * 65536;\n      v = t2 + c + 65535;\n      c = Math.floor(v / 65536);\n      t2 = v - c * 65536;\n      v = t3 + c + 65535;\n      c = Math.floor(v / 65536);\n      t3 = v - c * 65536;\n      v = t4 + c + 65535;\n      c = Math.floor(v / 65536);\n      t4 = v - c * 65536;\n      v = t5 + c + 65535;\n      c = Math.floor(v / 65536);\n      t5 = v - c * 65536;\n      v = t6 + c + 65535;\n      c = Math.floor(v / 65536);\n      t6 = v - c * 65536;\n      v = t7 + c + 65535;\n      c = Math.floor(v / 65536);\n      t7 = v - c * 65536;\n      v = t8 + c + 65535;\n      c = Math.floor(v / 65536);\n      t8 = v - c * 65536;\n      v = t9 + c + 65535;\n      c = Math.floor(v / 65536);\n      t9 = v - c * 65536;\n      v = t10 + c + 65535;\n      c = Math.floor(v / 65536);\n      t10 = v - c * 65536;\n      v = t11 + c + 65535;\n      c = Math.floor(v / 65536);\n      t11 = v - c * 65536;\n      v = t12 + c + 65535;\n      c = Math.floor(v / 65536);\n      t12 = v - c * 65536;\n      v = t13 + c + 65535;\n      c = Math.floor(v / 65536);\n      t13 = v - c * 65536;\n      v = t14 + c + 65535;\n      c = Math.floor(v / 65536);\n      t14 = v - c * 65536;\n      v = t15 + c + 65535;\n      c = Math.floor(v / 65536);\n      t15 = v - c * 65536;\n      t0 += c - 1 + 37 * (c - 1);\n      o[0] = t0;\n      o[1] = t1;\n      o[2] = t2;\n      o[3] = t3;\n      o[4] = t4;\n      o[5] = t5;\n      o[6] = t6;\n      o[7] = t7;\n      o[8] = t8;\n      o[9] = t9;\n      o[10] = t10;\n      o[11] = t11;\n      o[12] = t12;\n      o[13] = t13;\n      o[14] = t14;\n      o[15] = t15;\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/kem.js\nvar require_kem = __commonJS({\n  \"../../node_modules/node-forge/lib/kem.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    require_random();\n    require_jsbn();\n    module2.exports = forge.kem = forge.kem || {};\n    var BigInteger = forge.jsbn.BigInteger;\n    forge.kem.rsa = {};\n    forge.kem.rsa.create = function(kdf, options) {\n      options = options || {};\n      var prng = options.prng || forge.random;\n      var kem = {};\n      kem.encrypt = function(publicKey, keyLength) {\n        var byteLength = Math.ceil(publicKey.n.bitLength() / 8);\n        var r;\n        do {\n          r = new BigInteger(\n            forge.util.bytesToHex(prng.getBytesSync(byteLength)),\n            16\n          ).mod(publicKey.n);\n        } while (r.compareTo(BigInteger.ONE) <= 0);\n        r = forge.util.hexToBytes(r.toString(16));\n        var zeros = byteLength - r.length;\n        if (zeros > 0) {\n          r = forge.util.fillString(String.fromCharCode(0), zeros) + r;\n        }\n        var encapsulation = publicKey.encrypt(r, \"NONE\");\n        var key = kdf.generate(r, keyLength);\n        return { encapsulation, key };\n      };\n      kem.decrypt = function(privateKey, encapsulation, keyLength) {\n        var r = privateKey.decrypt(encapsulation, \"NONE\");\n        return kdf.generate(r, keyLength);\n      };\n      return kem;\n    };\n    forge.kem.kdf1 = function(md, digestLength) {\n      _createKDF(this, md, 0, digestLength || md.digestLength);\n    };\n    forge.kem.kdf2 = function(md, digestLength) {\n      _createKDF(this, md, 1, digestLength || md.digestLength);\n    };\n    function _createKDF(kdf, md, counterStart, digestLength) {\n      kdf.generate = function(x, length) {\n        var key = new forge.util.ByteBuffer();\n        var k = Math.ceil(length / digestLength) + counterStart;\n        var c = new forge.util.ByteBuffer();\n        for (var i = counterStart; i < k; ++i) {\n          c.putInt32(i);\n          md.start();\n          md.update(x + c.getBytes());\n          var hash2 = md.digest();\n          key.putBytes(hash2.getBytes(digestLength));\n        }\n        key.truncate(key.length() - length);\n        return key.getBytes();\n      };\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/log.js\nvar require_log = __commonJS({\n  \"../../node_modules/node-forge/lib/log.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_util();\n    module2.exports = forge.log = forge.log || {};\n    forge.log.levels = [\n      \"none\",\n      \"error\",\n      \"warning\",\n      \"info\",\n      \"debug\",\n      \"verbose\",\n      \"max\"\n    ];\n    var sLevelInfo = {};\n    var sLoggers = [];\n    var sConsoleLogger = null;\n    forge.log.LEVEL_LOCKED = 1 << 1;\n    forge.log.NO_LEVEL_CHECK = 1 << 2;\n    forge.log.INTERPOLATE = 1 << 3;\n    for (i = 0; i < forge.log.levels.length; ++i) {\n      level = forge.log.levels[i];\n      sLevelInfo[level] = {\n        index: i,\n        name: level.toUpperCase()\n      };\n    }\n    var level;\n    var i;\n    forge.log.logMessage = function(message) {\n      var messageLevelIndex = sLevelInfo[message.level].index;\n      for (var i2 = 0; i2 < sLoggers.length; ++i2) {\n        var logger4 = sLoggers[i2];\n        if (logger4.flags & forge.log.NO_LEVEL_CHECK) {\n          logger4.f(message);\n        } else {\n          var loggerLevelIndex = sLevelInfo[logger4.level].index;\n          if (messageLevelIndex <= loggerLevelIndex) {\n            logger4.f(logger4, message);\n          }\n        }\n      }\n    };\n    forge.log.prepareStandard = function(message) {\n      if (!(\"standard\" in message)) {\n        message.standard = sLevelInfo[message.level].name + //' ' + +message.timestamp +\n        \" [\" + message.category + \"] \" + message.message;\n      }\n    };\n    forge.log.prepareFull = function(message) {\n      if (!(\"full\" in message)) {\n        var args = [message.message];\n        args = args.concat([]);\n        message.full = forge.util.format.apply(this, args);\n      }\n    };\n    forge.log.prepareStandardFull = function(message) {\n      if (!(\"standardFull\" in message)) {\n        forge.log.prepareStandard(message);\n        message.standardFull = message.standard;\n      }\n    };\n    if (true) {\n      levels = [\"error\", \"warning\", \"info\", \"debug\", \"verbose\"];\n      for (i = 0; i < levels.length; ++i) {\n        (function(level2) {\n          forge.log[level2] = function(category, message) {\n            var args = Array.prototype.slice.call(arguments).slice(2);\n            var msg = {\n              timestamp: /* @__PURE__ */ new Date(),\n              level: level2,\n              category,\n              message,\n              \"arguments\": args\n              /*standard*/\n              /*full*/\n              /*fullMessage*/\n            };\n            forge.log.logMessage(msg);\n          };\n        })(levels[i]);\n      }\n    }\n    var levels;\n    var i;\n    forge.log.makeLogger = function(logFunction) {\n      var logger4 = {\n        flags: 0,\n        f: logFunction\n      };\n      forge.log.setLevel(logger4, \"none\");\n      return logger4;\n    };\n    forge.log.setLevel = function(logger4, level2) {\n      var rval = false;\n      if (logger4 && !(logger4.flags & forge.log.LEVEL_LOCKED)) {\n        for (var i2 = 0; i2 < forge.log.levels.length; ++i2) {\n          var aValidLevel = forge.log.levels[i2];\n          if (level2 == aValidLevel) {\n            logger4.level = level2;\n            rval = true;\n            break;\n          }\n        }\n      }\n      return rval;\n    };\n    forge.log.lock = function(logger4, lock2) {\n      if (typeof lock2 === \"undefined\" || lock2) {\n        logger4.flags |= forge.log.LEVEL_LOCKED;\n      } else {\n        logger4.flags &= ~forge.log.LEVEL_LOCKED;\n      }\n    };\n    forge.log.addLogger = function(logger4) {\n      sLoggers.push(logger4);\n    };\n    if (typeof console !== \"undefined\" && \"log\" in console) {\n      if (console.error && console.warn && console.info && console.debug) {\n        levelHandlers = {\n          error: console.error,\n          warning: console.warn,\n          info: console.info,\n          debug: console.debug,\n          verbose: console.debug\n        };\n        f = function(logger4, message) {\n          forge.log.prepareStandard(message);\n          var handler = levelHandlers[message.level];\n          var args = [message.standard];\n          args = args.concat(message[\"arguments\"].slice());\n          handler.apply(console, args);\n        };\n        logger3 = forge.log.makeLogger(f);\n      } else {\n        f = function(logger4, message) {\n          forge.log.prepareStandardFull(message);\n          console.log(message.standardFull);\n        };\n        logger3 = forge.log.makeLogger(f);\n      }\n      forge.log.setLevel(logger3, \"debug\");\n      forge.log.addLogger(logger3);\n      sConsoleLogger = logger3;\n    } else {\n      console = {\n        log: function() {\n        }\n      };\n    }\n    var logger3;\n    var levelHandlers;\n    var f;\n    if (sConsoleLogger !== null && typeof window !== \"undefined\" && window.location) {\n      query = new URL(window.location.href).searchParams;\n      if (query.has(\"console.level\")) {\n        forge.log.setLevel(\n          sConsoleLogger,\n          query.get(\"console.level\").slice(-1)[0]\n        );\n      }\n      if (query.has(\"console.lock\")) {\n        lock = query.get(\"console.lock\").slice(-1)[0];\n        if (lock == \"true\") {\n          forge.log.lock(sConsoleLogger);\n        }\n      }\n    }\n    var query;\n    var lock;\n    forge.log.consoleLogger = sConsoleLogger;\n  }\n});\n\n// ../../node_modules/node-forge/lib/md.all.js\nvar require_md_all = __commonJS({\n  \"../../node_modules/node-forge/lib/md.all.js\"(exports, module2) {\n    \"use strict\";\n    module2.exports = require_md();\n    require_md5();\n    require_sha1();\n    require_sha256();\n    require_sha512();\n  }\n});\n\n// ../../node_modules/node-forge/lib/pkcs7.js\nvar require_pkcs7 = __commonJS({\n  \"../../node_modules/node-forge/lib/pkcs7.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_aes();\n    require_asn1();\n    require_des();\n    require_oids();\n    require_pem();\n    require_pkcs7asn1();\n    require_random();\n    require_util();\n    require_x509();\n    var asn1 = forge.asn1;\n    var p7 = module2.exports = forge.pkcs7 = forge.pkcs7 || {};\n    p7.messageFromPem = function(pem) {\n      var msg = forge.pem.decode(pem)[0];\n      if (msg.type !== \"PKCS7\") {\n        var error = new Error('Could not convert PKCS#7 message from PEM; PEM header type is not \"PKCS#7\".');\n        error.headerType = msg.type;\n        throw error;\n      }\n      if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        throw new Error(\"Could not convert PKCS#7 message from PEM; PEM is encrypted.\");\n      }\n      var obj = asn1.fromDer(msg.body);\n      return p7.messageFromAsn1(obj);\n    };\n    p7.messageToPem = function(msg, maxline) {\n      var pemObj = {\n        type: \"PKCS7\",\n        body: asn1.toDer(msg.toAsn1()).getBytes()\n      };\n      return forge.pem.encode(pemObj, { maxline });\n    };\n    p7.messageFromAsn1 = function(obj) {\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors)) {\n        var error = new Error(\"Cannot read PKCS#7 message. ASN.1 object is not an PKCS#7 ContentInfo.\");\n        error.errors = errors;\n        throw error;\n      }\n      var contentType = asn1.derToOid(capture.contentType);\n      var msg;\n      switch (contentType) {\n        case forge.pki.oids.envelopedData:\n          msg = p7.createEnvelopedData();\n          break;\n        case forge.pki.oids.encryptedData:\n          msg = p7.createEncryptedData();\n          break;\n        case forge.pki.oids.signedData:\n          msg = p7.createSignedData();\n          break;\n        default:\n          throw new Error(\"Cannot read PKCS#7 message. ContentType with OID \" + contentType + \" is not (yet) supported.\");\n      }\n      msg.fromAsn1(capture.content.value[0]);\n      return msg;\n    };\n    p7.createSignedData = function() {\n      var msg = null;\n      msg = {\n        type: forge.pki.oids.signedData,\n        version: 1,\n        certificates: [],\n        crls: [],\n        // TODO: add json-formatted signer stuff here?\n        signers: [],\n        // populated during sign()\n        digestAlgorithmIdentifiers: [],\n        contentInfo: null,\n        signerInfos: [],\n        fromAsn1: function(obj) {\n          _fromAsn1(msg, obj, p7.asn1.signedDataValidator);\n          msg.certificates = [];\n          msg.crls = [];\n          msg.digestAlgorithmIdentifiers = [];\n          msg.contentInfo = null;\n          msg.signerInfos = [];\n          if (msg.rawCapture.certificates) {\n            var certs = msg.rawCapture.certificates.value;\n            for (var i = 0; i < certs.length; ++i) {\n              msg.certificates.push(forge.pki.certificateFromAsn1(certs[i]));\n            }\n          }\n        },\n        toAsn1: function() {\n          if (!msg.contentInfo) {\n            msg.sign();\n          }\n          var certs = [];\n          for (var i = 0; i < msg.certificates.length; ++i) {\n            certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));\n          }\n          var crls = [];\n          var signedData = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n              // Version\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.INTEGER,\n                false,\n                asn1.integerToDer(msg.version).getBytes()\n              ),\n              // DigestAlgorithmIdentifiers\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.SET,\n                true,\n                msg.digestAlgorithmIdentifiers\n              ),\n              // ContentInfo\n              msg.contentInfo\n            ])\n          ]);\n          if (certs.length > 0) {\n            signedData.value[0].value.push(\n              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs)\n            );\n          }\n          if (crls.length > 0) {\n            signedData.value[0].value.push(\n              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls)\n            );\n          }\n          signedData.value[0].value.push(\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.SET,\n              true,\n              msg.signerInfos\n            )\n          );\n          return asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.SEQUENCE,\n            true,\n            [\n              // ContentType\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.OID,\n                false,\n                asn1.oidToDer(msg.type).getBytes()\n              ),\n              // [0] SignedData\n              signedData\n            ]\n          );\n        },\n        /**\n         * Add (another) entity to list of signers.\n         *\n         * Note: If authenticatedAttributes are provided, then, per RFC 2315,\n         * they must include at least two attributes: content type and\n         * message digest. The message digest attribute value will be\n         * auto-calculated during signing and will be ignored if provided.\n         *\n         * Here's an example of providing these two attributes:\n         *\n         * forge.pkcs7.createSignedData();\n         * p7.addSigner({\n         *   issuer: cert.issuer.attributes,\n         *   serialNumber: cert.serialNumber,\n         *   key: privateKey,\n         *   digestAlgorithm: forge.pki.oids.sha1,\n         *   authenticatedAttributes: [{\n         *     type: forge.pki.oids.contentType,\n         *     value: forge.pki.oids.data\n         *   }, {\n         *     type: forge.pki.oids.messageDigest\n         *   }]\n         * });\n         *\n         * TODO: Support [subjectKeyIdentifier] as signer's ID.\n         *\n         * @param signer the signer information:\n         *          key the signer's private key.\n         *          [certificate] a certificate containing the public key\n         *            associated with the signer's private key; use this option as\n         *            an alternative to specifying signer.issuer and\n         *            signer.serialNumber.\n         *          [issuer] the issuer attributes (eg: cert.issuer.attributes).\n         *          [serialNumber] the signer's certificate's serial number in\n         *           hexadecimal (eg: cert.serialNumber).\n         *          [digestAlgorithm] the message digest OID, as a string, to use\n         *            (eg: forge.pki.oids.sha1).\n         *          [authenticatedAttributes] an optional array of attributes\n         *            to also sign along with the content.\n         */\n        addSigner: function(signer) {\n          var issuer = signer.issuer;\n          var serialNumber = signer.serialNumber;\n          if (signer.certificate) {\n            var cert = signer.certificate;\n            if (typeof cert === \"string\") {\n              cert = forge.pki.certificateFromPem(cert);\n            }\n            issuer = cert.issuer.attributes;\n            serialNumber = cert.serialNumber;\n          }\n          var key = signer.key;\n          if (!key) {\n            throw new Error(\n              \"Could not add PKCS#7 signer; no private key specified.\"\n            );\n          }\n          if (typeof key === \"string\") {\n            key = forge.pki.privateKeyFromPem(key);\n          }\n          var digestAlgorithm = signer.digestAlgorithm || forge.pki.oids.sha1;\n          switch (digestAlgorithm) {\n            case forge.pki.oids.sha1:\n            case forge.pki.oids.sha256:\n            case forge.pki.oids.sha384:\n            case forge.pki.oids.sha512:\n            case forge.pki.oids.md5:\n              break;\n            default:\n              throw new Error(\n                \"Could not add PKCS#7 signer; unknown message digest algorithm: \" + digestAlgorithm\n              );\n          }\n          var authenticatedAttributes = signer.authenticatedAttributes || [];\n          if (authenticatedAttributes.length > 0) {\n            var contentType = false;\n            var messageDigest = false;\n            for (var i = 0; i < authenticatedAttributes.length; ++i) {\n              var attr = authenticatedAttributes[i];\n              if (!contentType && attr.type === forge.pki.oids.contentType) {\n                contentType = true;\n                if (messageDigest) {\n                  break;\n                }\n                continue;\n              }\n              if (!messageDigest && attr.type === forge.pki.oids.messageDigest) {\n                messageDigest = true;\n                if (contentType) {\n                  break;\n                }\n                continue;\n              }\n            }\n            if (!contentType || !messageDigest) {\n              throw new Error(\"Invalid signer.authenticatedAttributes. If signer.authenticatedAttributes is specified, then it must contain at least two attributes, PKCS #9 content-type and PKCS #9 message-digest.\");\n            }\n          }\n          msg.signers.push({\n            key,\n            version: 1,\n            issuer,\n            serialNumber,\n            digestAlgorithm,\n            signatureAlgorithm: forge.pki.oids.rsaEncryption,\n            signature: null,\n            authenticatedAttributes,\n            unauthenticatedAttributes: []\n          });\n        },\n        /**\n         * Signs the content.\n         * @param options Options to apply when signing:\n         *    [detached] boolean. If signing should be done in detached mode. Defaults to false.\n         */\n        sign: function(options) {\n          options = options || {};\n          if (typeof msg.content !== \"object\" || msg.contentInfo === null) {\n            msg.contentInfo = asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.SEQUENCE,\n              true,\n              [\n                // ContentType\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.OID,\n                  false,\n                  asn1.oidToDer(forge.pki.oids.data).getBytes()\n                )\n              ]\n            );\n            if (\"content\" in msg) {\n              var content;\n              if (msg.content instanceof forge.util.ByteBuffer) {\n                content = msg.content.bytes();\n              } else if (typeof msg.content === \"string\") {\n                content = forge.util.encodeUtf8(msg.content);\n              }\n              if (options.detached) {\n                msg.detachedContent = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, content);\n              } else {\n                msg.contentInfo.value.push(\n                  // [0] EXPLICIT content\n                  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n                    asn1.create(\n                      asn1.Class.UNIVERSAL,\n                      asn1.Type.OCTETSTRING,\n                      false,\n                      content\n                    )\n                  ])\n                );\n              }\n            }\n          }\n          if (msg.signers.length === 0) {\n            return;\n          }\n          var mds = addDigestAlgorithmIds();\n          addSignerInfos(mds);\n        },\n        verify: function() {\n          throw new Error(\"PKCS#7 signature verification not yet implemented.\");\n        },\n        /**\n         * Add a certificate.\n         *\n         * @param cert the certificate to add.\n         */\n        addCertificate: function(cert) {\n          if (typeof cert === \"string\") {\n            cert = forge.pki.certificateFromPem(cert);\n          }\n          msg.certificates.push(cert);\n        },\n        /**\n         * Add a certificate revokation list.\n         *\n         * @param crl the certificate revokation list to add.\n         */\n        addCertificateRevokationList: function(crl) {\n          throw new Error(\"PKCS#7 CRL support not yet implemented.\");\n        }\n      };\n      return msg;\n      function addDigestAlgorithmIds() {\n        var mds = {};\n        for (var i = 0; i < msg.signers.length; ++i) {\n          var signer = msg.signers[i];\n          var oid = signer.digestAlgorithm;\n          if (!(oid in mds)) {\n            mds[oid] = forge.md[forge.pki.oids[oid]].create();\n          }\n          if (signer.authenticatedAttributes.length === 0) {\n            signer.md = mds[oid];\n          } else {\n            signer.md = forge.md[forge.pki.oids[oid]].create();\n          }\n        }\n        msg.digestAlgorithmIdentifiers = [];\n        for (var oid in mds) {\n          msg.digestAlgorithmIdentifiers.push(\n            // AlgorithmIdentifier\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n              // algorithm\n              asn1.create(\n                asn1.Class.UNIVERSAL,\n                asn1.Type.OID,\n                false,\n                asn1.oidToDer(oid).getBytes()\n              ),\n              // parameters (null)\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n            ])\n          );\n        }\n        return mds;\n      }\n      function addSignerInfos(mds) {\n        var content;\n        if (msg.detachedContent) {\n          content = msg.detachedContent;\n        } else {\n          content = msg.contentInfo.value[1];\n          content = content.value[0];\n        }\n        if (!content) {\n          throw new Error(\n            \"Could not sign PKCS#7 message; there is no content to sign.\"\n          );\n        }\n        var contentType = asn1.derToOid(msg.contentInfo.value[0].value);\n        var bytes = asn1.toDer(content);\n        bytes.getByte();\n        asn1.getBerValueLength(bytes);\n        bytes = bytes.getBytes();\n        for (var oid in mds) {\n          mds[oid].start().update(bytes);\n        }\n        var signingTime = /* @__PURE__ */ new Date();\n        for (var i = 0; i < msg.signers.length; ++i) {\n          var signer = msg.signers[i];\n          if (signer.authenticatedAttributes.length === 0) {\n            if (contentType !== forge.pki.oids.data) {\n              throw new Error(\n                \"Invalid signer; authenticatedAttributes must be present when the ContentInfo content type is not PKCS#7 Data.\"\n              );\n            }\n          } else {\n            signer.authenticatedAttributesAsn1 = asn1.create(\n              asn1.Class.CONTEXT_SPECIFIC,\n              0,\n              true,\n              []\n            );\n            var attrsAsn1 = asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.SET,\n              true,\n              []\n            );\n            for (var ai = 0; ai < signer.authenticatedAttributes.length; ++ai) {\n              var attr = signer.authenticatedAttributes[ai];\n              if (attr.type === forge.pki.oids.messageDigest) {\n                attr.value = mds[signer.digestAlgorithm].digest();\n              } else if (attr.type === forge.pki.oids.signingTime) {\n                if (!attr.value) {\n                  attr.value = signingTime;\n                }\n              }\n              attrsAsn1.value.push(_attributeToAsn1(attr));\n              signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr));\n            }\n            bytes = asn1.toDer(attrsAsn1).getBytes();\n            signer.md.start().update(bytes);\n          }\n          signer.signature = signer.key.sign(signer.md, \"RSASSA-PKCS1-V1_5\");\n        }\n        msg.signerInfos = _signersToAsn1(msg.signers);\n      }\n    };\n    p7.createEncryptedData = function() {\n      var msg = null;\n      msg = {\n        type: forge.pki.oids.encryptedData,\n        version: 0,\n        encryptedContent: {\n          algorithm: forge.pki.oids[\"aes256-CBC\"]\n        },\n        /**\n         * Reads an EncryptedData content block (in ASN.1 format)\n         *\n         * @param obj The ASN.1 representation of the EncryptedData content block\n         */\n        fromAsn1: function(obj) {\n          _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);\n        },\n        /**\n         * Decrypt encrypted content\n         *\n         * @param key The (symmetric) key as a byte buffer\n         */\n        decrypt: function(key) {\n          if (key !== void 0) {\n            msg.encryptedContent.key = key;\n          }\n          _decryptContent(msg);\n        }\n      };\n      return msg;\n    };\n    p7.createEnvelopedData = function() {\n      var msg = null;\n      msg = {\n        type: forge.pki.oids.envelopedData,\n        version: 0,\n        recipients: [],\n        encryptedContent: {\n          algorithm: forge.pki.oids[\"aes256-CBC\"]\n        },\n        /**\n         * Reads an EnvelopedData content block (in ASN.1 format)\n         *\n         * @param obj the ASN.1 representation of the EnvelopedData content block.\n         */\n        fromAsn1: function(obj) {\n          var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);\n          msg.recipients = _recipientsFromAsn1(capture.recipientInfos.value);\n        },\n        toAsn1: function() {\n          return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // ContentType\n            asn1.create(\n              asn1.Class.UNIVERSAL,\n              asn1.Type.OID,\n              false,\n              asn1.oidToDer(msg.type).getBytes()\n            ),\n            // [0] EnvelopedData\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                // Version\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.INTEGER,\n                  false,\n                  asn1.integerToDer(msg.version).getBytes()\n                ),\n                // RecipientInfos\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.SET,\n                  true,\n                  _recipientsToAsn1(msg.recipients)\n                ),\n                // EncryptedContentInfo\n                asn1.create(\n                  asn1.Class.UNIVERSAL,\n                  asn1.Type.SEQUENCE,\n                  true,\n                  _encryptedContentToAsn1(msg.encryptedContent)\n                )\n              ])\n            ])\n          ]);\n        },\n        /**\n         * Find recipient by X.509 certificate's issuer.\n         *\n         * @param cert the certificate with the issuer to look for.\n         *\n         * @return the recipient object.\n         */\n        findRecipient: function(cert) {\n          var sAttr = cert.issuer.attributes;\n          for (var i = 0; i < msg.recipients.length; ++i) {\n            var r = msg.recipients[i];\n            var rAttr = r.issuer;\n            if (r.serialNumber !== cert.serialNumber) {\n              continue;\n            }\n            if (rAttr.length !== sAttr.length) {\n              continue;\n            }\n            var match = true;\n            for (var j = 0; j < sAttr.length; ++j) {\n              if (rAttr[j].type !== sAttr[j].type || rAttr[j].value !== sAttr[j].value) {\n                match = false;\n                break;\n              }\n            }\n            if (match) {\n              return r;\n            }\n          }\n          return null;\n        },\n        /**\n         * Decrypt enveloped content\n         *\n         * @param recipient The recipient object related to the private key\n         * @param privKey The (RSA) private key object\n         */\n        decrypt: function(recipient, privKey) {\n          if (msg.encryptedContent.key === void 0 && recipient !== void 0 && privKey !== void 0) {\n            switch (recipient.encryptedContent.algorithm) {\n              case forge.pki.oids.rsaEncryption:\n              case forge.pki.oids.desCBC:\n                var key = privKey.decrypt(recipient.encryptedContent.content);\n                msg.encryptedContent.key = forge.util.createBuffer(key);\n                break;\n              default:\n                throw new Error(\"Unsupported asymmetric cipher, OID \" + recipient.encryptedContent.algorithm);\n            }\n          }\n          _decryptContent(msg);\n        },\n        /**\n         * Add (another) entity to list of recipients.\n         *\n         * @param cert The certificate of the entity to add.\n         */\n        addRecipient: function(cert) {\n          msg.recipients.push({\n            version: 0,\n            issuer: cert.issuer.attributes,\n            serialNumber: cert.serialNumber,\n            encryptedContent: {\n              // We simply assume rsaEncryption here, since forge.pki only\n              // supports RSA so far.  If the PKI module supports other\n              // ciphers one day, we need to modify this one as well.\n              algorithm: forge.pki.oids.rsaEncryption,\n              key: cert.publicKey\n            }\n          });\n        },\n        /**\n         * Encrypt enveloped content.\n         *\n         * This function supports two optional arguments, cipher and key, which\n         * can be used to influence symmetric encryption.  Unless cipher is\n         * provided, the cipher specified in encryptedContent.algorithm is used\n         * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key\n         * is (re-)used.  If that one's not set, a random key will be generated\n         * automatically.\n         *\n         * @param [key] The key to be used for symmetric encryption.\n         * @param [cipher] The OID of the symmetric cipher to use.\n         */\n        encrypt: function(key, cipher) {\n          if (msg.encryptedContent.content === void 0) {\n            cipher = cipher || msg.encryptedContent.algorithm;\n            key = key || msg.encryptedContent.key;\n            var keyLen, ivLen, ciphFn;\n            switch (cipher) {\n              case forge.pki.oids[\"aes128-CBC\"]:\n                keyLen = 16;\n                ivLen = 16;\n                ciphFn = forge.aes.createEncryptionCipher;\n                break;\n              case forge.pki.oids[\"aes192-CBC\"]:\n                keyLen = 24;\n                ivLen = 16;\n                ciphFn = forge.aes.createEncryptionCipher;\n                break;\n              case forge.pki.oids[\"aes256-CBC\"]:\n                keyLen = 32;\n                ivLen = 16;\n                ciphFn = forge.aes.createEncryptionCipher;\n                break;\n              case forge.pki.oids[\"des-EDE3-CBC\"]:\n                keyLen = 24;\n                ivLen = 8;\n                ciphFn = forge.des.createEncryptionCipher;\n                break;\n              default:\n                throw new Error(\"Unsupported symmetric cipher, OID \" + cipher);\n            }\n            if (key === void 0) {\n              key = forge.util.createBuffer(forge.random.getBytes(keyLen));\n            } else if (key.length() != keyLen) {\n              throw new Error(\"Symmetric key has wrong length; got \" + key.length() + \" bytes, expected \" + keyLen + \".\");\n            }\n            msg.encryptedContent.algorithm = cipher;\n            msg.encryptedContent.key = key;\n            msg.encryptedContent.parameter = forge.util.createBuffer(\n              forge.random.getBytes(ivLen)\n            );\n            var ciph = ciphFn(key);\n            ciph.start(msg.encryptedContent.parameter.copy());\n            ciph.update(msg.content);\n            if (!ciph.finish()) {\n              throw new Error(\"Symmetric encryption failed.\");\n            }\n            msg.encryptedContent.content = ciph.output;\n          }\n          for (var i = 0; i < msg.recipients.length; ++i) {\n            var recipient = msg.recipients[i];\n            if (recipient.encryptedContent.content !== void 0) {\n              continue;\n            }\n            switch (recipient.encryptedContent.algorithm) {\n              case forge.pki.oids.rsaEncryption:\n                recipient.encryptedContent.content = recipient.encryptedContent.key.encrypt(\n                  msg.encryptedContent.key.data\n                );\n                break;\n              default:\n                throw new Error(\"Unsupported asymmetric cipher, OID \" + recipient.encryptedContent.algorithm);\n            }\n          }\n        }\n      };\n      return msg;\n    };\n    function _recipientFromAsn1(obj) {\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)) {\n        var error = new Error(\"Cannot read PKCS#7 RecipientInfo. ASN.1 object is not an PKCS#7 RecipientInfo.\");\n        error.errors = errors;\n        throw error;\n      }\n      return {\n        version: capture.version.charCodeAt(0),\n        issuer: forge.pki.RDNAttributesAsArray(capture.issuer),\n        serialNumber: forge.util.createBuffer(capture.serial).toHex(),\n        encryptedContent: {\n          algorithm: asn1.derToOid(capture.encAlgorithm),\n          parameter: capture.encParameter ? capture.encParameter.value : void 0,\n          content: capture.encKey\n        }\n      };\n    }\n    function _recipientToAsn1(obj) {\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // Version\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          asn1.integerToDer(obj.version).getBytes()\n        ),\n        // IssuerAndSerialNumber\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // Name\n          forge.pki.distinguishedNameToAsn1({ attributes: obj.issuer }),\n          // Serial\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.INTEGER,\n            false,\n            forge.util.hexToBytes(obj.serialNumber)\n          )\n        ]),\n        // KeyEncryptionAlgorithmIdentifier\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // Algorithm\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()\n          ),\n          // Parameter, force NULL, only RSA supported for now.\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n        ]),\n        // EncryptedKey\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OCTETSTRING,\n          false,\n          obj.encryptedContent.content\n        )\n      ]);\n    }\n    function _recipientsFromAsn1(infos) {\n      var ret = [];\n      for (var i = 0; i < infos.length; ++i) {\n        ret.push(_recipientFromAsn1(infos[i]));\n      }\n      return ret;\n    }\n    function _recipientsToAsn1(recipients) {\n      var ret = [];\n      for (var i = 0; i < recipients.length; ++i) {\n        ret.push(_recipientToAsn1(recipients[i]));\n      }\n      return ret;\n    }\n    function _signerToAsn1(obj) {\n      var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // version\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.INTEGER,\n          false,\n          asn1.integerToDer(obj.version).getBytes()\n        ),\n        // issuerAndSerialNumber\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // name\n          forge.pki.distinguishedNameToAsn1({ attributes: obj.issuer }),\n          // serial\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.INTEGER,\n            false,\n            forge.util.hexToBytes(obj.serialNumber)\n          )\n        ]),\n        // digestAlgorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // algorithm\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(obj.digestAlgorithm).getBytes()\n          ),\n          // parameters (null)\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n        ])\n      ]);\n      if (obj.authenticatedAttributesAsn1) {\n        rval.value.push(obj.authenticatedAttributesAsn1);\n      }\n      rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // algorithm\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OID,\n          false,\n          asn1.oidToDer(obj.signatureAlgorithm).getBytes()\n        ),\n        // parameters (null)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n      ]));\n      rval.value.push(asn1.create(\n        asn1.Class.UNIVERSAL,\n        asn1.Type.OCTETSTRING,\n        false,\n        obj.signature\n      ));\n      if (obj.unauthenticatedAttributes.length > 0) {\n        var attrsAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, []);\n        for (var i = 0; i < obj.unauthenticatedAttributes.length; ++i) {\n          var attr = obj.unauthenticatedAttributes[i];\n          attrsAsn1.values.push(_attributeToAsn1(attr));\n        }\n        rval.value.push(attrsAsn1);\n      }\n      return rval;\n    }\n    function _signersToAsn1(signers) {\n      var ret = [];\n      for (var i = 0; i < signers.length; ++i) {\n        ret.push(_signerToAsn1(signers[i]));\n      }\n      return ret;\n    }\n    function _attributeToAsn1(attr) {\n      var value;\n      if (attr.type === forge.pki.oids.contentType) {\n        value = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OID,\n          false,\n          asn1.oidToDer(attr.value).getBytes()\n        );\n      } else if (attr.type === forge.pki.oids.messageDigest) {\n        value = asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OCTETSTRING,\n          false,\n          attr.value.bytes()\n        );\n      } else if (attr.type === forge.pki.oids.signingTime) {\n        var jan_1_1950 = /* @__PURE__ */ new Date(\"1950-01-01T00:00:00Z\");\n        var jan_1_2050 = /* @__PURE__ */ new Date(\"2050-01-01T00:00:00Z\");\n        var date = attr.value;\n        if (typeof date === \"string\") {\n          var timestamp = Date.parse(date);\n          if (!isNaN(timestamp)) {\n            date = new Date(timestamp);\n          } else if (date.length === 13) {\n            date = asn1.utcTimeToDate(date);\n          } else {\n            date = asn1.generalizedTimeToDate(date);\n          }\n        }\n        if (date >= jan_1_1950 && date < jan_1_2050) {\n          value = asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.UTCTIME,\n            false,\n            asn1.dateToUtcTime(date)\n          );\n        } else {\n          value = asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.GENERALIZEDTIME,\n            false,\n            asn1.dateToGeneralizedTime(date)\n          );\n        }\n      }\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // AttributeType\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OID,\n          false,\n          asn1.oidToDer(attr.type).getBytes()\n        ),\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n          // AttributeValue\n          value\n        ])\n      ]);\n    }\n    function _encryptedContentToAsn1(ec) {\n      return [\n        // ContentType, always Data for the moment\n        asn1.create(\n          asn1.Class.UNIVERSAL,\n          asn1.Type.OID,\n          false,\n          asn1.oidToDer(forge.pki.oids.data).getBytes()\n        ),\n        // ContentEncryptionAlgorithmIdentifier\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // Algorithm\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OID,\n            false,\n            asn1.oidToDer(ec.algorithm).getBytes()\n          ),\n          // Parameters (IV)\n          !ec.parameter ? void 0 : asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OCTETSTRING,\n            false,\n            ec.parameter.getBytes()\n          )\n        ]),\n        // [0] EncryptedContent\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          asn1.create(\n            asn1.Class.UNIVERSAL,\n            asn1.Type.OCTETSTRING,\n            false,\n            ec.content.getBytes()\n          )\n        ])\n      ];\n    }\n    function _fromAsn1(msg, obj, validator) {\n      var capture = {};\n      var errors = [];\n      if (!asn1.validate(obj, validator, capture, errors)) {\n        var error = new Error(\"Cannot read PKCS#7 message. ASN.1 object is not a supported PKCS#7 message.\");\n        error.errors = error;\n        throw error;\n      }\n      var contentType = asn1.derToOid(capture.contentType);\n      if (contentType !== forge.pki.oids.data) {\n        throw new Error(\"Unsupported PKCS#7 message. Only wrapped ContentType Data supported.\");\n      }\n      if (capture.encryptedContent) {\n        var content = \"\";\n        if (forge.util.isArray(capture.encryptedContent)) {\n          for (var i = 0; i < capture.encryptedContent.length; ++i) {\n            if (capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING) {\n              throw new Error(\"Malformed PKCS#7 message, expecting encrypted content constructed of only OCTET STRING objects.\");\n            }\n            content += capture.encryptedContent[i].value;\n          }\n        } else {\n          content = capture.encryptedContent;\n        }\n        msg.encryptedContent = {\n          algorithm: asn1.derToOid(capture.encAlgorithm),\n          parameter: forge.util.createBuffer(capture.encParameter.value),\n          content: forge.util.createBuffer(content)\n        };\n      }\n      if (capture.content) {\n        var content = \"\";\n        if (forge.util.isArray(capture.content)) {\n          for (var i = 0; i < capture.content.length; ++i) {\n            if (capture.content[i].type !== asn1.Type.OCTETSTRING) {\n              throw new Error(\"Malformed PKCS#7 message, expecting content constructed of only OCTET STRING objects.\");\n            }\n            content += capture.content[i].value;\n          }\n        } else {\n          content = capture.content;\n        }\n        msg.content = forge.util.createBuffer(content);\n      }\n      msg.version = capture.version.charCodeAt(0);\n      msg.rawCapture = capture;\n      return capture;\n    }\n    function _decryptContent(msg) {\n      if (msg.encryptedContent.key === void 0) {\n        throw new Error(\"Symmetric key not available.\");\n      }\n      if (msg.content === void 0) {\n        var ciph;\n        switch (msg.encryptedContent.algorithm) {\n          case forge.pki.oids[\"aes128-CBC\"]:\n          case forge.pki.oids[\"aes192-CBC\"]:\n          case forge.pki.oids[\"aes256-CBC\"]:\n            ciph = forge.aes.createDecryptionCipher(msg.encryptedContent.key);\n            break;\n          case forge.pki.oids[\"desCBC\"]:\n          case forge.pki.oids[\"des-EDE3-CBC\"]:\n            ciph = forge.des.createDecryptionCipher(msg.encryptedContent.key);\n            break;\n          default:\n            throw new Error(\"Unsupported symmetric cipher, OID \" + msg.encryptedContent.algorithm);\n        }\n        ciph.start(msg.encryptedContent.parameter);\n        ciph.update(msg.encryptedContent.content);\n        if (!ciph.finish()) {\n          throw new Error(\"Symmetric decryption failed.\");\n        }\n        msg.content = ciph.output;\n      }\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/ssh.js\nvar require_ssh = __commonJS({\n  \"../../node_modules/node-forge/lib/ssh.js\"(exports, module2) {\n    \"use strict\";\n    var forge = require_forge();\n    require_aes();\n    require_hmac();\n    require_md5();\n    require_sha1();\n    require_util();\n    var ssh = module2.exports = forge.ssh = forge.ssh || {};\n    ssh.privateKeyToPutty = function(privateKey, passphrase, comment) {\n      comment = comment || \"\";\n      passphrase = passphrase || \"\";\n      var algorithm = \"ssh-rsa\";\n      var encryptionAlgorithm = passphrase === \"\" ? \"none\" : \"aes256-cbc\";\n      var ppk = \"PuTTY-User-Key-File-2: \" + algorithm + \"\\r\\n\";\n      ppk += \"Encryption: \" + encryptionAlgorithm + \"\\r\\n\";\n      ppk += \"Comment: \" + comment + \"\\r\\n\";\n      var pubbuffer = forge.util.createBuffer();\n      _addStringToBuffer(pubbuffer, algorithm);\n      _addBigIntegerToBuffer(pubbuffer, privateKey.e);\n      _addBigIntegerToBuffer(pubbuffer, privateKey.n);\n      var pub = forge.util.encode64(pubbuffer.bytes(), 64);\n      var length = Math.floor(pub.length / 66) + 1;\n      ppk += \"Public-Lines: \" + length + \"\\r\\n\";\n      ppk += pub;\n      var privbuffer = forge.util.createBuffer();\n      _addBigIntegerToBuffer(privbuffer, privateKey.d);\n      _addBigIntegerToBuffer(privbuffer, privateKey.p);\n      _addBigIntegerToBuffer(privbuffer, privateKey.q);\n      _addBigIntegerToBuffer(privbuffer, privateKey.qInv);\n      var priv;\n      if (!passphrase) {\n        priv = forge.util.encode64(privbuffer.bytes(), 64);\n      } else {\n        var encLen = privbuffer.length() + 16 - 1;\n        encLen -= encLen % 16;\n        var padding = _sha1(privbuffer.bytes());\n        padding.truncate(padding.length() - encLen + privbuffer.length());\n        privbuffer.putBuffer(padding);\n        var aeskey = forge.util.createBuffer();\n        aeskey.putBuffer(_sha1(\"\\0\\0\\0\\0\", passphrase));\n        aeskey.putBuffer(_sha1(\"\\0\\0\\0\u0001\", passphrase));\n        var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), \"CBC\");\n        cipher.start(forge.util.createBuffer().fillWithByte(0, 16));\n        cipher.update(privbuffer.copy());\n        cipher.finish();\n        var encrypted = cipher.output;\n        encrypted.truncate(16);\n        priv = forge.util.encode64(encrypted.bytes(), 64);\n      }\n      length = Math.floor(priv.length / 66) + 1;\n      ppk += \"\\r\\nPrivate-Lines: \" + length + \"\\r\\n\";\n      ppk += priv;\n      var mackey = _sha1(\"putty-private-key-file-mac-key\", passphrase);\n      var macbuffer = forge.util.createBuffer();\n      _addStringToBuffer(macbuffer, algorithm);\n      _addStringToBuffer(macbuffer, encryptionAlgorithm);\n      _addStringToBuffer(macbuffer, comment);\n      macbuffer.putInt32(pubbuffer.length());\n      macbuffer.putBuffer(pubbuffer);\n      macbuffer.putInt32(privbuffer.length());\n      macbuffer.putBuffer(privbuffer);\n      var hmac = forge.hmac.create();\n      hmac.start(\"sha1\", mackey);\n      hmac.update(macbuffer.bytes());\n      ppk += \"\\r\\nPrivate-MAC: \" + hmac.digest().toHex() + \"\\r\\n\";\n      return ppk;\n    };\n    ssh.publicKeyToOpenSSH = function(key, comment) {\n      var type = \"ssh-rsa\";\n      comment = comment || \"\";\n      var buffer = forge.util.createBuffer();\n      _addStringToBuffer(buffer, type);\n      _addBigIntegerToBuffer(buffer, key.e);\n      _addBigIntegerToBuffer(buffer, key.n);\n      return type + \" \" + forge.util.encode64(buffer.bytes()) + \" \" + comment;\n    };\n    ssh.privateKeyToOpenSSH = function(privateKey, passphrase) {\n      if (!passphrase) {\n        return forge.pki.privateKeyToPem(privateKey);\n      }\n      return forge.pki.encryptRsaPrivateKey(\n        privateKey,\n        passphrase,\n        { legacy: true, algorithm: \"aes128\" }\n      );\n    };\n    ssh.getPublicKeyFingerprint = function(key, options) {\n      options = options || {};\n      var md = options.md || forge.md.md5.create();\n      var type = \"ssh-rsa\";\n      var buffer = forge.util.createBuffer();\n      _addStringToBuffer(buffer, type);\n      _addBigIntegerToBuffer(buffer, key.e);\n      _addBigIntegerToBuffer(buffer, key.n);\n      md.start();\n      md.update(buffer.getBytes());\n      var digest = md.digest();\n      if (options.encoding === \"hex\") {\n        var hex = digest.toHex();\n        if (options.delimiter) {\n          return hex.match(/.{2}/g).join(options.delimiter);\n        }\n        return hex;\n      } else if (options.encoding === \"binary\") {\n        return digest.getBytes();\n      } else if (options.encoding) {\n        throw new Error('Unknown encoding \"' + options.encoding + '\".');\n      }\n      return digest;\n    };\n    function _addBigIntegerToBuffer(buffer, val) {\n      var hexVal = val.toString(16);\n      if (hexVal[0] >= \"8\") {\n        hexVal = \"00\" + hexVal;\n      }\n      var bytes = forge.util.hexToBytes(hexVal);\n      buffer.putInt32(bytes.length);\n      buffer.putBytes(bytes);\n    }\n    function _addStringToBuffer(buffer, val) {\n      buffer.putInt32(val.length);\n      buffer.putString(val);\n    }\n    function _sha1() {\n      var sha = forge.md.sha1.create();\n      var num = arguments.length;\n      for (var i = 0; i < num; ++i) {\n        sha.update(arguments[i]);\n      }\n      return sha.digest();\n    }\n  }\n});\n\n// ../../node_modules/node-forge/lib/index.js\nvar require_lib = __commonJS({\n  \"../../node_modules/node-forge/lib/index.js\"(exports, module2) {\n    \"use strict\";\n    module2.exports = require_forge();\n    require_aes();\n    require_aesCipherSuites();\n    require_asn1();\n    require_cipher();\n    require_des();\n    require_ed25519();\n    require_hmac();\n    require_kem();\n    require_log();\n    require_md_all();\n    require_mgf1();\n    require_pbkdf2();\n    require_pem();\n    require_pkcs1();\n    require_pkcs12();\n    require_pkcs7();\n    require_pki();\n    require_prime();\n    require_prng();\n    require_pss();\n    require_random();\n    require_rc2();\n    require_ssh();\n    require_tls();\n    require_util();\n  }\n});\n\n// ../../node_modules/bn.js/lib/bn.js\nvar require_bn = __commonJS({\n  \"../../node_modules/bn.js/lib/bn.js\"(exports, module2) {\n    \"use strict\";\n    (function(module3, exports2) {\n      \"use strict\";\n      function assert(val, msg) {\n        if (!val)\n          throw new Error(msg || \"Assertion failed\");\n      }\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {\n        };\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      }\n      function BN2(number, base, endian) {\n        if (BN2.isBN(number)) {\n          return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        this.red = null;\n        if (number !== null) {\n          if (base === \"le\" || base === \"be\") {\n            endian = base;\n            base = 10;\n          }\n          this._init(number || 0, base || 10, endian || \"be\");\n        }\n      }\n      if (typeof module3 === \"object\") {\n        module3.exports = BN2;\n      } else {\n        exports2.BN = BN2;\n      }\n      BN2.BN = BN2;\n      BN2.wordSize = 26;\n      var Buffer3;\n      try {\n        if (typeof window !== \"undefined\" && typeof window.Buffer !== \"undefined\") {\n          Buffer3 = window.Buffer;\n        } else {\n          Buffer3 = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n        }\n      } catch (e) {\n      }\n      BN2.isBN = function isBN(num) {\n        if (num instanceof BN2) {\n          return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);\n      };\n      BN2.max = function max(left, right) {\n        if (left.cmp(right) > 0)\n          return left;\n        return right;\n      };\n      BN2.min = function min(left, right) {\n        if (left.cmp(right) < 0)\n          return left;\n        return right;\n      };\n      BN2.prototype._init = function init2(number, base, endian) {\n        if (typeof number === \"number\") {\n          return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n          return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n          base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n          start++;\n          this.negative = 1;\n        }\n        if (start < number.length) {\n          if (base === 16) {\n            this._parseHex(number, start, endian);\n          } else {\n            this._parseBase(number, base, start);\n            if (endian === \"le\") {\n              this._initArray(this.toArray(), base, endian);\n            }\n          }\n        }\n      };\n      BN2.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n        if (number < 67108864) {\n          this.words = [number & 67108863];\n          this.length = 1;\n        } else if (number < 4503599627370496) {\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863\n          ];\n          this.length = 2;\n        } else {\n          assert(number < 9007199254740992);\n          this.words = [\n            number & 67108863,\n            number / 67108864 & 67108863,\n            1\n          ];\n          this.length = 3;\n        }\n        if (endian !== \"le\")\n          return;\n        this._initArray(this.toArray(), base, endian);\n      };\n      BN2.prototype._initArray = function _initArray(number, base, endian) {\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === \"le\") {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 67108863;\n            this.words[j + 1] = w >>> 26 - off & 67108863;\n            off += 24;\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n        return this._strip();\n      };\n      function parseHex4Bits(string, index) {\n        var c = string.charCodeAt(index);\n        if (c >= 48 && c <= 57) {\n          return c - 48;\n        } else if (c >= 65 && c <= 70) {\n          return c - 55;\n        } else if (c >= 97 && c <= 102) {\n          return c - 87;\n        } else {\n          assert(false, \"Invalid character in \" + string);\n        }\n      }\n      function parseHexByte(string, lowerBound, index) {\n        var r = parseHex4Bits(string, index);\n        if (index - 1 >= lowerBound) {\n          r |= parseHex4Bits(string, index - 1) << 4;\n        }\n        return r;\n      }\n      BN2.prototype._parseHex = function _parseHex(number, start, endian) {\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n        var off = 0;\n        var j = 0;\n        var w;\n        if (endian === \"be\") {\n          for (i = number.length - 1; i >= start; i -= 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        } else {\n          var parseLength = number.length - start;\n          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n            w = parseHexByte(number, start, i) << off;\n            this.words[j] |= w & 67108863;\n            if (off >= 18) {\n              off -= 18;\n              j += 1;\n              this.words[j] |= w >>> 26;\n            } else {\n              off += 8;\n            }\n          }\n        }\n        this._strip();\n      };\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var b = 0;\n        var len = Math.min(str.length, end);\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul;\n          if (c >= 49) {\n            b = c - 49 + 10;\n          } else if (c >= 17) {\n            b = c - 17 + 10;\n          } else {\n            b = c;\n          }\n          assert(c >= 0 && b < mul, \"Invalid character\");\n          r += b;\n        }\n        return r;\n      }\n      BN2.prototype._parseBase = function _parseBase(number, base, start) {\n        this.words = [0];\n        this.length = 1;\n        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {\n          limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n          this.imuln(pow);\n          if (this.words[0] + word < 67108864) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n        this._strip();\n      };\n      BN2.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n      function move(dest, src) {\n        dest.words = src.words;\n        dest.length = src.length;\n        dest.negative = src.negative;\n        dest.red = src.red;\n      }\n      BN2.prototype._move = function _move(dest) {\n        move(dest, this);\n      };\n      BN2.prototype.clone = function clone() {\n        var r = new BN2(null);\n        this.copy(r);\n        return r;\n      };\n      BN2.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n        return this;\n      };\n      BN2.prototype._strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n        return this._normSign();\n      };\n      BN2.prototype._normSign = function _normSign() {\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n        return this;\n      };\n      if (typeof Symbol !== \"undefined\" && typeof Symbol.for === \"function\") {\n        try {\n          BN2.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = inspect;\n        } catch (e) {\n          BN2.prototype.inspect = inspect;\n        }\n      } else {\n        BN2.prototype.inspect = inspect;\n      }\n      function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      }\n      var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ];\n      var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ];\n      var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      BN2.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n          out = \"\";\n          var off = 0;\n          var carry = 0;\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 16777215).toString(16);\n            carry = w >>> 24 - off & 16777215;\n            off += 2;\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n          }\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          var groupSize = groupSizes[base];\n          var groupBase = groupBases[base];\n          out = \"\";\n          var c = this.clone();\n          c.negative = 0;\n          while (!c.isZero()) {\n            var r = c.modrn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n          if (this.isZero()) {\n            out = \"0\" + out;\n          }\n          while (out.length % padding !== 0) {\n            out = \"0\" + out;\n          }\n          if (this.negative !== 0) {\n            out = \"-\" + out;\n          }\n          return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n      };\n      BN2.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n          ret += this.words[1] * 67108864;\n        } else if (this.length === 3 && this.words[2] === 1) {\n          ret += 4503599627370496 + this.words[1] * 67108864;\n        } else if (this.length > 2) {\n          assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n      };\n      BN2.prototype.toJSON = function toJSON() {\n        return this.toString(16, 2);\n      };\n      if (Buffer3) {\n        BN2.prototype.toBuffer = function toBuffer(endian, length) {\n          return this.toArrayLike(Buffer3, endian, length);\n        };\n      }\n      BN2.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n      var allocate = function allocate2(ArrayType, size) {\n        if (ArrayType.allocUnsafe) {\n          return ArrayType.allocUnsafe(size);\n        }\n        return new ArrayType(size);\n      };\n      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        this._strip();\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        var res = allocate(ArrayType, reqLength);\n        var postfix = endian === \"le\" ? \"LE\" : \"BE\";\n        this[\"_toArrayLike\" + postfix](res, byteLength);\n        return res;\n      };\n      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {\n        var position = 0;\n        var carry = 0;\n        for (var i = 0, shift = 0; i < this.length; i++) {\n          var word = this.words[i] << shift | carry;\n          res[position++] = word & 255;\n          if (position < res.length) {\n            res[position++] = word >> 8 & 255;\n          }\n          if (position < res.length) {\n            res[position++] = word >> 16 & 255;\n          }\n          if (shift === 6) {\n            if (position < res.length) {\n              res[position++] = word >> 24 & 255;\n            }\n            carry = 0;\n            shift = 0;\n          } else {\n            carry = word >>> 24;\n            shift += 2;\n          }\n        }\n        if (position < res.length) {\n          res[position++] = carry;\n          while (position < res.length) {\n            res[position++] = 0;\n          }\n        }\n      };\n      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {\n        var position = res.length - 1;\n        var carry = 0;\n        for (var i = 0, shift = 0; i < this.length; i++) {\n          var word = this.words[i] << shift | carry;\n          res[position--] = word & 255;\n          if (position >= 0) {\n            res[position--] = word >> 8 & 255;\n          }\n          if (position >= 0) {\n            res[position--] = word >> 16 & 255;\n          }\n          if (shift === 6) {\n            if (position >= 0) {\n              res[position--] = word >> 24 & 255;\n            }\n            carry = 0;\n            shift = 0;\n          } else {\n            carry = word >>> 24;\n            shift += 2;\n          }\n        }\n        if (position >= 0) {\n          res[position--] = carry;\n          while (position >= 0) {\n            res[position--] = 0;\n          }\n        }\n      };\n      if (Math.clz32) {\n        BN2.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN2.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n          if (t >= 4096) {\n            r += 13;\n            t >>>= 13;\n          }\n          if (t >= 64) {\n            r += 7;\n            t >>>= 7;\n          }\n          if (t >= 8) {\n            r += 4;\n            t >>>= 4;\n          }\n          if (t >= 2) {\n            r += 2;\n            t >>>= 2;\n          }\n          return r + t;\n        };\n      }\n      BN2.prototype._zeroBits = function _zeroBits(w) {\n        if (w === 0)\n          return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 8191) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n        if ((t & 127) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n        if ((t & 15) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n        if ((t & 3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n        if ((t & 1) === 0) {\n          r++;\n        }\n        return r;\n      };\n      BN2.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n      };\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = num.words[off] >>> wbit & 1;\n        }\n        return w;\n      }\n      BN2.prototype.zeroBits = function zeroBits() {\n        if (this.isZero())\n          return 0;\n        var r = 0;\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n          r += b;\n          if (b !== 26)\n            break;\n        }\n        return r;\n      };\n      BN2.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n      BN2.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n      };\n      BN2.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n      };\n      BN2.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      };\n      BN2.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n      BN2.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n        return this;\n      };\n      BN2.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n        return this._strip();\n      };\n      BN2.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      };\n      BN2.prototype.or = function or(num) {\n        if (this.length > num.length)\n          return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n      BN2.prototype.uor = function uor(num) {\n        if (this.length > num.length)\n          return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      };\n      BN2.prototype.iuand = function iuand(num) {\n        var b;\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this._strip();\n      };\n      BN2.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      };\n      BN2.prototype.and = function and(num) {\n        if (this.length > num.length)\n          return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n      BN2.prototype.uand = function uand(num) {\n        if (this.length > num.length)\n          return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      };\n      BN2.prototype.iuxor = function iuxor(num) {\n        var a;\n        var b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = a.length;\n        return this._strip();\n      };\n      BN2.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      };\n      BN2.prototype.xor = function xor(num) {\n        if (this.length > num.length)\n          return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n      BN2.prototype.uxor = function uxor(num) {\n        if (this.length > num.length)\n          return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      };\n      BN2.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        }\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 67108863;\n        }\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;\n        }\n        return this._strip();\n      };\n      BN2.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      };\n      BN2.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this._strip();\n      };\n      BN2.prototype.iadd = function iadd(num) {\n        var r;\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign();\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        }\n        var a, b;\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 67108863;\n          carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++;\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        return this;\n      };\n      BN2.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n        if (this.length > num.length)\n          return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      };\n      BN2.prototype.isub = function isub(num) {\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign();\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        }\n        var cmp = this.cmp(num);\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        }\n        var a, b;\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n        var carry = 0;\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 67108863;\n        }\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n          this.negative = 1;\n        }\n        return this._strip();\n      };\n      BN2.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n      function smallMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        var len = self2.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        var a = self2.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 67108863;\n        var carry = r / 67108864 | 0;\n        out.words[0] = lo;\n        for (var k = 1; k < len; k++) {\n          var ncarry = carry >>> 26;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self2.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 67108864 | 0;\n            rword = r & 67108863;\n          }\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n        return out._strip();\n      }\n      var comb10MulTo = function comb10MulTo2(self2, num, out) {\n        var a = self2.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 8191;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 8191;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 8191;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 8191;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 8191;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 8191;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 8191;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 8191;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 8191;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 8191;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 8191;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 8191;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 8191;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 8191;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 8191;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 8191;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 8191;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 8191;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 8191;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 8191;\n        var bh9 = b9 >>> 13;\n        out.negative = self2.negative ^ num.negative;\n        out.length = 19;\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 67108863;\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 67108863;\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 67108863;\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 67108863;\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 67108863;\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 67108863;\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 67108863;\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 67108863;\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 67108863;\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 67108863;\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 67108863;\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 67108863;\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 67108863;\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 67108863;\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 67108863;\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 67108863;\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 67108863;\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 67108863;\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 67108863;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n        return out;\n      };\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n      function bigMulTo(self2, num, out) {\n        out.negative = num.negative ^ self2.negative;\n        out.length = self2.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for (var k = 0; k < out.length - 1; k++) {\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 67108863;\n          var maxJ = Math.min(k, num.length - 1);\n          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self2.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 67108863;\n            ncarry = ncarry + (r / 67108864 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 67108863;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 67108863;\n          }\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n        return out._strip();\n      }\n      function jumboMulTo(self2, num, out) {\n        return bigMulTo(self2, num, out);\n      }\n      BN2.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n        return res;\n      };\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN2.prototype._countBits(N) - 1;\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n        return t;\n      };\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1)\n          return x;\n        var rb = 0;\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n        return rb;\n      };\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n        return 1 << i + 1 + odd;\n      };\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1)\n          return;\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 67108863;\n          if (w < 67108864) {\n            carry = 0;\n          } else {\n            carry = w / 67108864 | 0;\n          }\n        }\n        return ws;\n      };\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 8191;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 8191;\n          carry = carry >>> 13;\n        }\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~8191) === 0);\n      };\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n        return ph;\n      };\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out._strip();\n      };\n      BN2.prototype.mul = function mul(num) {\n        var out = new BN2(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      };\n      BN2.prototype.mulf = function mulf(num) {\n        var out = new BN2(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      };\n      BN2.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n      BN2.prototype.imuln = function imuln(num) {\n        var isNegNum = num < 0;\n        if (isNegNum)\n          num = -num;\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        var carry = 0;\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 67108863) + (carry & 67108863);\n          carry >>= 26;\n          carry += w / 67108864 | 0;\n          carry += lo >>> 26;\n          this.words[i] = lo & 67108863;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return isNegNum ? this.ineg() : this;\n      };\n      BN2.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      };\n      BN2.prototype.sqr = function sqr() {\n        return this.mul(this);\n      };\n      BN2.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      };\n      BN2.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0)\n          return new BN2(1);\n        var res = this;\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0)\n            break;\n        }\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0)\n              continue;\n            res = res.mul(q);\n          }\n        }\n        return res;\n      };\n      BN2.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 67108863 >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n          var carry = 0;\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n          this.length += s;\n        }\n        return this._strip();\n      };\n      BN2.prototype.ishln = function ishln(bits) {\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      };\n      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 67108863 ^ 67108863 >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n          maskedWords.length = s;\n        }\n        if (s === 0) {\n        } else if (this.length > s) {\n          this.length -= s;\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        var carry = 0;\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        }\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n        return this._strip();\n      };\n      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      };\n      BN2.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n      BN2.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      };\n      BN2.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n      BN2.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      };\n      BN2.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s)\n          return false;\n        var w = this.words[s];\n        return !!(w & q);\n      };\n      BN2.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n          return this;\n        }\n        if (r !== 0) {\n          s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n          var mask = 67108863 ^ 67108863 >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n        return this._strip();\n      };\n      BN2.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      };\n      BN2.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.isubn(-num);\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) <= num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        }\n        return this._iaddn(num);\n      };\n      BN2.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {\n          this.words[i] -= 67108864;\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      };\n      BN2.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 67108864);\n        if (num < 0)\n          return this.iaddn(-num);\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 67108864;\n            this.words[i + 1] -= 1;\n          }\n        }\n        return this._strip();\n      };\n      BN2.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n      BN2.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n      BN2.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n      BN2.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 67108863;\n          carry = (w >> 26) - (right / 67108864 | 0);\n          this.words[i + shift] = w & 67108863;\n        }\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 67108863;\n        }\n        if (carry === 0)\n          return this._strip();\n        assert(carry === -1);\n        carry = 0;\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 67108863;\n        }\n        this.negative = 1;\n        return this._strip();\n      };\n      BN2.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        }\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n          q = new BN2(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n          a = diff;\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);\n          qj = Math.min(qj / bhi | 0, 67108863);\n          a._ishlnsubmul(b, qj, j);\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n            a._ishlnsubmul(b, 1, j);\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n        if (q) {\n          q._strip();\n        }\n        a._strip();\n        if (mode !== \"div\" && shift !== 0) {\n          a.iushrn(shift);\n        }\n        return {\n          div: q || null,\n          mod: a\n        };\n      };\n      BN2.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n          return {\n            div: new BN2(0),\n            mod: new BN2(0)\n          };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n          return {\n            div,\n            mod\n          };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n          if (mode !== \"mod\") {\n            div = res.div.neg();\n          }\n          return {\n            div,\n            mod: res.mod\n          };\n        }\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n          if (mode !== \"div\") {\n            mod = res.mod.neg();\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n          return {\n            div: res.div,\n            mod\n          };\n        }\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN2(0),\n            mod: this\n          };\n        }\n        if (num.length === 1) {\n          if (mode === \"div\") {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n          if (mode === \"mod\") {\n            return {\n              div: null,\n              mod: new BN2(this.modrn(num.words[0]))\n            };\n          }\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN2(this.modrn(num.words[0]))\n          };\n        }\n        return this._wordDiv(num, mode);\n      };\n      BN2.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n      };\n      BN2.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n      };\n      BN2.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n      };\n      BN2.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        if (dm.mod.isZero())\n          return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        if (cmp < 0 || r2 === 1 && cmp === 0)\n          return dm.div;\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n      BN2.prototype.modrn = function modrn(num) {\n        var isNegNum = num < 0;\n        if (isNegNum)\n          num = -num;\n        assert(num <= 67108863);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return isNegNum ? -acc : acc;\n      };\n      BN2.prototype.modn = function modn(num) {\n        return this.modrn(num);\n      };\n      BN2.prototype.idivn = function idivn(num) {\n        var isNegNum = num < 0;\n        if (isNegNum)\n          num = -num;\n        assert(num <= 67108863);\n        var carry = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 67108864;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n        this._strip();\n        return isNegNum ? this.ineg() : this;\n      };\n      BN2.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n      BN2.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        }\n        var A = new BN2(1);\n        var B = new BN2(0);\n        var C = new BN2(0);\n        var D = new BN2(1);\n        var g = 0;\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            x.iushrn(i);\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            y.iushrn(j);\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      };\n      BN2.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n        var x1 = new BN2(1);\n        var x2 = new BN2(0);\n        var delta = b.clone();\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)\n            ;\n          if (i > 0) {\n            a.iushrn(i);\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n              x1.iushrn(1);\n            }\n          }\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)\n            ;\n          if (j > 0) {\n            b.iushrn(j);\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n              x2.iushrn(1);\n            }\n          }\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n        return res;\n      };\n      BN2.prototype.gcd = function gcd(num) {\n        if (this.isZero())\n          return num.abs();\n        if (num.isZero())\n          return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n          var r = a.cmp(b);\n          if (r < 0) {\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n          a.isub(b);\n        } while (true);\n        return b.iushln(shift);\n      };\n      BN2.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n      BN2.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n      BN2.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      };\n      BN2.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      };\n      BN2.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        if (this.length <= s) {\n          this._expand(s + 1);\n          this.words[s] |= q;\n          return this;\n        }\n        var carry = q;\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 67108863;\n          this.words[i] = w;\n        }\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n        return this;\n      };\n      BN2.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n      BN2.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative)\n          return -1;\n        if (this.negative === 0 && negative)\n          return 1;\n        this._strip();\n        var res;\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n          assert(num <= 67108863, \"Number is too big\");\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN2.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0)\n          return -1;\n        if (this.negative === 0 && num.negative !== 0)\n          return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0)\n          return -res | 0;\n        return res;\n      };\n      BN2.prototype.ucmp = function ucmp(num) {\n        if (this.length > num.length)\n          return 1;\n        if (this.length < num.length)\n          return -1;\n        var res = 0;\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b)\n            continue;\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n          break;\n        }\n        return res;\n      };\n      BN2.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n      BN2.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n      BN2.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n      BN2.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n      BN2.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n      BN2.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n      BN2.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n      BN2.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n      BN2.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n      BN2.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      };\n      BN2.red = function red(num) {\n        return new Red(num);\n      };\n      BN2.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n      BN2.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n      };\n      BN2.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n      BN2.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n      };\n      BN2.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n      };\n      BN2.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n      };\n      BN2.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n      };\n      BN2.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n      };\n      BN2.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n      };\n      BN2.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n      };\n      BN2.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n      };\n      BN2.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n      };\n      BN2.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n      };\n      BN2.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n      };\n      BN2.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n      };\n      BN2.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n      };\n      BN2.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n      };\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function MPrime(name, p) {\n        this.name = name;\n        this.p = new BN2(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN2(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN2(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n      MPrime.prototype.ireduce = function ireduce(num) {\n        var r = num;\n        var rlen;\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== void 0) {\n            r.strip();\n          } else {\n            r._strip();\n          }\n        }\n        return r;\n      };\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n      function K256() {\n        MPrime.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      inherits(K256, MPrime);\n      K256.prototype.split = function split(input, output) {\n        var mask = 4194303;\n        var outLen = Math.min(input.length, 9);\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        }\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n      K256.prototype.imulK = function imulK(num) {\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        var lo = 0;\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 977;\n          num.words[i] = lo & 67108863;\n          lo = w * 64 + (lo / 67108864 | 0);\n        }\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n        return num;\n      };\n      function P224() {\n        MPrime.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      inherits(P224, MPrime);\n      function P192() {\n        MPrime.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      inherits(P192, MPrime);\n      function P25519() {\n        MPrime.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      inherits(P25519, MPrime);\n      P25519.prototype.imulK = function imulK(num) {\n        var carry = 0;\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 19 + carry;\n          var lo = hi & 67108863;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n        return num;\n      };\n      BN2._prime = function prime(name) {\n        if (primes[name])\n          return primes[name];\n        var prime2;\n        if (name === \"k256\") {\n          prime2 = new K256();\n        } else if (name === \"p224\") {\n          prime2 = new P224();\n        } else if (name === \"p192\") {\n          prime2 = new P192();\n        } else if (name === \"p25519\") {\n          prime2 = new P25519();\n        } else {\n          throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime2;\n        return prime2;\n      };\n      function Red(m) {\n        if (typeof m === \"string\") {\n          var prime = BN2._prime(m);\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), \"modulus must be greater than 1\");\n          this.m = m;\n          this.prime = null;\n        }\n      }\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n      };\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(\n          a.red && a.red === b.red,\n          \"red works only with red numbers\"\n        );\n      };\n      Red.prototype.imod = function imod(a) {\n        if (this.prime)\n          return this.prime.ireduce(a)._forceRed(this);\n        move(a, a.umod(this.m)._forceRed(this));\n        return a;\n      };\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n      };\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n        return res;\n      };\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n        return res;\n      };\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n      };\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n      };\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n      };\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero())\n          return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN2(1)).iushrn(2);\n          return this.pow(a, pow);\n        }\n        var q = this.m.subn(1);\n        var s = 0;\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN2(1).toRed(this);\n        var nOne = one.redNeg();\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN2(2 * z * z).toRed(this);\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n          assert(i < m);\n          var b = this.pow(c, new BN2(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n        return r;\n      };\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero())\n          return new BN2(1).toRed(this);\n        if (num.cmpn(1) === 0)\n          return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN2(1).toRed(this);\n        wnd[1] = a;\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n          start = 26;\n        }\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0))\n              continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n          start = 26;\n        }\n        return res;\n      };\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      };\n      BN2.mont = function mont(num) {\n        return new Mont(num);\n      };\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN2(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n      inherits(Mont, Red);\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero())\n          return new BN2(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n      };\n      Mont.prototype.invm = function invm(a) {\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })(typeof module2 === \"undefined\" || module2, exports);\n  }\n});\n\n// ../../node_modules/js-sha3/src/sha3.js\nvar require_sha3 = __commonJS({\n  \"../../node_modules/js-sha3/src/sha3.js\"(exports, module2) {\n    \"use strict\";\n    (function() {\n      \"use strict\";\n      var INPUT_ERROR = \"input is invalid type\";\n      var FINALIZE_ERROR = \"finalize already called\";\n      var WINDOW = typeof window === \"object\";\n      var root = WINDOW ? window : {};\n      if (root.JS_SHA3_NO_WINDOW) {\n        WINDOW = false;\n      }\n      var WEB_WORKER = !WINDOW && typeof self === \"object\";\n      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === \"object\" && process.versions && process.versions.node;\n      if (NODE_JS) {\n        root = global;\n      } else if (WEB_WORKER) {\n        root = self;\n      }\n      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module2 === \"object\" && module2.exports;\n      var AMD =  true && __webpack_require__.amdO;\n      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== \"undefined\";\n      var HEX_CHARS = \"0123456789abcdef\".split(\"\");\n      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n      var KECCAK_PADDING = [1, 256, 65536, 16777216];\n      var PADDING = [6, 1536, 393216, 100663296];\n      var SHIFT = [0, 8, 16, 24];\n      var RC = [\n        1,\n        0,\n        32898,\n        0,\n        32906,\n        2147483648,\n        2147516416,\n        2147483648,\n        32907,\n        0,\n        2147483649,\n        0,\n        2147516545,\n        2147483648,\n        32777,\n        2147483648,\n        138,\n        0,\n        136,\n        0,\n        2147516425,\n        0,\n        2147483658,\n        0,\n        2147516555,\n        0,\n        139,\n        2147483648,\n        32905,\n        2147483648,\n        32771,\n        2147483648,\n        32770,\n        2147483648,\n        128,\n        2147483648,\n        32778,\n        0,\n        2147483658,\n        2147483648,\n        2147516545,\n        2147483648,\n        32896,\n        2147483648,\n        2147483649,\n        0,\n        2147516424,\n        2147483648\n      ];\n      var BITS = [224, 256, 384, 512];\n      var SHAKE_BITS = [128, 256];\n      var OUTPUT_TYPES = [\"hex\", \"buffer\", \"arrayBuffer\", \"array\", \"digest\"];\n      var CSHAKE_BYTEPAD = {\n        \"128\": 168,\n        \"256\": 136\n      };\n      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n        Array.isArray = function(obj) {\n          return Object.prototype.toString.call(obj) === \"[object Array]\";\n        };\n      }\n      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n        ArrayBuffer.isView = function(obj) {\n          return typeof obj === \"object\" && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n        };\n      }\n      var createOutputMethod = function(bits2, padding, outputType) {\n        return function(message) {\n          return new Keccak(bits2, padding, bits2).update(message)[outputType]();\n        };\n      };\n      var createShakeOutputMethod = function(bits2, padding, outputType) {\n        return function(message, outputBits) {\n          return new Keccak(bits2, padding, outputBits).update(message)[outputType]();\n        };\n      };\n      var createCshakeOutputMethod = function(bits2, padding, outputType) {\n        return function(message, outputBits, n, s) {\n          return methods[\"cshake\" + bits2].update(message, outputBits, n, s)[outputType]();\n        };\n      };\n      var createKmacOutputMethod = function(bits2, padding, outputType) {\n        return function(key, message, outputBits, s) {\n          return methods[\"kmac\" + bits2].update(key, message, outputBits, s)[outputType]();\n        };\n      };\n      var createOutputMethods = function(method, createMethod2, bits2, padding) {\n        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {\n          var type = OUTPUT_TYPES[i2];\n          method[type] = createMethod2(bits2, padding, type);\n        }\n        return method;\n      };\n      var createMethod = function(bits2, padding) {\n        var method = createOutputMethod(bits2, padding, \"hex\");\n        method.create = function() {\n          return new Keccak(bits2, padding, bits2);\n        };\n        method.update = function(message) {\n          return method.create().update(message);\n        };\n        return createOutputMethods(method, createOutputMethod, bits2, padding);\n      };\n      var createShakeMethod = function(bits2, padding) {\n        var method = createShakeOutputMethod(bits2, padding, \"hex\");\n        method.create = function(outputBits) {\n          return new Keccak(bits2, padding, outputBits);\n        };\n        method.update = function(message, outputBits) {\n          return method.create(outputBits).update(message);\n        };\n        return createOutputMethods(method, createShakeOutputMethod, bits2, padding);\n      };\n      var createCshakeMethod = function(bits2, padding) {\n        var w = CSHAKE_BYTEPAD[bits2];\n        var method = createCshakeOutputMethod(bits2, padding, \"hex\");\n        method.create = function(outputBits, n, s) {\n          if (!n && !s) {\n            return methods[\"shake\" + bits2].create(outputBits);\n          } else {\n            return new Keccak(bits2, padding, outputBits).bytepad([n, s], w);\n          }\n        };\n        method.update = function(message, outputBits, n, s) {\n          return method.create(outputBits, n, s).update(message);\n        };\n        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding);\n      };\n      var createKmacMethod = function(bits2, padding) {\n        var w = CSHAKE_BYTEPAD[bits2];\n        var method = createKmacOutputMethod(bits2, padding, \"hex\");\n        method.create = function(key, outputBits, s) {\n          return new Kmac(bits2, padding, outputBits).bytepad([\"KMAC\", s], w).bytepad([key], w);\n        };\n        method.update = function(key, message, outputBits, s) {\n          return method.create(key, outputBits, s).update(message);\n        };\n        return createOutputMethods(method, createKmacOutputMethod, bits2, padding);\n      };\n      var algorithms = [\n        { name: \"keccak\", padding: KECCAK_PADDING, bits: BITS, createMethod },\n        { name: \"sha3\", padding: PADDING, bits: BITS, createMethod },\n        { name: \"shake\", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n        { name: \"cshake\", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n        { name: \"kmac\", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n      ];\n      var methods = {}, methodNames = [];\n      for (var i = 0; i < algorithms.length; ++i) {\n        var algorithm = algorithms[i];\n        var bits = algorithm.bits;\n        for (var j = 0; j < bits.length; ++j) {\n          var methodName = algorithm.name + \"_\" + bits[j];\n          methodNames.push(methodName);\n          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n          if (algorithm.name !== \"sha3\") {\n            var newMethodName = algorithm.name + bits[j];\n            methodNames.push(newMethodName);\n            methods[newMethodName] = methods[methodName];\n          }\n        }\n      }\n      function Keccak(bits2, padding, outputBits) {\n        this.blocks = [];\n        this.s = [];\n        this.padding = padding;\n        this.outputBits = outputBits;\n        this.reset = true;\n        this.finalized = false;\n        this.block = 0;\n        this.start = 0;\n        this.blockCount = 1600 - (bits2 << 1) >> 5;\n        this.byteCount = this.blockCount << 2;\n        this.outputBlocks = outputBits >> 5;\n        this.extraBytes = (outputBits & 31) >> 3;\n        for (var i2 = 0; i2 < 50; ++i2) {\n          this.s[i2] = 0;\n        }\n      }\n      Keccak.prototype.update = function(message) {\n        if (this.finalized) {\n          throw new Error(FINALIZE_ERROR);\n        }\n        var notString, type = typeof message;\n        if (type !== \"string\") {\n          if (type === \"object\") {\n            if (message === null) {\n              throw new Error(INPUT_ERROR);\n            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n              message = new Uint8Array(message);\n            } else if (!Array.isArray(message)) {\n              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n                throw new Error(INPUT_ERROR);\n              }\n            }\n          } else {\n            throw new Error(INPUT_ERROR);\n          }\n          notString = true;\n        }\n        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;\n        while (index < length) {\n          if (this.reset) {\n            this.reset = false;\n            blocks[0] = this.block;\n            for (i2 = 1; i2 < blockCount + 1; ++i2) {\n              blocks[i2] = 0;\n            }\n          }\n          if (notString) {\n            for (i2 = this.start; index < length && i2 < byteCount; ++index) {\n              blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];\n            }\n          } else {\n            for (i2 = this.start; index < length && i2 < byteCount; ++index) {\n              code = message.charCodeAt(index);\n              if (code < 128) {\n                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];\n              } else if (code < 2048) {\n                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];\n                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];\n              } else if (code < 55296 || code >= 57344) {\n                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];\n                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];\n                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];\n              } else {\n                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);\n                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];\n                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];\n                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];\n                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];\n              }\n            }\n          }\n          this.lastByteIndex = i2;\n          if (i2 >= byteCount) {\n            this.start = i2 - byteCount;\n            this.block = blocks[blockCount];\n            for (i2 = 0; i2 < blockCount; ++i2) {\n              s[i2] ^= blocks[i2];\n            }\n            f(s);\n            this.reset = true;\n          } else {\n            this.start = i2;\n          }\n        }\n        return this;\n      };\n      Keccak.prototype.encode = function(x, right) {\n        var o = x & 255, n = 1;\n        var bytes = [o];\n        x = x >> 8;\n        o = x & 255;\n        while (o > 0) {\n          bytes.unshift(o);\n          x = x >> 8;\n          o = x & 255;\n          ++n;\n        }\n        if (right) {\n          bytes.push(n);\n        } else {\n          bytes.unshift(n);\n        }\n        this.update(bytes);\n        return bytes.length;\n      };\n      Keccak.prototype.encodeString = function(str) {\n        var notString, type = typeof str;\n        if (type !== \"string\") {\n          if (type === \"object\") {\n            if (str === null) {\n              throw new Error(INPUT_ERROR);\n            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n              str = new Uint8Array(str);\n            } else if (!Array.isArray(str)) {\n              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n                throw new Error(INPUT_ERROR);\n              }\n            }\n          } else {\n            throw new Error(INPUT_ERROR);\n          }\n          notString = true;\n        }\n        var bytes = 0, length = str.length;\n        if (notString) {\n          bytes = length;\n        } else {\n          for (var i2 = 0; i2 < str.length; ++i2) {\n            var code = str.charCodeAt(i2);\n            if (code < 128) {\n              bytes += 1;\n            } else if (code < 2048) {\n              bytes += 2;\n            } else if (code < 55296 || code >= 57344) {\n              bytes += 3;\n            } else {\n              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);\n              bytes += 4;\n            }\n          }\n        }\n        bytes += this.encode(bytes * 8);\n        this.update(str);\n        return bytes;\n      };\n      Keccak.prototype.bytepad = function(strs, w) {\n        var bytes = this.encode(w);\n        for (var i2 = 0; i2 < strs.length; ++i2) {\n          bytes += this.encodeString(strs[i2]);\n        }\n        var paddingBytes = w - bytes % w;\n        var zeros = [];\n        zeros.length = paddingBytes;\n        this.update(zeros);\n        return this;\n      };\n      Keccak.prototype.finalize = function() {\n        if (this.finalized) {\n          return;\n        }\n        this.finalized = true;\n        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n        blocks[i2 >> 2] |= this.padding[i2 & 3];\n        if (this.lastByteIndex === this.byteCount) {\n          blocks[0] = blocks[blockCount];\n          for (i2 = 1; i2 < blockCount + 1; ++i2) {\n            blocks[i2] = 0;\n          }\n        }\n        blocks[blockCount - 1] |= 2147483648;\n        for (i2 = 0; i2 < blockCount; ++i2) {\n          s[i2] ^= blocks[i2];\n        }\n        f(s);\n      };\n      Keccak.prototype.toString = Keccak.prototype.hex = function() {\n        this.finalize();\n        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;\n        var hex = \"\", block;\n        while (j2 < outputBlocks) {\n          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {\n            block = s[i2];\n            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];\n          }\n          if (j2 % blockCount === 0) {\n            f(s);\n            i2 = 0;\n          }\n        }\n        if (extraBytes) {\n          block = s[i2];\n          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];\n          if (extraBytes > 1) {\n            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];\n          }\n          if (extraBytes > 2) {\n            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];\n          }\n        }\n        return hex;\n      };\n      Keccak.prototype.arrayBuffer = function() {\n        this.finalize();\n        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;\n        var bytes = this.outputBits >> 3;\n        var buffer;\n        if (extraBytes) {\n          buffer = new ArrayBuffer(outputBlocks + 1 << 2);\n        } else {\n          buffer = new ArrayBuffer(bytes);\n        }\n        var array = new Uint32Array(buffer);\n        while (j2 < outputBlocks) {\n          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {\n            array[j2] = s[i2];\n          }\n          if (j2 % blockCount === 0) {\n            f(s);\n          }\n        }\n        if (extraBytes) {\n          array[i2] = s[i2];\n          buffer = buffer.slice(0, bytes);\n        }\n        return buffer;\n      };\n      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n      Keccak.prototype.digest = Keccak.prototype.array = function() {\n        this.finalize();\n        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;\n        var array = [], offset, block;\n        while (j2 < outputBlocks) {\n          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {\n            offset = j2 << 2;\n            block = s[i2];\n            array[offset] = block & 255;\n            array[offset + 1] = block >> 8 & 255;\n            array[offset + 2] = block >> 16 & 255;\n            array[offset + 3] = block >> 24 & 255;\n          }\n          if (j2 % blockCount === 0) {\n            f(s);\n          }\n        }\n        if (extraBytes) {\n          offset = j2 << 2;\n          block = s[i2];\n          array[offset] = block & 255;\n          if (extraBytes > 1) {\n            array[offset + 1] = block >> 8 & 255;\n          }\n          if (extraBytes > 2) {\n            array[offset + 2] = block >> 16 & 255;\n          }\n        }\n        return array;\n      };\n      function Kmac(bits2, padding, outputBits) {\n        Keccak.call(this, bits2, padding, outputBits);\n      }\n      Kmac.prototype = new Keccak();\n      Kmac.prototype.finalize = function() {\n        this.encode(this.outputBits, true);\n        return Keccak.prototype.finalize.call(this);\n      };\n      var f = function(s) {\n        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n        for (n = 0; n < 48; n += 2) {\n          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n          h = c8 ^ (c2 << 1 | c3 >>> 31);\n          l = c9 ^ (c3 << 1 | c2 >>> 31);\n          s[0] ^= h;\n          s[1] ^= l;\n          s[10] ^= h;\n          s[11] ^= l;\n          s[20] ^= h;\n          s[21] ^= l;\n          s[30] ^= h;\n          s[31] ^= l;\n          s[40] ^= h;\n          s[41] ^= l;\n          h = c0 ^ (c4 << 1 | c5 >>> 31);\n          l = c1 ^ (c5 << 1 | c4 >>> 31);\n          s[2] ^= h;\n          s[3] ^= l;\n          s[12] ^= h;\n          s[13] ^= l;\n          s[22] ^= h;\n          s[23] ^= l;\n          s[32] ^= h;\n          s[33] ^= l;\n          s[42] ^= h;\n          s[43] ^= l;\n          h = c2 ^ (c6 << 1 | c7 >>> 31);\n          l = c3 ^ (c7 << 1 | c6 >>> 31);\n          s[4] ^= h;\n          s[5] ^= l;\n          s[14] ^= h;\n          s[15] ^= l;\n          s[24] ^= h;\n          s[25] ^= l;\n          s[34] ^= h;\n          s[35] ^= l;\n          s[44] ^= h;\n          s[45] ^= l;\n          h = c4 ^ (c8 << 1 | c9 >>> 31);\n          l = c5 ^ (c9 << 1 | c8 >>> 31);\n          s[6] ^= h;\n          s[7] ^= l;\n          s[16] ^= h;\n          s[17] ^= l;\n          s[26] ^= h;\n          s[27] ^= l;\n          s[36] ^= h;\n          s[37] ^= l;\n          s[46] ^= h;\n          s[47] ^= l;\n          h = c6 ^ (c0 << 1 | c1 >>> 31);\n          l = c7 ^ (c1 << 1 | c0 >>> 31);\n          s[8] ^= h;\n          s[9] ^= l;\n          s[18] ^= h;\n          s[19] ^= l;\n          s[28] ^= h;\n          s[29] ^= l;\n          s[38] ^= h;\n          s[39] ^= l;\n          s[48] ^= h;\n          s[49] ^= l;\n          b0 = s[0];\n          b1 = s[1];\n          b32 = s[11] << 4 | s[10] >>> 28;\n          b33 = s[10] << 4 | s[11] >>> 28;\n          b14 = s[20] << 3 | s[21] >>> 29;\n          b15 = s[21] << 3 | s[20] >>> 29;\n          b46 = s[31] << 9 | s[30] >>> 23;\n          b47 = s[30] << 9 | s[31] >>> 23;\n          b28 = s[40] << 18 | s[41] >>> 14;\n          b29 = s[41] << 18 | s[40] >>> 14;\n          b20 = s[2] << 1 | s[3] >>> 31;\n          b21 = s[3] << 1 | s[2] >>> 31;\n          b2 = s[13] << 12 | s[12] >>> 20;\n          b3 = s[12] << 12 | s[13] >>> 20;\n          b34 = s[22] << 10 | s[23] >>> 22;\n          b35 = s[23] << 10 | s[22] >>> 22;\n          b16 = s[33] << 13 | s[32] >>> 19;\n          b17 = s[32] << 13 | s[33] >>> 19;\n          b48 = s[42] << 2 | s[43] >>> 30;\n          b49 = s[43] << 2 | s[42] >>> 30;\n          b40 = s[5] << 30 | s[4] >>> 2;\n          b41 = s[4] << 30 | s[5] >>> 2;\n          b22 = s[14] << 6 | s[15] >>> 26;\n          b23 = s[15] << 6 | s[14] >>> 26;\n          b4 = s[25] << 11 | s[24] >>> 21;\n          b5 = s[24] << 11 | s[25] >>> 21;\n          b36 = s[34] << 15 | s[35] >>> 17;\n          b37 = s[35] << 15 | s[34] >>> 17;\n          b18 = s[45] << 29 | s[44] >>> 3;\n          b19 = s[44] << 29 | s[45] >>> 3;\n          b10 = s[6] << 28 | s[7] >>> 4;\n          b11 = s[7] << 28 | s[6] >>> 4;\n          b42 = s[17] << 23 | s[16] >>> 9;\n          b43 = s[16] << 23 | s[17] >>> 9;\n          b24 = s[26] << 25 | s[27] >>> 7;\n          b25 = s[27] << 25 | s[26] >>> 7;\n          b6 = s[36] << 21 | s[37] >>> 11;\n          b7 = s[37] << 21 | s[36] >>> 11;\n          b38 = s[47] << 24 | s[46] >>> 8;\n          b39 = s[46] << 24 | s[47] >>> 8;\n          b30 = s[8] << 27 | s[9] >>> 5;\n          b31 = s[9] << 27 | s[8] >>> 5;\n          b12 = s[18] << 20 | s[19] >>> 12;\n          b13 = s[19] << 20 | s[18] >>> 12;\n          b44 = s[29] << 7 | s[28] >>> 25;\n          b45 = s[28] << 7 | s[29] >>> 25;\n          b26 = s[38] << 8 | s[39] >>> 24;\n          b27 = s[39] << 8 | s[38] >>> 24;\n          b8 = s[48] << 14 | s[49] >>> 18;\n          b9 = s[49] << 14 | s[48] >>> 18;\n          s[0] = b0 ^ ~b2 & b4;\n          s[1] = b1 ^ ~b3 & b5;\n          s[10] = b10 ^ ~b12 & b14;\n          s[11] = b11 ^ ~b13 & b15;\n          s[20] = b20 ^ ~b22 & b24;\n          s[21] = b21 ^ ~b23 & b25;\n          s[30] = b30 ^ ~b32 & b34;\n          s[31] = b31 ^ ~b33 & b35;\n          s[40] = b40 ^ ~b42 & b44;\n          s[41] = b41 ^ ~b43 & b45;\n          s[2] = b2 ^ ~b4 & b6;\n          s[3] = b3 ^ ~b5 & b7;\n          s[12] = b12 ^ ~b14 & b16;\n          s[13] = b13 ^ ~b15 & b17;\n          s[22] = b22 ^ ~b24 & b26;\n          s[23] = b23 ^ ~b25 & b27;\n          s[32] = b32 ^ ~b34 & b36;\n          s[33] = b33 ^ ~b35 & b37;\n          s[42] = b42 ^ ~b44 & b46;\n          s[43] = b43 ^ ~b45 & b47;\n          s[4] = b4 ^ ~b6 & b8;\n          s[5] = b5 ^ ~b7 & b9;\n          s[14] = b14 ^ ~b16 & b18;\n          s[15] = b15 ^ ~b17 & b19;\n          s[24] = b24 ^ ~b26 & b28;\n          s[25] = b25 ^ ~b27 & b29;\n          s[34] = b34 ^ ~b36 & b38;\n          s[35] = b35 ^ ~b37 & b39;\n          s[44] = b44 ^ ~b46 & b48;\n          s[45] = b45 ^ ~b47 & b49;\n          s[6] = b6 ^ ~b8 & b0;\n          s[7] = b7 ^ ~b9 & b1;\n          s[16] = b16 ^ ~b18 & b10;\n          s[17] = b17 ^ ~b19 & b11;\n          s[26] = b26 ^ ~b28 & b20;\n          s[27] = b27 ^ ~b29 & b21;\n          s[36] = b36 ^ ~b38 & b30;\n          s[37] = b37 ^ ~b39 & b31;\n          s[46] = b46 ^ ~b48 & b40;\n          s[47] = b47 ^ ~b49 & b41;\n          s[8] = b8 ^ ~b0 & b2;\n          s[9] = b9 ^ ~b1 & b3;\n          s[18] = b18 ^ ~b10 & b12;\n          s[19] = b19 ^ ~b11 & b13;\n          s[28] = b28 ^ ~b20 & b22;\n          s[29] = b29 ^ ~b21 & b23;\n          s[38] = b38 ^ ~b30 & b32;\n          s[39] = b39 ^ ~b31 & b33;\n          s[48] = b48 ^ ~b40 & b42;\n          s[49] = b49 ^ ~b41 & b43;\n          s[0] ^= RC[n];\n          s[1] ^= RC[n + 1];\n        }\n      };\n      if (COMMON_JS) {\n        module2.exports = methods;\n      } else {\n        for (i = 0; i < methodNames.length; ++i) {\n          root[methodNames[i]] = methods[methodNames[i]];\n        }\n        if (AMD) {\n          !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return methods;\n          }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        }\n      }\n    })();\n  }\n});\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  AnonAadhaarCore: () => AnonAadhaarCore,\n  AnonAadhaarCorePackage: () => AnonAadhaarCorePackage,\n  AnonAadhaarTypeName: () => AnonAadhaarTypeName,\n  ArtifactsOrigin: () => ArtifactsOrigin,\n  CIRCOM_FIELD_P: () => CIRCOM_FIELD_P,\n  IdFields: () => IdFields,\n  ProverState: () => ProverState,\n  artifactUrls: () => artifactUrls,\n  compressByteArray: () => compressByteArray,\n  convertBigIntToByteArray: () => convertBigIntToByteArray,\n  convertByteArrayToBigInt: () => convertByteArrayToBigInt,\n  convertRevealBigIntToString: () => convertRevealBigIntToString,\n  createCustomV2TestData: () => createCustomV2TestData,\n  dateToUnixTimestamp: () => dateToUnixTimestamp,\n  decompressByteArray: () => decompressByteArray,\n  deserialize: () => deserialize,\n  extractFieldByIndex: () => extractFieldByIndex,\n  extractPhoto: () => extractPhoto,\n  fetchPublicKey: () => fetchPublicKey,\n  fieldsLabel: () => fieldsLabel,\n  generateArgs: () => generateArgs,\n  getDisplayOptions: () => getDisplayOptions,\n  getEndIndex: () => getEndIndex,\n  getRandomBytes: () => getRandomBytes,\n  handleError: () => handleError,\n  hash: () => hash,\n  init: () => init,\n  packGroth16Proof: () => packGroth16Proof,\n  productionPublicKeyHash: () => productionPublicKeyHash,\n  prove: () => prove,\n  rawDataToCompressedQR: () => rawDataToCompressedQR,\n  readData: () => readData,\n  replaceBytesBetween: () => replaceBytesBetween,\n  retrieveFileExtension: () => retrieveFileExtension,\n  returnFullId: () => returnFullId,\n  returnNewDateString: () => returnNewDateString,\n  searchZkeyChunks: () => searchZkeyChunks,\n  serialize: () => serialize,\n  splitToWords: () => splitToWords,\n  testCertificateUrl: () => testCertificateUrl,\n  testPublicKeyHash: () => testPublicKeyHash,\n  timestampToUTCUnix: () => timestampToUTCUnix,\n  verify: () => verify\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/types.ts\nvar AnonAadhaarTypeName = \"anon-aadhaar\";\nvar ArtifactsOrigin = /* @__PURE__ */ ((ArtifactsOrigin2) => {\n  ArtifactsOrigin2[ArtifactsOrigin2[\"server\"] = 0] = \"server\";\n  ArtifactsOrigin2[ArtifactsOrigin2[\"local\"] = 1] = \"local\";\n  ArtifactsOrigin2[ArtifactsOrigin2[\"chunked\"] = 2] = \"chunked\";\n  return ArtifactsOrigin2;\n})(ArtifactsOrigin || {});\nvar ProverState = /* @__PURE__ */ ((ProverState3) => {\n  ProverState3[\"Initializing\"] = \"initializing\";\n  ProverState3[\"FetchingWasm\"] = \"fetching-wasm\";\n  ProverState3[\"FetchingZkey\"] = \"fetching-zkey\";\n  ProverState3[\"Proving\"] = \"proving\";\n  ProverState3[\"Completed\"] = \"completed\";\n  ProverState3[\"Error\"] = \"error\";\n  return ProverState3;\n})(ProverState || {});\nvar fieldsLabel = [\n  { key: \"revealAgeAbove18\", label: \"Age Above 18\" },\n  { key: \"revealGender\", label: \"Gender\" },\n  { key: \"revealPinCode\", label: \"PIN Code\" },\n  { key: \"revealState\", label: \"State\" }\n];\n\n// src/core.ts\nvar import_uuid = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/index.js\");\nvar import_snarkjs2 = __webpack_require__(/*! snarkjs */ \"(ssr)/./node_modules/snarkjs/build/main.cjs\");\nvar import_json_bigint = __toESM(__webpack_require__(/*! json-bigint */ \"(ssr)/./node_modules/json-bigint/index.js\"));\n\n// src/prover.ts\nvar import_snarkjs = __webpack_require__(/*! snarkjs */ \"(ssr)/./node_modules/snarkjs/build/main.cjs\");\n\n// src/storage.ts\nvar import_localforage = __toESM(__webpack_require__(/*! localforage */ \"(ssr)/./node_modules/localforage/dist/localforage.js\"));\nvar storageService = {\n  setItem(key, value) {\n    return __async(this, null, function* () {\n      return yield import_localforage.default.setItem(key, value);\n    });\n  },\n  getItem(key) {\n    return __async(this, null, function* () {\n      return yield import_localforage.default.getItem(key);\n    });\n  }\n};\n\n// src/utils.ts\nvar import_pako = __toESM(__webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/index.js\"));\nvar handleError = (error, defaultMessage) => {\n  if (error instanceof Error)\n    return error;\n  let stringified = defaultMessage;\n  try {\n    stringified = JSON.stringify(error);\n  } catch (e) {\n  }\n  const err = new Error(\n    `This value was thrown as is, not through an Error: ${stringified}`\n  );\n  return err;\n};\nfunction splitToWords(number, wordsize, numberElement) {\n  let t = number;\n  const words = [];\n  for (let i = BigInt(0); i < numberElement; ++i) {\n    const baseTwo = BigInt(2);\n    words.push(`${t % BigInt(Math.pow(Number(baseTwo), Number(wordsize)))}`);\n    t = BigInt(t / BigInt(Math.pow(Number(BigInt(2)), Number(wordsize))));\n  }\n  if (!(t == BigInt(0))) {\n    throw `Number ${number} does not fit in ${(wordsize * numberElement).toString()} bits`;\n  }\n  return words;\n}\nfunction packGroth16Proof(groth16Proof) {\n  return [\n    groth16Proof.pi_a[0],\n    groth16Proof.pi_a[1],\n    groth16Proof.pi_b[0][1],\n    groth16Proof.pi_b[0][0],\n    groth16Proof.pi_b[1][1],\n    groth16Proof.pi_b[1][0],\n    groth16Proof.pi_c[0],\n    groth16Proof.pi_c[1]\n  ];\n}\nvar fetchPublicKey = (certUrl) => __async(void 0, null, function* () {\n  try {\n    const response = yield fetch(\n      `https://nodejs-serverless-function-express-eight-iota.vercel.app/api/get-public-key?url=${certUrl}`\n    );\n    if (!response.ok) {\n      throw new Error(`Failed to fetch public key from server`);\n    }\n    const publicKeyData = yield response.json();\n    return publicKeyData.publicKey || null;\n  } catch (error) {\n    console.error(\"Error fetching public key:\", error);\n    return null;\n  }\n});\nfunction convertBigIntToByteArray(bigInt) {\n  const byteLength = Math.max(1, Math.ceil(bigInt.toString(2).length / 8));\n  const result = new Uint8Array(byteLength);\n  let i = 0;\n  while (bigInt > 0) {\n    result[i] = Number(bigInt % BigInt(256));\n    bigInt = bigInt / BigInt(256);\n    i += 1;\n  }\n  return result.reverse();\n}\nfunction convertRevealBigIntToString(input) {\n  if (typeof input === \"string\")\n    input = BigInt(input);\n  let result = \"\";\n  while (input > 0) {\n    result += String.fromCharCode(Number(input % BigInt(256)));\n    input = input / BigInt(256);\n  }\n  return result;\n}\nfunction decompressByteArray(byteArray) {\n  const decompressedArray = import_pako.default.inflate(byteArray);\n  return decompressedArray;\n}\nvar IdFields = /* @__PURE__ */ ((IdFields2) => {\n  IdFields2[IdFields2[\"Email_mobile_present_bit_indicator_value\"] = 0] = \"Email_mobile_present_bit_indicator_value\";\n  IdFields2[IdFields2[\"ReferenceId\"] = 1] = \"ReferenceId\";\n  IdFields2[IdFields2[\"Name\"] = 2] = \"Name\";\n  IdFields2[IdFields2[\"DOB\"] = 3] = \"DOB\";\n  IdFields2[IdFields2[\"Gender\"] = 4] = \"Gender\";\n  IdFields2[IdFields2[\"CareOf\"] = 5] = \"CareOf\";\n  IdFields2[IdFields2[\"District\"] = 6] = \"District\";\n  IdFields2[IdFields2[\"Landmark\"] = 7] = \"Landmark\";\n  IdFields2[IdFields2[\"House\"] = 8] = \"House\";\n  IdFields2[IdFields2[\"Location\"] = 9] = \"Location\";\n  IdFields2[IdFields2[\"PinCode\"] = 10] = \"PinCode\";\n  IdFields2[IdFields2[\"PostOffice\"] = 11] = \"PostOffice\";\n  IdFields2[IdFields2[\"State\"] = 12] = \"State\";\n  IdFields2[IdFields2[\"Street\"] = 13] = \"Street\";\n  IdFields2[IdFields2[\"SubDistrict\"] = 14] = \"SubDistrict\";\n  IdFields2[IdFields2[\"VTC\"] = 15] = \"VTC\";\n  IdFields2[IdFields2[\"PhoneNumberLast4\"] = 16] = \"PhoneNumberLast4\";\n  return IdFields2;\n})(IdFields || {});\nfunction readData(data, index) {\n  let count = 0;\n  let start = 0;\n  let end = data.indexOf(255, start);\n  while (count != index) {\n    start = end + 1;\n    end = data.indexOf(255, start);\n    count++;\n  }\n  return data.slice(start, end);\n}\nfunction extractPhoto(qrDataPadded, dataLength) {\n  let begin = 0;\n  for (let i = 0; i < 18; ++i) {\n    begin = qrDataPadded.indexOf(255, begin + 1);\n  }\n  return {\n    begin,\n    dataLength,\n    bytes: qrDataPadded.slice(begin + 1, dataLength)\n  };\n}\nvar searchZkeyChunks = (_0, ..._1) => __async(void 0, [_0, ..._1], function* (zkeyPath, storageService2 = storageService) {\n  const filePromises = [];\n  for (let i = 0; i < 10; i++) {\n    const fileName = `circuit_final_${i}.zkey`;\n    const item = yield storageService2.getItem(fileName);\n    if (item) {\n      continue;\n    }\n    filePromises.push(\n      downloadAndStoreCompressedZkeyChunks(\n        zkeyPath,\n        i,\n        fileName,\n        storageService2\n      )\n    );\n  }\n  yield Promise.all(filePromises);\n});\nvar downloadAndStoreCompressedZkeyChunks = (_0, _1, _2, ..._3) => __async(void 0, [_0, _1, _2, ..._3], function* (zkeyPath, index, fileName, storageService2 = storageService) {\n  try {\n    const response = yield fetch(zkeyPath + `/circuit_final_${index}.gz`);\n    if (!response.ok)\n      throw Error(\"Error while fetching compressed chunked zkey\");\n    const compressedChunk = yield response.arrayBuffer();\n    const uncompressedChunk = import_pako.default.ungzip(compressedChunk);\n    yield storageService2.setItem(fileName, uncompressedChunk);\n  } catch (e) {\n    handleError(e, \"Error while dowloading the zkey chunks\");\n  }\n});\nvar retrieveFileExtension = (str) => {\n  const parsedUrl = new URL(str);\n  const fileExtension = parsedUrl.pathname.substring(\n    parsedUrl.pathname.lastIndexOf(\".\") + 1\n  );\n  return fileExtension;\n};\nfunction getRandomBytes(length) {\n  const array = new Uint8Array(length);\n  for (let i = 0; i < length; i++) {\n    array[i] = Math.floor(Math.random() * 256);\n  }\n  return array;\n}\n\n// src/prover.ts\nvar loadZkeyChunks = (_0, ..._1) => __async(void 0, [_0, ..._1], function* (zkeyUrl, storageService2 = storageService) {\n  try {\n    yield searchZkeyChunks(zkeyUrl, storageService2);\n  } catch (e) {\n    handleError(e, \"Error while searching for the zkey chunks\");\n  }\n  const buffers = [];\n  try {\n    for (let i = 0; i < 10; i++) {\n      const fileName = `circuit_final_${i}.zkey`;\n      const item = yield storageService2.getItem(fileName);\n      if (!item)\n        throw Error(`${fileName} missing in LocalForage!`);\n      buffers.push(item);\n    }\n  } catch (e) {\n    handleError(e, \"Error while retrieving zkey chunks from localforage\");\n  }\n  const totalLength = buffers.reduce((acc, val) => acc + val.length, 0);\n  const zkey = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const array of buffers) {\n    zkey.set(array, offset);\n    offset += array.length;\n  }\n  return zkey;\n});\nfunction fetchKey(keyURL, maxRetries = 3) {\n  return __async(this, null, function* () {\n    let attempts = 0;\n    while (attempts < maxRetries) {\n      try {\n        const response = yield fetch(keyURL);\n        if (!response.ok) {\n          throw new Error(\n            `Error while fetching ${retrieveFileExtension(\n              keyURL\n            )} artifacts from prover: ${response.statusText}`\n          );\n        }\n        const data = yield response.arrayBuffer();\n        return data;\n      } catch (error) {\n        attempts++;\n        if (attempts >= maxRetries) {\n          throw error;\n        }\n        yield new Promise((resolve) => setTimeout(resolve, 1e3 * attempts));\n      }\n    }\n    return keyURL;\n  });\n}\nvar KeyPath = class {\n  constructor(keyURL, ArtifactsOrigin2) {\n    this.keyURL = keyURL;\n    this.artifactsOrigin = ArtifactsOrigin2;\n  }\n  getKey() {\n    return __async(this, null, function* () {\n      switch (this.artifactsOrigin) {\n        case 1 /* local */:\n          return this.keyURL;\n        case 0 /* server */:\n          return yield fetchKey(this.keyURL);\n        case 2 /* chunked */:\n          return yield loadZkeyChunks(this.keyURL);\n      }\n    });\n  }\n};\nvar AnonAadhaarProver = class {\n  constructor(wasmURL, zkey, proverType) {\n    this.wasm = new KeyPath(\n      wasmURL,\n      proverType === 2 /* chunked */ ? 0 /* server */ : proverType\n    );\n    this.zkey = new KeyPath(zkey, proverType);\n    this.proverType = proverType;\n  }\n  proving(witness, updateState) {\n    return __async(this, null, function* () {\n      let wasmBuffer;\n      let zkeyBuffer;\n      switch (this.proverType) {\n        case 1 /* local */:\n          if (updateState)\n            updateState(\"fetching-wasm\" /* FetchingWasm */);\n          wasmBuffer = yield this.wasm.getKey();\n          if (updateState)\n            updateState(\"fetching-zkey\" /* FetchingZkey */);\n          zkeyBuffer = yield this.zkey.getKey();\n          break;\n        case 0 /* server */:\n          if (updateState)\n            updateState(\"fetching-wasm\" /* FetchingWasm */);\n          wasmBuffer = new Uint8Array(yield this.wasm.getKey());\n          if (updateState)\n            updateState(\"fetching-zkey\" /* FetchingZkey */);\n          zkeyBuffer = new Uint8Array(yield this.zkey.getKey());\n          break;\n        case 2 /* chunked */:\n          if (updateState)\n            updateState(\"fetching-wasm\" /* FetchingWasm */);\n          wasmBuffer = new Uint8Array(yield this.wasm.getKey());\n          if (updateState)\n            updateState(\"fetching-zkey\" /* FetchingZkey */);\n          zkeyBuffer = yield this.zkey.getKey();\n          break;\n      }\n      const input = {\n        qrDataPadded: witness.qrDataPadded.value,\n        qrDataPaddedLength: witness.qrDataPaddedLength.value,\n        delimiterIndices: witness.delimiterIndices.value,\n        signature: witness.signature.value,\n        pubKey: witness.pubKey.value,\n        nullifierSeed: witness.nullifierSeed.value,\n        signalHash: witness.signalHash.value,\n        revealAgeAbove18: witness.revealAgeAbove18.value,\n        revealGender: witness.revealGender.value,\n        revealPinCode: witness.revealPinCode.value,\n        revealState: witness.revealState.value\n      };\n      if (updateState)\n        updateState(\"proving\" /* Proving */);\n      let result;\n      try {\n        result = yield import_snarkjs.groth16.fullProve(input, wasmBuffer, zkeyBuffer);\n      } catch (e) {\n        console.error(e);\n        if (updateState)\n          updateState(\"error\" /* Error */);\n        throw new Error(\"[AnonAAdhaarProver]: Error while generating the proof\");\n      }\n      const proof = result.proof;\n      const publicSignals = result.publicSignals;\n      if (updateState)\n        updateState(\"completed\" /* Completed */);\n      return {\n        groth16Proof: proof,\n        pubkeyHash: publicSignals[0],\n        timestamp: publicSignals[2],\n        nullifierSeed: witness.nullifierSeed.value,\n        nullifier: publicSignals[1],\n        signalHash: witness.signalHash.value,\n        ageAbove18: publicSignals[3],\n        gender: publicSignals[4],\n        pincode: publicSignals[5],\n        state: publicSignals[6]\n      };\n    });\n  }\n};\n\n// src/constants.ts\nvar artifactUrls = {\n  V1: {\n    wasm: \"https://anon-aadhaar-artifacts.s3.eu-central-1.amazonaws.com/v1.0.0/aadhaar-verifier.wasm\",\n    zkey: \"https://anon-aadhaar-artifacts.s3.eu-central-1.amazonaws.com/v1.0.0/circuit_final.zkey\",\n    vk: \"https://anon-aadhaar-artifacts.s3.eu-central-1.amazonaws.com/v1.0.0/vkey.json\",\n    chunked: \"https://anon-aadhaar-artifacts.s3.eu-central-1.amazonaws.com/v1.0.0/chunked_zkey\"\n  },\n  v2: {\n    wasm: \"https://anon-aadhaar-artifacts.s3.eu-central-1.amazonaws.com/v2.0.0/aadhaar-verifier.wasm\",\n    zkey: \"https://anon-aadhaar-artifacts.s3.eu-central-1.amazonaws.com/v2.0.0/circuit_final.zkey\",\n    vk: \"https://anon-aadhaar-artifacts.s3.eu-central-1.amazonaws.com/v2.0.0/vkey.json\",\n    chunked: \"https://anon-aadhaar-artifacts.s3.eu-central-1.amazonaws.com/v2.0.0/chunked_zkey\"\n  }\n  // test: {\n  //   wasm: BaseUrlArtifacts.Test + Artifacts.WASM_URL,\n  //   zkey: BaseUrlArtifacts.Test + Artifacts.ZKEY_URL,\n  //   vk: BaseUrlArtifacts.Test + Artifacts.VK_URL,\n  //   chunked: BaseUrlArtifacts.Test + Artifacts.ZKEY_CHUNKS,\n  // },\n  // staging: {\n  //   wasm: BaseUrlArtifacts.Test + Artifacts.WASM_URL,\n  //   zkey: BaseUrlArtifacts.Staging + Artifacts.ZKEY_CHUNKS,\n  //   vk: BaseUrlArtifacts.Test + Artifacts.VK_URL,\n  // },\n};\nvar testCertificateUrl = \"https://anon-aadhaar.s3.ap-south-1.amazonaws.com/testCertificate.pem\";\nvar CIRCOM_FIELD_P = BigInt(\n  \"21888242871839275222246405745257275088548364400416034343698204186575808495617\"\n);\nvar productionPublicKeyHash = \"18063425702624337643644061197836918910810808173893535653269228433734128853484\";\nvar testPublicKeyHash = \"15134874015316324267425466444584014077184337590635665158241104437045239495873\";\n\n// src/core.ts\nvar AnonAadhaarCore = class {\n  constructor(id, claim, proof) {\n    this.type = AnonAadhaarTypeName;\n    this.id = id;\n    this.claim = claim;\n    this.proof = proof;\n  }\n};\nvar initArgs = void 0;\nfunction init(args) {\n  return __async(this, null, function* () {\n    initArgs = args;\n  });\n}\nfunction prove(args, updateState) {\n  return __async(this, null, function* () {\n    if (!initArgs) {\n      throw new Error(\n        \"cannot make Anon Aadhaar proof: init has not been called yet\"\n      );\n    }\n    if (!args.pubKey.value) {\n      throw new Error(\"Invalid pubKey argument\");\n    }\n    if (!args.signalHash.value) {\n      throw new Error(\"Invalid signalHash argument\");\n    }\n    if (!args.revealAgeAbove18.value) {\n      throw new Error(\"Invalid revealAgeAbove18 argument\");\n    }\n    const id = (0, import_uuid.v4)();\n    const prover = new AnonAadhaarProver(\n      initArgs.wasmURL,\n      initArgs.zkeyURL,\n      initArgs.artifactsOrigin\n    );\n    const anonAadhaarProof = yield prover.proving(args, updateState);\n    const anonAadhaarClaim = {\n      pubKey: args.pubKey.value,\n      signalHash: args.signalHash.value,\n      ageAbove18: args.revealAgeAbove18.value === \"1\" ? anonAadhaarProof.ageAbove18 === \"1\" : null,\n      gender: convertRevealBigIntToString(anonAadhaarProof.gender) || null,\n      pincode: anonAadhaarProof.pincode === \"0\" ? null : anonAadhaarProof.pincode,\n      state: convertRevealBigIntToString(anonAadhaarProof.state) || null\n    };\n    return new AnonAadhaarCore(id, anonAadhaarClaim, anonAadhaarProof);\n  });\n}\nfunction getVerifyKey() {\n  return __async(this, null, function* () {\n    let vk;\n    if (!initArgs) {\n      throw new Error(\n        \"cannot make Anon Aadhaar proof: init has not been called yet\"\n      );\n    }\n    if (initArgs.artifactsOrigin === 1 /* local */) {\n      vk = __webpack_require__(\"(ssr)/./node_modules/@anon-aadhaar/core/dist sync recursive\")(initArgs.vkeyURL);\n    } else {\n      const response = yield fetch(initArgs.vkeyURL);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch the verify key from server`);\n      }\n      vk = yield response.json();\n    }\n    return vk;\n  });\n}\nfunction verify(pcd, useTestAadhaar) {\n  return __async(this, null, function* () {\n    let pubkeyHash = productionPublicKeyHash;\n    if (useTestAadhaar) {\n      pubkeyHash = testPublicKeyHash;\n    }\n    if (pcd.proof.pubkeyHash !== pubkeyHash) {\n      throw new Error(\"VerificationError: public key mismatch.\");\n    }\n    const vk = yield getVerifyKey();\n    return import_snarkjs2.groth16.verify(\n      vk,\n      [\n        pcd.proof.pubkeyHash,\n        pcd.proof.nullifier,\n        pcd.proof.timestamp,\n        pcd.proof.ageAbove18,\n        pcd.proof.gender,\n        pcd.proof.pincode,\n        pcd.proof.state,\n        pcd.proof.nullifierSeed,\n        pcd.proof.signalHash\n      ],\n      pcd.proof.groth16Proof\n    );\n  });\n}\nfunction serialize(pcd) {\n  return Promise.resolve({\n    type: AnonAadhaarTypeName,\n    pcd: (0, import_json_bigint.default)().stringify({\n      type: pcd.type,\n      id: pcd.id,\n      claim: pcd.claim,\n      proof: pcd.proof\n    })\n  });\n}\nfunction deserialize(serialized) {\n  return __async(this, null, function* () {\n    return (0, import_json_bigint.default)().parse(serialized);\n  });\n}\nfunction getDisplayOptions(pcd) {\n  return {\n    header: \"Anon Aadhaar Signature\",\n    displayName: \"pcd-\" + pcd.type\n  };\n}\nvar AnonAadhaarCorePackage = {\n  name: AnonAadhaarTypeName,\n  getDisplayOptions,\n  prove,\n  init,\n  verify,\n  serialize,\n  deserialize\n};\n\n// src/generateArgs.ts\nvar import_binary_format = __webpack_require__(/*! @zk-email/helpers/dist/binary-format */ \"(ssr)/./node_modules/@zk-email/helpers/dist/binary-format.js\");\nvar import_sha_utils = __webpack_require__(/*! @zk-email/helpers/dist/sha-utils */ \"(ssr)/./node_modules/@zk-email/helpers/dist/sha-utils.js\");\nvar import_buffer = __webpack_require__(/*! buffer */ \"buffer\");\nvar import_node_forge = __toESM(require_lib());\nvar import_pcd_types = __webpack_require__(/*! @pcd/pcd-types */ \"(ssr)/./node_modules/@pcd/pcd-types/dist/index.js\");\n\n// ../../node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\nvar import_bn = __toESM(require_bn());\n\n// ../../node_modules/@ethersproject/logger/lib.esm/_version.js\nvar version = \"logger/5.7.0\";\n\n// ../../node_modules/@ethersproject/logger/lib.esm/index.js\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\nvar LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nvar _logLevel = LogLevels[\"default\"];\nvar _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    const missing = [];\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(233).normalize(\"NFD\") !== String.fromCharCode(101, 769)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nvar _normalizeError = _checkNormalize();\nvar LogLevel;\n(function(LogLevel2) {\n  LogLevel2[\"DEBUG\"] = \"DEBUG\";\n  LogLevel2[\"INFO\"] = \"INFO\";\n  LogLevel2[\"WARNING\"] = \"WARNING\";\n  LogLevel2[\"ERROR\"] = \"ERROR\";\n  LogLevel2[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nvar ErrorCode;\n(function(ErrorCode2) {\n  ErrorCode2[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  ErrorCode2[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  ErrorCode2[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  ErrorCode2[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  ErrorCode2[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  ErrorCode2[\"TIMEOUT\"] = \"TIMEOUT\";\n  ErrorCode2[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  ErrorCode2[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ErrorCode2[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  ErrorCode2[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  ErrorCode2[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  ErrorCode2[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ErrorCode2[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  ErrorCode2[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  ErrorCode2[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  ErrorCode2[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  ErrorCode2[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  ErrorCode2[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n  ErrorCode2[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\nvar HEX = \"0123456789abcdef\";\nvar Logger = class _Logger {\n  constructor(version4) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version4,\n      writable: false\n    });\n  }\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log.apply(console, args);\n  }\n  debug(...args) {\n    this._log(_Logger.levels.DEBUG, args);\n  }\n  info(...args) {\n    this._log(_Logger.levels.INFO, args);\n  }\n  warn(...args) {\n    this._log(_Logger.levels.WARNING, args);\n  }\n  makeError(message, code, params) {\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n    if (!code) {\n      code = _Logger.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n    const messageDetails = [];\n    Object.keys(params).forEach((key) => {\n      const value = params[key];\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 15];\n          }\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error2) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT: {\n        url = \"NUMERIC_FAULT\";\n        const fault = message;\n        switch (fault) {\n          case \"overflow\":\n          case \"underflow\":\n          case \"division-by-zero\":\n            url += \"-\" + fault;\n            break;\n          case \"negative-power\":\n          case \"negative-width\":\n            url += \"-unsupported\";\n            break;\n          case \"unbound-bitwise-result\":\n            url += \"-unbound-result\";\n            break;\n        }\n        break;\n      }\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n    if (url) {\n      message += \" [ See: https://links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function(key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value\n    });\n  }\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n  checkNormalize(message) {\n    if (message == null) {\n      message = \"platform missing String.prototype.normalize\";\n    }\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", _Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n    if (message == null) {\n      message = \"value not safe\";\n    }\n    if (value < 0 || value >= 9007199254740991) {\n      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value\n      });\n    }\n    if (value % 1) {\n      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value\n      });\n    }\n  }\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, _Logger.errors.MISSING_ARGUMENT, {\n        count,\n        expectedCount\n      });\n    }\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {\n        count,\n        expectedCount\n      });\n    }\n  }\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", _Logger.errors.MISSING_NEW, { name: kind.name });\n    }\n  }\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", _Logger.errors.MISSING_NEW, { name: kind.name });\n    }\n  }\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new _Logger(version);\n    }\n    return _globalLogger;\n  }\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", _Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", _Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      _Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _logLevel = level;\n  }\n  static from(version4) {\n    return new _Logger(version4);\n  }\n};\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n\n// ../../node_modules/@ethersproject/bytes/lib.esm/_version.js\nvar version2 = \"bytes/5.7.0\";\n\n// ../../node_modules/@ethersproject/bytes/lib.esm/index.js\nvar logger = new Logger(version2);\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n  array.slice = function() {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n  return array;\n}\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n  if (typeof value === \"string\") {\n    return false;\n  }\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n    while (value) {\n      result.unshift(value & 255);\n      value = parseInt(String(value / 256));\n    }\n    if (result.length === 0) {\n      result.push(0);\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0\" + hex;\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n    const result = [];\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nfunction zeroPad(value, length) {\n  value = arrayify(value);\n  if (value.length > length) {\n    logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n  }\n  const result = new Uint8Array(length);\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nvar HexCharacters = \"0123456789abcdef\";\nfunction hexlify(value, options) {\n  if (!options) {\n    options = {};\n  }\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid hexlify value\");\n    let hex = \"\";\n    while (value) {\n      hex = HexCharacters[value & 15] + hex;\n      value = Math.floor(value / 16);\n    }\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = \"0\" + hex;\n      }\n      return \"0x\" + hex;\n    }\n    return \"0x00\";\n  }\n  if (typeof value === \"bigint\") {\n    value = value.toString(16);\n    if (value.length % 2) {\n      return \"0x0\" + value;\n    }\n    return \"0x\" + value;\n  }\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n  if (isHexString(value)) {\n    if (value.length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + value.substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n    return value.toLowerCase();\n  }\n  if (isBytes(value)) {\n    let result = \"0x\";\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];\n    }\n    return result;\n  }\n  return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n\n// ../../node_modules/@ethersproject/bignumber/lib.esm/_version.js\nvar version3 = \"bignumber/5.7.0\";\n\n// ../../node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\nvar BN = import_bn.default.BN;\nvar logger2 = new Logger(version3);\nvar _constructorGuard = {};\nvar MAX_SAFE = 9007199254740991;\nvar _warnedToStringRadix = false;\nvar BigNumber = class _BigNumber {\n  constructor(constructorGuard, hex) {\n    if (constructorGuard !== _constructorGuard) {\n      logger2.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n  fromTwos(value) {\n    return toBigNumber(toBN(this).fromTwos(value));\n  }\n  toTwos(value) {\n    return toBigNumber(toBN(this).toTwos(value));\n  }\n  abs() {\n    if (this._hex[0] === \"-\") {\n      return _BigNumber.from(this._hex.substring(1));\n    }\n    return this;\n  }\n  add(other) {\n    return toBigNumber(toBN(this).add(toBN(other)));\n  }\n  sub(other) {\n    return toBigNumber(toBN(this).sub(toBN(other)));\n  }\n  div(other) {\n    const o = _BigNumber.from(other);\n    if (o.isZero()) {\n      throwFault(\"division-by-zero\", \"div\");\n    }\n    return toBigNumber(toBN(this).div(toBN(other)));\n  }\n  mul(other) {\n    return toBigNumber(toBN(this).mul(toBN(other)));\n  }\n  mod(other) {\n    const value = toBN(other);\n    if (value.isNeg()) {\n      throwFault(\"division-by-zero\", \"mod\");\n    }\n    return toBigNumber(toBN(this).umod(value));\n  }\n  pow(other) {\n    const value = toBN(other);\n    if (value.isNeg()) {\n      throwFault(\"negative-power\", \"pow\");\n    }\n    return toBigNumber(toBN(this).pow(value));\n  }\n  and(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"unbound-bitwise-result\", \"and\");\n    }\n    return toBigNumber(toBN(this).and(value));\n  }\n  or(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"unbound-bitwise-result\", \"or\");\n    }\n    return toBigNumber(toBN(this).or(value));\n  }\n  xor(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"unbound-bitwise-result\", \"xor\");\n    }\n    return toBigNumber(toBN(this).xor(value));\n  }\n  mask(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"negative-width\", \"mask\");\n    }\n    return toBigNumber(toBN(this).maskn(value));\n  }\n  shl(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"negative-width\", \"shl\");\n    }\n    return toBigNumber(toBN(this).shln(value));\n  }\n  shr(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"negative-width\", \"shr\");\n    }\n    return toBigNumber(toBN(this).shrn(value));\n  }\n  eq(other) {\n    return toBN(this).eq(toBN(other));\n  }\n  lt(other) {\n    return toBN(this).lt(toBN(other));\n  }\n  lte(other) {\n    return toBN(this).lte(toBN(other));\n  }\n  gt(other) {\n    return toBN(this).gt(toBN(other));\n  }\n  gte(other) {\n    return toBN(this).gte(toBN(other));\n  }\n  isNegative() {\n    return this._hex[0] === \"-\";\n  }\n  isZero() {\n    return toBN(this).isZero();\n  }\n  toNumber() {\n    try {\n      return toBN(this).toNumber();\n    } catch (error) {\n      throwFault(\"overflow\", \"toNumber\", this.toString());\n    }\n    return null;\n  }\n  toBigInt() {\n    try {\n      return BigInt(this.toString());\n    } catch (e) {\n    }\n    return logger2.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n      value: this.toString()\n    });\n  }\n  toString() {\n    if (arguments.length > 0) {\n      if (arguments[0] === 10) {\n        if (!_warnedToStringRadix) {\n          _warnedToStringRadix = true;\n          logger2.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n        }\n      } else if (arguments[0] === 16) {\n        logger2.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      } else {\n        logger2.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      }\n    }\n    return toBN(this).toString(10);\n  }\n  toHexString() {\n    return this._hex;\n  }\n  toJSON(key) {\n    return { type: \"BigNumber\", hex: this.toHexString() };\n  }\n  static from(value) {\n    if (value instanceof _BigNumber) {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      if (value.match(/^-?0x[0-9a-f]+$/i)) {\n        return new _BigNumber(_constructorGuard, toHex(value));\n      }\n      if (value.match(/^-?[0-9]+$/)) {\n        return new _BigNumber(_constructorGuard, toHex(new BN(value)));\n      }\n      return logger2.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n    }\n    if (typeof value === \"number\") {\n      if (value % 1) {\n        throwFault(\"underflow\", \"BigNumber.from\", value);\n      }\n      if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n        throwFault(\"overflow\", \"BigNumber.from\", value);\n      }\n      return _BigNumber.from(String(value));\n    }\n    const anyValue = value;\n    if (typeof anyValue === \"bigint\") {\n      return _BigNumber.from(anyValue.toString());\n    }\n    if (isBytes(anyValue)) {\n      return _BigNumber.from(hexlify(anyValue));\n    }\n    if (anyValue) {\n      if (anyValue.toHexString) {\n        const hex = anyValue.toHexString();\n        if (typeof hex === \"string\") {\n          return _BigNumber.from(hex);\n        }\n      } else {\n        let hex = anyValue._hex;\n        if (hex == null && anyValue.type === \"BigNumber\") {\n          hex = anyValue.hex;\n        }\n        if (typeof hex === \"string\") {\n          if (isHexString(hex) || hex[0] === \"-\" && isHexString(hex.substring(1))) {\n            return _BigNumber.from(hex);\n          }\n        }\n      }\n    }\n    return logger2.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n  }\n  static isBigNumber(value) {\n    return !!(value && value._isBigNumber);\n  }\n};\nfunction toHex(value) {\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  }\n  if (value[0] === \"-\") {\n    value = value.substring(1);\n    if (value[0] === \"-\") {\n      logger2.throwArgumentError(\"invalid hex\", \"value\", value);\n    }\n    value = toHex(value);\n    if (value === \"0x00\") {\n      return value;\n    }\n    return \"-\" + value;\n  }\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  if (value === \"0x\") {\n    return \"0x00\";\n  }\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n  return value;\n}\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n  const hex = BigNumber.from(value).toHexString();\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n  return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n  const params = { fault, operation };\n  if (value != null) {\n    params.value = value;\n  }\n  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// ../../node_modules/@ethersproject/keccak256/lib.esm/index.js\nvar import_js_sha3 = __toESM(require_sha3());\nfunction keccak256(data) {\n  return \"0x\" + import_js_sha3.default.keccak_256(arrayify(data));\n}\n\n// src/hash.ts\nfunction hash(message) {\n  message = BigNumber.from(message).toTwos(256).toHexString();\n  message = zeroPad(message, 32);\n  return (BigInt(keccak256(message)) >> BigInt(3)).toString();\n}\n\n// src/generateArgs.ts\nvar generateArgs = (_0) => __async(void 0, [_0], function* ({\n  qrData,\n  certificateFile,\n  nullifierSeed,\n  fieldsToRevealArray,\n  signal\n}) {\n  const bigIntData = BigInt(qrData);\n  const byteArray = convertBigIntToByteArray(bigIntData);\n  const decompressedByteArray = decompressByteArray(byteArray);\n  const signature = decompressedByteArray.slice(\n    decompressedByteArray.length - 256,\n    decompressedByteArray.length\n  );\n  const signedData = decompressedByteArray.slice(\n    0,\n    decompressedByteArray.length - 256\n  );\n  const RSAPublicKey = import_node_forge.pki.certificateFromPem(certificateFile).publicKey;\n  const publicKey = RSAPublicKey.n.toString(16);\n  const pubKeyBigInt = BigInt(\"0x\" + publicKey);\n  const signatureBigint = BigInt(\n    \"0x\" + (0, import_binary_format.bufferToHex)(import_buffer.Buffer.from(signature)).toString()\n  );\n  const [paddedMessage, messageLength] = (0, import_sha_utils.sha256Pad)(signedData, 512 * 3);\n  const delimiterIndices = [];\n  for (let i = 0; i < paddedMessage.length; i++) {\n    if (paddedMessage[i] === 255) {\n      delimiterIndices.push(i);\n    }\n    if (delimiterIndices.length === 18) {\n      break;\n    }\n  }\n  if (!fieldsToRevealArray)\n    fieldsToRevealArray = [];\n  const fieldsToReveal = {\n    revealAgeAbove18: fieldsToRevealArray.includes(\"revealAgeAbove18\"),\n    revealGender: fieldsToRevealArray.includes(\"revealGender\"),\n    revealPinCode: fieldsToRevealArray.includes(\"revealPinCode\"),\n    revealState: fieldsToRevealArray.includes(\"revealState\")\n  };\n  const nullifierSeedBigInt = BigInt(nullifierSeed);\n  if (nullifierSeedBigInt > CIRCOM_FIELD_P) {\n    throw new Error(\"Nullifier seed is larger than the max field size\");\n  }\n  const signalHash = signal ? hash(signal) : hash(1);\n  const anonAadhaarArgs = {\n    qrDataPadded: {\n      argumentType: import_pcd_types.ArgumentTypeName.StringArray,\n      value: (0, import_binary_format.Uint8ArrayToCharArray)(paddedMessage)\n    },\n    qrDataPaddedLength: {\n      argumentType: import_pcd_types.ArgumentTypeName.Number,\n      value: messageLength.toString()\n    },\n    delimiterIndices: {\n      argumentType: import_pcd_types.ArgumentTypeName.StringArray,\n      value: delimiterIndices.map((elem) => elem.toString())\n    },\n    signature: {\n      argumentType: import_pcd_types.ArgumentTypeName.StringArray,\n      value: splitToWords(signatureBigint, BigInt(121), BigInt(17))\n    },\n    pubKey: {\n      argumentType: import_pcd_types.ArgumentTypeName.StringArray,\n      value: splitToWords(pubKeyBigInt, BigInt(121), BigInt(17))\n    },\n    nullifierSeed: {\n      argumentType: import_pcd_types.ArgumentTypeName.String,\n      value: nullifierSeedBigInt.toString()\n    },\n    signalHash: {\n      argumentType: import_pcd_types.ArgumentTypeName.String,\n      value: signalHash\n    },\n    revealAgeAbove18: {\n      argumentType: import_pcd_types.ArgumentTypeName.Number,\n      value: fieldsToReveal.revealAgeAbove18 ? \"1\" : \"0\"\n    },\n    revealGender: {\n      argumentType: import_pcd_types.ArgumentTypeName.Number,\n      value: fieldsToReveal.revealGender ? \"1\" : \"0\"\n    },\n    revealPinCode: {\n      argumentType: import_pcd_types.ArgumentTypeName.Number,\n      value: fieldsToReveal.revealPinCode ? \"1\" : \"0\"\n    },\n    revealState: {\n      argumentType: import_pcd_types.ArgumentTypeName.Number,\n      value: fieldsToReveal.revealState ? \"1\" : \"0\"\n    }\n  };\n  return anonAadhaarArgs;\n});\n\n// src/qrGenerator.ts\nvar import_pako2 = __toESM(__webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/index.js\"));\nvar createCustomV2TestData = ({\n  signedData,\n  dob,\n  pincode,\n  gender,\n  state,\n  photo\n}) => {\n  const allDataParsed = [];\n  const delimiterIndices = [];\n  let countDelimiter = 0;\n  let temp = [];\n  for (let i = 0; i < signedData.length; i++) {\n    if (countDelimiter < 16) {\n      if (signedData[i] !== 255) {\n        temp.push(signedData[i]);\n      } else {\n        countDelimiter += 1;\n        allDataParsed.push(temp);\n        delimiterIndices.push(i);\n        temp = [];\n      }\n    } else {\n      break;\n    }\n  }\n  const newDateString = returnNewDateString();\n  const newTimestamp = new TextEncoder().encode(newDateString);\n  const signedDataWithNewTimestamp = replaceBytesBetween(\n    signedData,\n    newTimestamp,\n    6,\n    5 + newTimestamp.length\n  );\n  let modifiedSignedData = signedDataWithNewTimestamp;\n  if (dob) {\n    const newDOB = new TextEncoder().encode(dob);\n    modifiedSignedData = replaceBytesBetween(\n      modifiedSignedData,\n      newDOB,\n      delimiterIndices[3 /* DOB */ - 1] + 1,\n      delimiterIndices[3 /* DOB */ - 1] + allDataParsed[3 /* DOB */].length\n    );\n  }\n  if (gender) {\n    const newGender = new TextEncoder().encode(gender);\n    modifiedSignedData = replaceBytesBetween(\n      modifiedSignedData,\n      newGender,\n      delimiterIndices[4 /* Gender */ - 1] + 1,\n      delimiterIndices[4 /* Gender */ - 1] + allDataParsed[4 /* Gender */].length\n    );\n  }\n  if (pincode) {\n    const newPincode = new TextEncoder().encode(pincode);\n    modifiedSignedData = replaceBytesBetween(\n      modifiedSignedData,\n      newPincode,\n      delimiterIndices[10 /* PinCode */ - 1] + 1,\n      delimiterIndices[10 /* PinCode */ - 1] + allDataParsed[10 /* PinCode */].length\n    );\n  }\n  if (state) {\n    const newState = new TextEncoder().encode(state);\n    modifiedSignedData = replaceBytesBetween(\n      modifiedSignedData,\n      newState,\n      delimiterIndices[12 /* State */ - 1] + 1,\n      delimiterIndices[12 /* State */ - 1] + allDataParsed[12 /* State */].length\n    );\n  }\n  if (photo) {\n    const { begin, dataLength } = extractPhoto(\n      Array.from(modifiedSignedData),\n      modifiedSignedData.length\n    );\n    const photoLength = dataLength - begin;\n    modifiedSignedData = replaceBytesBetween(\n      modifiedSignedData,\n      getRandomBytes(photoLength - 1),\n      begin + 1,\n      begin + photoLength - 1\n    );\n  }\n  const versionSpecifier = new Uint8Array([86, 50, 255]);\n  const number1234 = new Uint8Array([49, 50, 51, 52, 255]);\n  const beforeInsertion = new Uint8Array(\n    modifiedSignedData.slice(0, getEndIndex(modifiedSignedData))\n  );\n  const afterInsertion = new Uint8Array(\n    modifiedSignedData.slice(getEndIndex(modifiedSignedData))\n  );\n  const newData = new Uint8Array(\n    versionSpecifier.length + beforeInsertion.length + number1234.length + afterInsertion.length\n  );\n  newData.set(versionSpecifier, 0);\n  newData.set(beforeInsertion, versionSpecifier.length);\n  newData.set(number1234, versionSpecifier.length + beforeInsertion.length);\n  newData.set(\n    afterInsertion,\n    versionSpecifier.length + beforeInsertion.length + number1234.length\n  );\n  return newData;\n};\nfunction timestampToUTCUnix(rawData) {\n  const extractedArray = new Uint8Array(10);\n  for (let i = 0; i < 10; i++) {\n    extractedArray[i] = rawData[i + 9];\n  }\n  const timestampString = Buffer.from(extractedArray).toString();\n  const result = `${timestampString.slice(0, 4)}-${timestampString.slice(\n    4,\n    6\n  )}-${timestampString.slice(6, 8)}T${timestampString.slice(8, 10)}:00:00.000Z`;\n  const dateObj = new Date(result);\n  dateObj.setUTCHours(dateObj.getUTCHours() - 5);\n  dateObj.setUTCMinutes(dateObj.getUTCMinutes() - 30);\n  return Math.floor(dateObj.getTime() / 1e3);\n}\nfunction dateToUnixTimestamp(dateStr) {\n  const parts = dateStr.split(\"-\");\n  const day = parseInt(parts[0], 10);\n  const month = parseInt(parts[1], 10) - 1;\n  const year = parseInt(parts[2], 10);\n  const date = new Date(Date.UTC(year, month, day, 0, 0, 0, 0));\n  const unixTimestamp = date.getTime() / 1e3;\n  return unixTimestamp + 19800;\n}\nfunction returnFullId(signedData) {\n  const allDataParsed = [];\n  let countDelimiter = 0;\n  let temp = [];\n  for (let i = 0; i < signedData.length; i++) {\n    if (countDelimiter < 18) {\n      if (signedData[i] !== 255) {\n        temp.push(signedData[i]);\n      } else {\n        countDelimiter += 1;\n        allDataParsed.push(temp);\n        temp = [];\n      }\n    }\n  }\n  const ID = {};\n  for (let i = 0; i < allDataParsed.length; i++) {\n    let result = \"\";\n    for (let j = 0; j < allDataParsed[i].length; j++) {\n      result += String.fromCharCode(allDataParsed[i][j]);\n    }\n    ID[IdFields[i - 1]] = result;\n  }\n  return ID;\n}\nfunction extractFieldByIndex(data, index) {\n  let start = -1;\n  let end = data.length;\n  let fieldIndex = -1;\n  for (let i = 0; i < data.length; i++) {\n    if (data[i] === 255) {\n      fieldIndex++;\n      if (fieldIndex === index) {\n        start = i;\n      } else if (fieldIndex === index + 1) {\n        end = i;\n        break;\n      }\n    }\n  }\n  if (start !== -1 && start < end) {\n    return data.slice(start, end);\n  }\n  return new Uint8Array();\n}\nfunction compressByteArray(byteArray) {\n  const compressedArray = import_pako2.default.deflate(byteArray);\n  return new Uint8Array(compressedArray);\n}\nfunction getEndIndex(byteArray) {\n  let countDelimiter = 0;\n  let endIndex = 0;\n  for (let i = 0; i < byteArray.length; i++) {\n    if (countDelimiter < 16) {\n      if (byteArray[i] !== 255) {\n        continue;\n      } else {\n        countDelimiter += 1;\n      }\n    } else {\n      endIndex = i;\n      break;\n    }\n  }\n  return endIndex;\n}\nfunction replaceBytesBetween(arr, replaceWith, start, end) {\n  if (start < 0 || end >= arr.length || start > end) {\n    console.error(\"Invalid start or end index.\");\n    return arr;\n  }\n  const before = arr.subarray(0, start);\n  const after = arr.subarray(end + 1);\n  const result = new Uint8Array(\n    before.length + replaceWith.length + after.length\n  );\n  result.set(before, 0);\n  result.set(replaceWith, before.length);\n  result.set(after, before.length + replaceWith.length);\n  return result;\n}\nfunction returnNewDateString() {\n  const newDate = /* @__PURE__ */ new Date();\n  const offsetHours = 5;\n  const offsetMinutes = 30;\n  newDate.setUTCHours(newDate.getUTCHours() + offsetHours);\n  newDate.setUTCMinutes(newDate.getUTCMinutes() + offsetMinutes);\n  return newDate.getUTCFullYear().toString() + (newDate.getUTCMonth() + 1).toString().padStart(2, \"0\") + newDate.getUTCDate().toString().padStart(2, \"0\") + newDate.getUTCHours().toString().padStart(2, \"0\") + newDate.getUTCMinutes().toString().padStart(2, \"0\") + newDate.getUTCSeconds().toString().padStart(2, \"0\") + newDate.getUTCMilliseconds().toString().padStart(3, \"0\");\n}\nfunction convertByteArrayToBigInt(byteArray) {\n  let result = BigInt(0);\n  for (let i = 0; i < byteArray.length; i++) {\n    result = result * BigInt(256) + BigInt(byteArray[i]);\n  }\n  return result;\n}\nvar rawDataToCompressedQR = (data) => {\n  const compressedDataBytes = compressByteArray(data);\n  const compressedBigInt = convertByteArrayToBigInt(compressedDataBytes);\n  return compressedBigInt;\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n/*! Bundled license information:\n\njs-sha3/src/sha3.js:\n  (**\n   * [js-sha3]{@link https://github.com/emn178/js-sha3}\n   *\n   * @version 0.8.0\n   * @author Chen, Yi-Cyuan [emn178@gmail.com]\n   * @copyright Chen, Yi-Cyuan 2015-2018\n   * @license MIT\n   *)\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v3.js\");\n/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v5.js\");\n/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/nil.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/version.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/parse.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7QUFDUTtBQUNFO0FBQ0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL2luZGV4LmpzPzBkZGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCBhcyB2MSB9IGZyb20gJy4vdjEuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2MyB9IGZyb20gJy4vdjMuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2NCB9IGZyb20gJy4vdjQuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2NSB9IGZyb20gJy4vdjUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBOSUwgfSBmcm9tICcuL25pbC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24uanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2YWxpZGF0ZSB9IGZyb20gJy4vdmFsaWRhdGUuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBhcnNlIH0gZnJvbSAnLi9wYXJzZS5qcyc7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/md5.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/md5.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('md5').update(bytes).digest();\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0Qjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUEsU0FBUyx3REFBaUI7QUFDMUI7O0FBRUEsaUVBQWUsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2F3YXJlLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzP2JjNGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5mdW5jdGlvbiBtZDUoYnl0ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMsICd1dGY4Jyk7XG4gIH1cblxuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShieXRlcykuZGlnZXN0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1kNTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/md5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/native.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/native.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  randomUUID: (crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID)\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QjtBQUM1QixpRUFBZTtBQUNmLGNBQWMsMERBQWlCO0FBQy9CLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25hdGl2ZS5qcz82NGJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmFuZG9tVVVJRDogY3J5cHRvLnJhbmRvbVVVSURcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/native.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/nil.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/nil.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbmlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25pbC5qcz8xZDUxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/nil.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/parse.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/parse.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/validate.js\");\n\n\nfunction parse(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcGFyc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7O0FBRXJDO0FBQ0EsT0FBTyx3REFBUTtBQUNmO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0M7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlFQUFlLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3BhcnNlLmpzPzNhOGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiBwYXJzZSh1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgbGV0IHY7XG4gIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gUGFyc2UgIyMjIyMjIyMtLi4uLi0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNDtcbiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMl0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzNdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLSMjIyMtLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls0XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDg7XG4gIGFycls1XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLSMjIyMtLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNl0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gODtcbiAgYXJyWzddID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0jIyMjLS4uLi4uLi4uLi4uLlxuXG4gIGFycls4XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4O1xuICBhcnJbOV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLS4uLi4tIyMjIyMjIyMjIyMjXG4gIC8vIChVc2UgXCIvXCIgdG8gYXZvaWQgMzItYml0IHRydW5jYXRpb24gd2hlbiBiaXQtc2hpZnRpbmcgaGlnaC1vcmRlciBieXRlcylcblxuICBhcnJbMTBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDI0LCAzNiksIDE2KSkgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzExXSA9IHYgLyAweDEwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7XG4gIGFyclsxM10gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsxNF0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzE1XSA9IHYgJiAweGZmO1xuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/regex.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/regex.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzPzkyNzQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/rng.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/rng.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QjtBQUM1Qix1Q0FBdUM7O0FBRXZDO0FBQ2U7QUFDZjtBQUNBLElBQUksNERBQXFCO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2F3YXJlLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzPzliZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuY29uc3Qgcm5kczhQb29sID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTsgLy8gIyBvZiByYW5kb20gdmFsdWVzIHRvIHByZS1hbGxvY2F0ZVxuXG5sZXQgcG9vbFB0ciA9IHJuZHM4UG9vbC5sZW5ndGg7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIGlmIChwb29sUHRyID4gcm5kczhQb29sLmxlbmd0aCAtIDE2KSB7XG4gICAgY3J5cHRvLnJhbmRvbUZpbGxTeW5jKHJuZHM4UG9vbCk7XG4gICAgcG9vbFB0ciA9IDA7XG4gIH1cblxuICByZXR1cm4gcm5kczhQb29sLnNsaWNlKHBvb2xQdHIsIHBvb2xQdHIgKz0gMTYpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/sha1.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/sha1.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha1').update(bytes).digest();\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc2hhMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLFNBQVMsd0RBQWlCO0FBQzFCOztBQUVBLGlFQUFlLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3NoYTEuanM/MzgwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbmZ1bmN0aW9uIHNoYTEoYnl0ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMsICd1dGY4Jyk7XG4gIH1cblxuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoYnl0ZXMpLmRpZ2VzdCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaGExOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/sha1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/stringify.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/stringify.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyx3REFBUTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpRUFBZSxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXdhcmUtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AYW5vbi1hYWRoYWFyL2NvcmUvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanM/ODE0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHJldHVybiBieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v1.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v1.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/stringify.js\");\n\n // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(b);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ3NCLENBQUM7QUFDbEQ7QUFDQTtBQUNBOztBQUVBOztBQUVBLGVBQWU7OztBQUdmO0FBQ0Esb0JBQW9COztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGO0FBQ2hGO0FBQ0E7O0FBRUE7QUFDQSx3REFBd0QsK0NBQUc7O0FBRTNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7O0FBR0Esd0VBQXdFO0FBQ3hFOztBQUVBLDRFQUE0RTs7QUFFNUUsZ0VBQWdFOztBQUVoRTtBQUNBO0FBQ0EsSUFBSTtBQUNKOzs7QUFHQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0I7O0FBRXhCLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQSx1QkFBdUI7O0FBRXZCLG9DQUFvQzs7QUFFcEMsOEJBQThCOztBQUU5QixrQ0FBa0M7O0FBRWxDLDRCQUE0Qjs7QUFFNUIsa0JBQWtCLE9BQU87QUFDekI7QUFDQTs7QUFFQSxnQkFBZ0IsOERBQWU7QUFDL0I7O0FBRUEsaUVBQWUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2F3YXJlLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjEuanM/NjZhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJzsgLy8gKipgdjEoKWAgLSBHZW5lcmF0ZSB0aW1lLWJhc2VkIFVVSUQqKlxuLy9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9MaW9zSy9VVUlELmpzXG4vLyBhbmQgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3V1aWQuaHRtbFxuXG5sZXQgX25vZGVJZDtcblxubGV0IF9jbG9ja3NlcTsgLy8gUHJldmlvdXMgdXVpZCBjcmVhdGlvbiB0aW1lXG5cblxubGV0IF9sYXN0TVNlY3MgPSAwO1xubGV0IF9sYXN0TlNlY3MgPSAwOyAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkIGZvciBBUEkgZGV0YWlsc1xuXG5mdW5jdGlvbiB2MShvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBsZXQgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgY29uc3QgYiA9IGJ1ZiB8fCBuZXcgQXJyYXkoMTYpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGV0IG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgbGV0IGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTsgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgY29uc3Qgc2VlZEJ5dGVzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjUsIGNyZWF0ZSBhbmQgNDgtYml0IG5vZGUgaWQsICg0NyByYW5kb20gYml0cyArIG11bHRpY2FzdCBiaXQgPSAxKVxuICAgICAgbm9kZSA9IF9ub2RlSWQgPSBbc2VlZEJ5dGVzWzBdIHwgMHgwMSwgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1dO1xuICAgIH1cblxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfSAvLyBVVUlEIHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLFxuICAvLyAoMTU4Mi0xMC0xNSAwMDowMCkuICBKU051bWJlcnMgYXJlbid0IHByZWNpc2UgZW5vdWdoIGZvciB0aGlzLCBzb1xuICAvLyB0aW1lIGlzIGhhbmRsZWQgaW50ZXJuYWxseSBhcyAnbXNlY3MnIChpbnRlZ2VyIG1pbGxpc2Vjb25kcykgYW5kICduc2VjcydcbiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC5cblxuXG4gIGxldCBtc2VjcyA9IG9wdGlvbnMubXNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubXNlY3MgOiBEYXRlLm5vdygpOyAvLyBQZXIgNC4yLjEuMiwgdXNlIGNvdW50IG9mIHV1aWQncyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBjdXJyZW50IGNsb2NrXG4gIC8vIGN5Y2xlIHRvIHNpbXVsYXRlIGhpZ2hlciByZXNvbHV0aW9uIGNsb2NrXG5cbiAgbGV0IG5zZWNzID0gb3B0aW9ucy5uc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uc2VjcyA6IF9sYXN0TlNlY3MgKyAxOyAvLyBUaW1lIHNpbmNlIGxhc3QgdXVpZCBjcmVhdGlvbiAoaW4gbXNlY3MpXG5cbiAgY29uc3QgZHQgPSBtc2VjcyAtIF9sYXN0TVNlY3MgKyAobnNlY3MgLSBfbGFzdE5TZWNzKSAvIDEwMDAwOyAvLyBQZXIgNC4yLjEuMiwgQnVtcCBjbG9ja3NlcSBvbiBjbG9jayByZWdyZXNzaW9uXG5cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfSAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92ZWQgb250byBhIG5ld1xuICAvLyB0aW1lIGludGVydmFsXG5cblxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfSAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG5cblxuICBpZiAobnNlY3MgPj0gMTAwMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1dWlkLnYxKCk6IENhbid0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlY1wiKTtcbiAgfVxuXG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTsgLy8gUGVyIDQuMS40IC0gQ29udmVydCBmcm9tIHVuaXggZXBvY2ggdG8gR3JlZ29yaWFuIGVwb2NoXG5cbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7IC8vIGB0aW1lX2xvd2BcblxuICBjb25zdCB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7IC8vIGB0aW1lX21pZGBcblxuICBjb25zdCB0bWggPSBtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDAgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7IC8vIGB0aW1lX2hpZ2hfYW5kX3ZlcnNpb25gXG5cbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMTYgJiAweGZmOyAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcblxuICBiW2krK10gPSBjbG9ja3NlcSA+Pj4gOCB8IDB4ODA7IC8vIGBjbG9ja19zZXFfbG93YFxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxICYgMHhmZjsgLy8gYG5vZGVgXG5cbiAgZm9yIChsZXQgbiA9IDA7IG4gPCA2OyArK24pIHtcbiAgICBiW2kgKyBuXSA9IG5vZGVbbl07XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IHVuc2FmZVN0cmluZ2lmeShiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjE7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v3.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v3.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/md5.js\");\n\n\nconst v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0E7QUFDM0IsV0FBVyxtREFBRyxhQUFhLCtDQUFHO0FBQzlCLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzLmpzPzgzZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgbWQ1IGZyb20gJy4vbWQ1LmpzJztcbmNvbnN0IHYzID0gdjM1KCd2MycsIDB4MzAsIG1kNSk7XG5leHBvcnQgZGVmYXVsdCB2MzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v35.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v35.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   \"default\": () => (/* binding */ v35)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/parse.js\");\n\n\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlEO0FBQ2xCOztBQUUvQjtBQUNBLDJDQUEyQzs7QUFFM0M7O0FBRUEsa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBOztBQUVBO0FBQ0E7O0FBRU87QUFDQTtBQUNRO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IscURBQUs7QUFDdkI7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxzQkFBc0IsUUFBUTtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsV0FBVyw4REFBZTtBQUMxQixJQUFJOzs7QUFHSjtBQUNBLDhCQUE4QjtBQUM5QixJQUFJLGVBQWU7OztBQUduQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2F3YXJlLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzPzhjYmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgY29uc3QgYnl0ZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5leHBvcnQgY29uc3QgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgY29uc3QgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2MzUobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIF9uYW1lc3BhY2U7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBzdHJpbmdUb0J5dGVzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWVzcGFjZSA9IHBhcnNlKG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgaWYgKCgoX25hbWVzcGFjZSA9IG5hbWVzcGFjZSkgPT09IG51bGwgfHwgX25hbWVzcGFjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25hbWVzcGFjZS5sZW5ndGgpICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v35.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v4.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v4.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\n\nfunction v4(options, buf, offset) {\n  if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n    return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUNOO0FBQ3NCOztBQUVqRDtBQUNBLE1BQU0sa0RBQU07QUFDWixXQUFXLGtEQUFNO0FBQ2pCOztBQUVBO0FBQ0EsaURBQWlELCtDQUFHLEtBQUs7O0FBRXpEO0FBQ0EsbUNBQW1DOztBQUVuQztBQUNBOztBQUVBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxTQUFTLDhEQUFlO0FBQ3hCOztBQUVBLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y0LmpzPzg3NjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5hdGl2ZSBmcm9tICcuL25hdGl2ZS5qcyc7XG5pbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v5.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v5.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/sha1.js\");\n\n\nconst v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ0U7QUFDN0IsV0FBVyxtREFBRyxhQUFhLGdEQUFJO0FBQy9CLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y1LmpzP2MzNjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgc2hhMSBmcm9tICcuL3NoYTEuanMnO1xuY29uc3QgdjUgPSB2MzUoJ3Y1JywgMHg1MCwgc2hhMSk7XG5leHBvcnQgZGVmYXVsdCB2NTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/v5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/validate.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/validate.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/regex.js\");\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7O0FBRS9CO0FBQ0EscUNBQXFDLGlEQUFLO0FBQzFDOztBQUVBLGlFQUFlLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZhbGlkYXRlLmpzP2U4ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/version.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/version.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/validate.js\");\n\n\nfunction version(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFub24tYWFkaGFhci9jb3JlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQzs7QUFFckM7QUFDQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlFQUFlLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd2FyZS1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL0Bhbm9uLWFhZGhhYXIvY29yZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZlcnNpb24uanM/MTRjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIHZlcnNpb24odXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxNSksIDE2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmVyc2lvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/core/node_modules/uuid/dist/esm-node/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@anon-aadhaar/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@anon-aadhaar/react/dist/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  AnonAadhaarProof: () => AnonAadhaarProof,\n  AnonAadhaarProvider: () => AnonAadhaarProvider,\n  LaunchProveModal: () => LaunchProveModal,\n  LogInWithAnonAadhaar: () => LogInWithAnonAadhaar,\n  processAadhaarArgs: () => processAadhaarArgs,\n  proveAndSerialize: () => proveAndSerialize,\n  useAnonAadhaar: () => useAnonAadhaar,\n  useProver: () => useProver,\n  verifySignature: () => verifySignature\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/hooks/useAnonAadhaar.ts\nvar import_react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_core = __webpack_require__(/*! @anon-aadhaar/core */ \"(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\");\nfunction useAnonAadhaar() {\n  const val = (0, import_react.useContext)(AnonAadhaarContext);\n  return [val.state, val.startReq];\n}\nvar AnonAadhaarContext = (0, import_react.createContext)({\n  state: { status: \"logged-out\" },\n  startReq: () => {\n  },\n  appName: \"\",\n  proverState: import_core.ProverState.Initializing,\n  useTestAadhaar: false\n});\n\n// src/provider/AnonAadhaarProvider.tsx\nvar import_react2 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_core4 = __webpack_require__(/*! @anon-aadhaar/core */ \"(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\");\nvar import_react3 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\n\n// src/prove.ts\nvar import_core3 = __webpack_require__(/*! @anon-aadhaar/core */ \"(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\");\n\n// src/verifySignature.ts\nvar import_core2 = __webpack_require__(/*! @anon-aadhaar/core */ \"(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\");\n\n// src/util.ts\nvar import_jsqr = __toESM(__webpack_require__(/*! jsqr */ \"(ssr)/./node_modules/jsqr/dist/jsQR.js\"));\nvar uploadQRpng = (e, setQrStatus) => {\n  return new Promise((resolve, reject) => {\n    if (e.target.files) {\n      try {\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(e.target.files[0]);\n        fileReader.onload = (e2) => {\n          if (e2.target && e2.target.result) {\n            try {\n              const image = new Image();\n              image.onload = () => {\n                const canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                const ctx = canvas.getContext(\"2d\");\n                if (!ctx)\n                  throw Error(\"Image cannot be reconstructed\");\n                ctx.drawImage(image, 0, 0);\n                const imageData = ctx.getImageData(\n                  0,\n                  0,\n                  image.width,\n                  image.height\n                );\n                const qrValue = (0, import_jsqr.default)(imageData.data, image.width, image.height);\n                if (qrValue != null) {\n                  resolve({\n                    qrValue: qrValue.data\n                  });\n                  setQrStatus(\"QR code scanned, verifying QR Code \\u{1F50E}\" /* QR_CODE_SCANNED */);\n                } else {\n                  setQrStatus(\"QR code invalid \\u274C\" /* ERROR_PARSING_QR */);\n                }\n              };\n              image.src = e2.target.result.toString();\n            } catch (error) {\n              setQrStatus(\"QR code invalid \\u274C\" /* ERROR_PARSING_QR */);\n              console.error(error);\n              reject(error);\n            }\n          }\n        };\n      } catch {\n        setQrStatus(null);\n        reject(new Error(\"No file selected\"));\n      }\n    }\n  });\n};\nfunction str2ab(str) {\n  const buf = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(buf);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\nvar createBlobURL = (icon) => {\n  const blob = new Blob([icon], { type: \"image/svg+xml\" });\n  return URL.createObjectURL(blob);\n};\n\n// src/verifySignature.ts\nvar import_node_forge = __webpack_require__(/*! node-forge */ \"(ssr)/./node_modules/node-forge/lib/index.js\");\n\n// src/publicKeys.ts\nvar testCertificate = `-----BEGIN CERTIFICATE-----\nMIID6jCCAtKgAwIBAgIBATANBgkqhkiG9w0BAQsFADBpMRQwEgYDVQQDEwtleGFt\ncGxlLm9yZzELMAkGA1UEBhMCVVMxETAPBgNVBAgTCFZpcmdpbmlhMRMwEQYDVQQH\nEwpCbGFja3NidXJnMQ0wCwYDVQQKEwRUZXN0MQ0wCwYDVQQLEwRUZXN0MB4XDTI0\nMDMwMTE2MTc0MFoXDTI1MDMwMTE2MTc0MFowaTEUMBIGA1UEAxMLZXhhbXBsZS5v\ncmcxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTETMBEGA1UEBxMKQmxh\nY2tzYnVyZzENMAsGA1UEChMEVGVzdDENMAsGA1UECxMEVGVzdDCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAJXoH3UGWVzCYq3c/d012AQFWyrfRtxxnFa1\nju4ZmZXvoaMlRxBiCseAHpdvROO+RU2w8ZDj99TjWYlyEXNE3lL894JvhJSIqVmn\ns9Iett0DRRZi6og+7u/eiJoUmbmkf5UExfCWwmK5bSPRl1AzLZ6X62FB0mHel5lN\nTEFjypy+PgdyIbRCU9z4FglCi2g1HuPptg0rNR/apu6MKKhFI5+X3nzA/l0UTkdI\nE/tD7Fg/gbTuMowiFnM0iY0hC6AXom7GiUDwXfIr2cyGu8OkNUOSNy1WYWd2m3Nb\noSyjWA+RnBvYunDEwqsKzysJvC+umB88ApWm4enySPUAcwlP+vECAwEAAaOBnDCB\nmTAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIC9DA7BgNVHSUENDAyBggrBgEFBQcD\nAQYIKwYBBQUHAwIGCCsGAQUFBwMDBggrBgEFBQcDBAYIKwYBBQUHAwgwEQYJYIZI\nAYb4QgEBBAQDAgD3MCwGA1UdEQQlMCOGG2h0dHA6Ly9leGFtcGxlLm9yZy93ZWJp\nZCNtZYcEfwAAATANBgkqhkiG9w0BAQsFAAOCAQEAjDnIK8R7ruSiJpdUeZ2ZxaGI\newf020sAc0ENw6x3jaKKFINNLnMqEKLntZzIg7WbjnKLhtUhb/SLHP59mfT2OJVS\nYMW7uRmnajfEd0MzfrXIUKBwCeWTCyP/bcdlJOT4u24ngFnkUyWaEKnqH3YuI8cw\nBKWQ26Lq7ODq6e6Otxf0KOtWTeVSzlCL66MGBvQ36LF1g8PLEZ9hvvX06ieaE99W\nHDK9/pGSuobx6Fi7ufzqymirT/GOuxslquB4mleCu4ArCg2qAVC2wDjQymgvq8FS\nbVukYnC6XdwqYhvIuTPnEys4gGdeirY+UPGQeqxMrNm+ZpKPTS0NwzxHwlhutw==\n-----END CERTIFICATE-----`;\nvar uidai_offline_publickey_26022021 = `-----BEGIN CERTIFICATE-----\nMIIHwjCCBqqgAwIBAgIEU5laMzANBgkqhkiG9w0BAQsFADCB/DELMAkGA1UEBhMC\nSU4xQTA/BgNVBAoTOEd1amFyYXQgTmFybWFkYSBWYWxsZXkgRmVydGlsaXplcnMg\nYW5kIENoZW1pY2FscyBMaW1pdGVkMR0wGwYDVQQLExRDZXJ0aWZ5aW5nIEF1dGhv\ncml0eTEPMA0GA1UEERMGMzgwMDU0MRAwDgYDVQQIEwdHdWphcmF0MSYwJAYDVQQJ\nEx1Cb2Rha2RldiwgUyBHIFJvYWQsIEFobWVkYWJhZDEcMBoGA1UEMxMTMzAxLCBH\nTkZDIEluZm90b3dlcjEiMCAGA1UEAxMZKG4pQ29kZSBTb2x1dGlvbnMgQ0EgMjAx\nNDAeFw0yMTAyMjYxMTU0MjRaFw0yNDAyMjcwMDI3MTFaMIHdMQswCQYDVQQGEwJJ\nTjExMC8GA1UEChMoVU5JUVVFIElERU5USUZJQ0FUSU9OIEFVVEhPUklUWSBPRiBJ\nTkRJQTEPMA0GA1UEERMGMTEwMDAxMQ4wDAYDVQQIEwVEZWxoaTEbMBkGA1UECRMS\nQkVISU5EIEtBTEkgTUFORElSMSQwIgYDVQQzExtBQURIQVIgSFEgQkFOR0xBIFNB\nSElCIFJPQUQxNzA1BgNVBAMTLkRTIFVOSVFVRSBJREVOVElGSUNBVElPTiBBVVRI\nT1JJVFkgT0YgSU5ESUEgMDUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQCiciwOXy3lunB+2T8DbsKx8LlVkyOQ+swPC8vyDIChXAiLSIaGa3LrJasL9Vov\n4Gtp7b1cyDt0x3CdshQebAfGi834WdPa9/P87SQdByBV3BVIhHS0XCyYL6lUqlKq\nb/+ySBhhxlCF2EtkFY6fQ9nzXKabSM6TAFIhAqTK4JO//UdLCNMtHQQG9of35VvS\nJqI4S/WKQcOEw5dPHHxRFYGckm3jrfPsu5kExIbx9dUwOXe+pjWENnMptcFor9yV\nEhcx9/SNQ6988x9pseO755Sdx6ixDAvd66ur3r6gdqHPgWat8GqKQd7fFDv/g129\nK9W7C2HSRywjSm1EEbybU2CVAgMBAAGjggNnMIIDYzAOBgNVHQ8BAf8EBAMCBsAw\nKgYDVR0lBCMwIQYIKwYBBQUHAwQGCisGAQQBgjcKAwwGCSqGSIb3LwEBBTCCAQIG\nA1UdIASB+jCB9zCBhgYGYIJkZAICMHwwegYIKwYBBQUHAgIwbgxsQ2xhc3MgMiBj\nZXJ0aWZpY2F0ZXMgYXJlIHVzZWQgZm9yIGZvcm0gc2lnbmluZywgZm9ybSBhdXRo\nZW50aWNhdGlvbiBhbmQgc2lnbmluZyBvdGhlciBsb3cgcmlzayB0cmFuc2FjdGlv\nbnMuMGwGBmCCZGQKATBiMGAGCCsGAQUFBwICMFQMUlRoaXMgY2VydGlmaWNhdGUg\ncHJvdmlkZXMgaGlnaGVyIGxldmVsIG9mIGFzc3VyYW5jZSBmb3IgZG9jdW1lbnQg\nc2lnbmluZyBmdW5jdGlvbi4wDAYDVR0TAQH/BAIwADAjBgNVHREEHDAagRhyYWh1\nbC5rdW1hckB1aWRhaS5uZXQuaW4wggFuBgNVHR8EggFlMIIBYTCCAR6gggEaoIIB\nFqSCARIwggEOMQswCQYDVQQGEwJJTjFBMD8GA1UEChM4R3VqYXJhdCBOYXJtYWRh\nIFZhbGxleSBGZXJ0aWxpemVycyBhbmQgQ2hlbWljYWxzIExpbWl0ZWQxHTAbBgNV\nBAsTFENlcnRpZnlpbmcgQXV0aG9yaXR5MQ8wDQYDVQQREwYzODAwNTQxEDAOBgNV\nBAgTB0d1amFyYXQxJjAkBgNVBAkTHUJvZGFrZGV2LCBTIEcgUm9hZCwgQWhtZWRh\nYmFkMRwwGgYDVQQzExMzMDEsIEdORkMgSW5mb3Rvd2VyMSIwIAYDVQQDExkobilD\nb2RlIFNvbHV0aW9ucyBDQSAyMDE0MRAwDgYDVQQDEwdDUkw1Njk0MD2gO6A5hjdo\ndHRwczovL3d3dy5uY29kZXNvbHV0aW9ucy5jb20vcmVwb3NpdG9yeS9uY29kZWNh\nMTQuY3JsMCsGA1UdEAQkMCKADzIwMjEwMjI2MTE1NDI0WoEPMjAyNDAyMjcwMDI3\nMTFaMBMGA1UdIwQMMAqACE0HvvGenfu9MB0GA1UdDgQWBBTpS5Cfqf2zdwqjupLA\nqMwk/bqX9DAZBgkqhkiG9n0HQQAEDDAKGwRWOC4xAwIDKDANBgkqhkiG9w0BAQsF\nAAOCAQEAbTlOC4sonzb44+u5+VZ3wGz3OFg0uJGsufbBu5efh7kO2DlYnx7okdEf\nayQQs6AUzDvsH1yBSBjsaZo3fwBgQUIMaNKdKSrRI0eOTDqilizldHqj113f4eUz\nU2j4okcNSF7TxQWMjxwyM86QsQ6vxZK7arhBhVjwp443+pxfSIdFUu428K6yH4JB\nGhZSzWuqD6GNhOhDzS+sS23MkwHFq0GX4erhVfN/W7XLeSjzF4zmjg+O77vTySCN\ne2VRYDrfFS8EAOcO4q7szc7+6xdg8RlgzoZHoRG/GqUp9inpJUn7OIzhHi2e8Mll\naMdtXo0nbr150tMe8ZSvY2fMiTCY1w==\n-----END CERTIFICATE-----\n`;\nvar uidai_offline_publickey_17022026 = `-----BEGIN CERTIFICATE-----\nMIIHCjCCBfKgAwIBAgIEYklh9TANBgkqhkiG9w0BAQsFADCBkTELMAkGA1UEBhMC\nSU4xQTA/BgNVBAoTOEd1amFyYXQgTmFybWFkYSBWYWxsZXkgRmVydGlsaXplcnMg\nYW5kIENoZW1pY2FscyBMaW1pdGVkMQ8wDQYDVQQLEwZTdWItQ0ExLjAsBgNVBAMT\nJShuKUNvZGUgU29sdXRpb25zIFN1Yi1DQSBmb3IgRFNDIDIwMjIwHhcNMjQwMjIx\nMTIyMzE5WhcNMjYwMjE2MjIyNzQwWjCB8zELMAkGA1UEBhMCSU4xMTAvBgNVBAoT\nKFVOSVFVRSBJREVOVElGSUNBVElPTiBBVVRIT1JJVFkgT0YgSU5ESUExDzANBgNV\nBBETBjExMDAwMTEOMAwGA1UECBMFRGVsaGkxODA2BgNVBAkTL0JhbmdsYSBTYWhp\nYiBSb2FkIEJlaGluZCBLYWxpIE1hbmRpciBHb2xlTWFya2V0MR0wGwYDVQQzExRB\nYWRoYWFyIEhlYWRxdWFydGVyczE3MDUGA1UEAxMuRFMgVW5pcXVlIElkZW50aWZp\nY2F0aW9uIEF1dGhvcml0eSBvZiBJbmRpYSAwNTCCASIwDQYJKoZIhvcNAQEBBQAD\nggEPADCCAQoCggEBAJjCCSo9vCXEzdQe9qdv6YMwwqILobP62yF4Df8mzTYdDVTq\n2VdipZa5k+VTmJTKwAabyKeyVP5+oZmt/zteJ+5754Cf8t3KJYfK5O5rA8FQDu2b\nlQ/hgs32mDyy5FEvsKh+zOxThyJ/6ciaNUZMZvfJTt3cqMeUbixtlKpuyX1SKJpt\nLe0CiaDOa3/CTbz13cLMTfPXlpU9gX+wRf/xtxSohe2R37yMsqrXv96K0URvzPNE\nKi6wz9USHjmud2U4CC13MkDm9smTqjR94jdrkikbLrDTte06ORTm9ifR3ecCDLg7\n988ODFk6ygFrk2KJ/dEEnhkSr9XeQEDUbdMeXUsCAwEAAaOCAwQwggMAMA4GA1Ud\nDwEB/wQEAwIGwDAqBgNVHSUEIzAhBggrBgEFBQcDBAYKKwYBBAGCNwoDDAYJKoZI\nhvcvAQEFMIIBAgYDVR0gBIH6MIH3MIGGBgZggmRkAgIwfDB6BggrBgEFBQcCAjBu\nDGxDbGFzcyAyIGNlcnRpZmljYXRlcyBhcmUgdXNlZCBmb3IgZm9ybSBzaWduaW5n\nLCBmb3JtIGF1dGhlbnRpY2F0aW9uIGFuZCBzaWduaW5nIG90aGVyIGxvdyByaXNr\nIHRyYW5zYWN0aW9ucy4wbAYGYIJkZAoBMGIwYAYIKwYBBQUHAgIwVAxSVGhpcyBj\nZXJ0aWZpY2F0ZSBwcm92aWRlcyBoaWdoZXIgbGV2ZWwgb2YgYXNzdXJhbmNlIGZv\nciBkb2N1bWVudCBzaWduaW5nIGZ1bmN0aW9uLjAMBgNVHRMBAf8EAjAAMCIGA1Ud\nEQQbMBmBF2Rpci5sY2ktaHFAdWlkYWkubmV0LmluMIIBAAYDVR0fBIH4MIH1MEKg\nQKA+hjxodHRwOi8vd3d3Lm5jb2Rlc29sdXRpb25zLmNvbS9yZXBvc2l0b3J5L25j\nb2RlY2EyMnN1YmNhMS5jcmwwga6ggauggaikgaUwgaIxCzAJBgNVBAYTAklOMUEw\nPwYDVQQKEzhHdWphcmF0IE5hcm1hZGEgVmFsbGV5IEZlcnRpbGl6ZXJzIGFuZCBD\naGVtaWNhbHMgTGltaXRlZDEPMA0GA1UECxMGU3ViLUNBMS4wLAYDVQQDEyUobilD\nb2RlIFNvbHV0aW9ucyBTdWItQ0EgZm9yIERTQyAyMDIyMQ8wDQYDVQQDEwZDUkwx\nODMwKwYDVR0QBCQwIoAPMjAyNDAyMjExMjIzMTlagQ8yMDI2MDIxNjIyMjc0MFow\nHwYDVR0jBBgwFoAURsE2obZEOWzewDFm8UhoheJjvzswHQYDVR0OBBYEFKzhXAem\nTyikhe8ZRfMcBEnWfEfTMBkGCSqGSIb2fQdBAAQMMAobBFY4LjMDAgMoMA0GCSqG\nSIb3DQEBCwUAA4IBAQAw7POBP18z1+IG4bjBk6vgfIyTH6Vz+e1j7jcmG+sUfY0E\nGVKonznB87M4hNcVcylDrwZscJwZxKaYUAt/q1Uph46v37jRjZyAvawZBD/oL1lS\nqUmIGQxI+zqUFYrc5dWSHROoCGfkyHAskr60Y3tN489NKo+AsFC1iu1dY29FW2hK\nWt1dQEDYkTeYJu8WPf/XaOR562gq566IFgL6cpYujNrMuKOGj+5o2UbjmCTjkbTp\nHdTU+Mja3mYfUDdBia4YVQwDXB07xZD7FiMbhm1oYsATfjiFA1jCy3X8q9dsFkMe\ntMjs/7td7cCA1L45savQhcL7+c902NZMolXgRnFx\n-----END CERTIFICATE-----\n`;\n\n// src/verifySignature.ts\nvar verifyRSASha256WithSubtle = async (certificate, signature, signedData) => {\n  const publicKey = import_node_forge.pki.certificateFromPem(certificate).publicKey;\n  const publicKeyPem = import_node_forge.pki.publicKeyToPem(publicKey);\n  const pemHeader = \"-----BEGIN PUBLIC KEY-----\";\n  const pemFooter = \"-----END PUBLIC KEY-----\";\n  const pemContents = publicKeyPem.substring(\n    pemHeader.length,\n    publicKeyPem.length - pemFooter.length - 2\n  );\n  const binaryDerString = window.atob(pemContents);\n  const binaryDer = str2ab(binaryDerString);\n  const pk = await window.crypto.subtle.importKey(\n    \"spki\",\n    binaryDer,\n    { name: \"RSASSA-PKCS1-v1_5\", hash: \"SHA-256\" },\n    true,\n    [\"verify\"]\n  );\n  const isSignatureValid = await window.crypto.subtle.verify(\n    { name: \"RSASSA-PKCS1-v1_5\" },\n    pk,\n    signature.buffer,\n    signedData.buffer\n  );\n  return { isSignatureValid, certificate };\n};\nvar verifySignature = async (qrData, useTestAadhaar) => {\n  const bigIntData = BigInt(qrData);\n  const byteArray = (0, import_core2.convertBigIntToByteArray)(bigIntData);\n  const decompressedByteArray = (0, import_core2.decompressByteArray)(byteArray);\n  const signature = decompressedByteArray.slice(\n    decompressedByteArray.length - 256,\n    decompressedByteArray.length\n  );\n  const signedData = decompressedByteArray.slice(\n    0,\n    decompressedByteArray.length - 256\n  );\n  if (useTestAadhaar) {\n    const { isSignatureValid, certificate } = await verifyRSASha256WithSubtle(\n      testCertificate,\n      signature,\n      signedData\n    );\n    return isSignatureValid ? { isSignatureValid, certificate } : { isSignatureValid };\n  } else {\n    const results = await Promise.all([\n      verifyRSASha256WithSubtle(\n        uidai_offline_publickey_26022021,\n        signature,\n        signedData\n      ),\n      verifyRSASha256WithSubtle(\n        uidai_offline_publickey_17022026,\n        signature,\n        signedData\n      )\n    ]);\n    const validResult = results.find((result) => result.isSignatureValid);\n    return validResult ? { isSignatureValid: true, certificate: validResult.certificate } : { isSignatureValid: false };\n  }\n};\n\n// src/prove.ts\nvar proveAndSerialize = async (anonAadhaarArgs, setProverState) => {\n  let anonAadhaarProof;\n  let serialized;\n  try {\n    anonAadhaarProof = await (0, import_core3.prove)(anonAadhaarArgs, setProverState);\n    serialized = await (0, import_core3.serialize)(anonAadhaarProof);\n  } catch (e) {\n    console.error(e);\n    throw new Error(\"Error while generating the proof\");\n  }\n  return { anonAadhaarProof, serialized };\n};\nvar processAadhaarArgs = async (qrData, useTestAadhaar, nullifierSeed, fieldsToRevealArray, signal) => {\n  let certificateFile = null;\n  try {\n    if (useTestAadhaar) {\n      return (0, import_core3.generateArgs)({\n        qrData,\n        certificateFile: testCertificate,\n        nullifierSeed,\n        fieldsToRevealArray,\n        signal\n      });\n    } else {\n      const { isSignatureValid, certificate } = await verifySignature(\n        qrData,\n        useTestAadhaar\n      );\n      if (!certificate)\n        throw new Error(\n          \"[processAadhaarArgs]: Error while processing the arguments, no certificate retrieved\"\n        );\n      if (isSignatureValid)\n        certificateFile = certificate;\n      if (!certificateFile)\n        throw Error(\"Error while fetching public key.\");\n      return (0, import_core3.generateArgs)({\n        qrData,\n        certificateFile,\n        nullifierSeed,\n        fieldsToRevealArray,\n        signal\n      });\n    }\n  } catch (error) {\n    if (error instanceof Error)\n      throw new Error(error.message);\n    throw new Error(JSON.stringify(error));\n  }\n};\n\n// src/provider/AnonAadhaarProvider.tsx\nvar import_jsx_runtime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nfunction AnonAadhaarProvider(anonAadhaarProviderProps) {\n  const [anonAadhaarProofStr, setAnonAadhaarProofStr] = (0, import_react2.useState)(null);\n  const [anonAadhaarProof, setAnonAadhaarProof] = (0, import_react2.useState)(null);\n  const [appName, setAppName] = (0, import_react2.useState)(\"The current application\");\n  const [proverState, setProverState] = (0, import_react2.useState)(\n    import_core4.ProverState.Initializing\n  );\n  const [useTestAadhaar, setUseTestAadhaar] = (0, import_react2.useState)(false);\n  const [state, setState] = (0, import_react2.useState)({\n    status: \"logged-out\"\n  });\n  (0, import_react2.useEffect)(() => {\n    if (anonAadhaarProviderProps._appName !== void 0)\n      setAppName(anonAadhaarProviderProps._appName);\n    if (anonAadhaarProviderProps._useTestAadhaar)\n      setUseTestAadhaar(true);\n  }, [\n    anonAadhaarProviderProps._appName,\n    anonAadhaarProviderProps._useTestAadhaar\n  ]);\n  (0, import_react2.useEffect)(() => {\n    let anonAadhaarInitArgs;\n    if (anonAadhaarProviderProps._artifactslinks) {\n      anonAadhaarInitArgs = {\n        wasmURL: anonAadhaarProviderProps._artifactslinks.wasm_url,\n        zkeyURL: anonAadhaarProviderProps._artifactslinks.zkey_url,\n        vkeyURL: anonAadhaarProviderProps._artifactslinks.vkey_url,\n        artifactsOrigin: import_core4.ArtifactsOrigin.server\n      };\n    } else {\n      anonAadhaarInitArgs = {\n        wasmURL: import_core4.artifactUrls.v2.wasm,\n        zkeyURL: import_core4.artifactUrls.v2.chunked,\n        vkeyURL: import_core4.artifactUrls.v2.vk,\n        artifactsOrigin: import_core4.ArtifactsOrigin.chunked\n      };\n    }\n    (0, import_core4.init)(anonAadhaarInitArgs).then().catch((e) => {\n      throw Error(e);\n    });\n  }, [anonAadhaarProviderProps._artifactslinks]);\n  (0, import_react2.useEffect)(() => {\n    readFromLocalStorage().then(setAndWriteState);\n  }, []);\n  const setAndWriteState = (newState) => {\n    console.log(`[ANON-AADHAAR] new state ${shallowToString(newState)}`);\n    setState(newState);\n    writeToLocalStorage(newState);\n  };\n  const startReq = import_react3.default.useCallback(\n    (request) => {\n      console.log(`[ANON-AADHAAR] startReq ${shallowToString(request)}`);\n      setAndWriteState(\n        handleLoginReq(\n          request,\n          state,\n          setAnonAadhaarProofStr,\n          setAnonAadhaarProof,\n          setProverState\n        )\n      );\n    },\n    [setAndWriteState, setAnonAadhaarProofStr, setAnonAadhaarProof]\n  );\n  import_react3.default.useEffect(() => {\n    if (anonAadhaarProofStr === null || anonAadhaarProof === null)\n      return;\n    console.log(`[ANON-AADHAAR] trying to log in with ${anonAadhaarProofStr}`);\n    handleLogin(state, anonAadhaarProofStr, anonAadhaarProof, useTestAadhaar).then((newState) => {\n      if (newState)\n        setAndWriteState(newState);\n      else\n        console.log(\n          `[ANON-AADHAAR] ${state.status}, ignoring anonAadhaarProof: ${anonAadhaarProofStr}`\n        );\n    }).catch((e) => {\n      setAndWriteState({ status: \"logged-out\" });\n      console.error(e);\n      console.error(\n        `[ANON-AADHAAR] error logging in, ignoring anonAadhaarProof: ${anonAadhaarProofStr}`\n      );\n    });\n  }, [anonAadhaarProofStr]);\n  const val = import_react3.default.useMemo(\n    () => ({ state, startReq, proverState, appName, useTestAadhaar }),\n    [state, proverState, appName, useTestAadhaar]\n  );\n  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AnonAadhaarContext.Provider, { value: val, children: anonAadhaarProviderProps.children });\n}\nasync function readFromLocalStorage() {\n  const json = window.localStorage[\"anonAadhaar\"];\n  try {\n    const state = await parseAndValidate(json);\n    console.log(`[ANON-AADHAAR] read stored state: ${shallowToString(state)}`);\n    return state;\n  } catch (e) {\n    console.error(`[ANON-AADHAAR] error parsing stored state: ${e}`);\n    return { status: \"logged-out\" };\n  }\n}\nfunction writeToLocalStorage(state) {\n  console.log(`[ANON-AADHAAR] writing to local storage, status ${state.status}`);\n  window.localStorage[\"anonAadhaar\"] = serialize2(state);\n}\nfunction serialize2(state) {\n  const { status } = state;\n  let serState;\n  if (status === \"logged-out\") {\n    serState = {\n      status: \"logged-out\"\n    };\n  } else {\n    serState = {\n      status,\n      anonAadhaarProofs: state.anonAadhaarProofs\n    };\n  }\n  return JSON.stringify(serState);\n}\nasync function parseAndValidate(json) {\n  if (json == null || json.trim() === \"\") {\n    return { status: \"logged-out\" };\n  }\n  const stored = JSON.parse(json);\n  if (![\"logged-out\", \"logged-in\"].includes(stored.status)) {\n    throw new Error(`Invalid status ${stored.status}`);\n  }\n  if (stored.status === \"logged-out\") {\n    return { status: stored.status };\n  }\n  const { status, anonAadhaarProofs } = stored;\n  if (anonAadhaarProofs == null) {\n    throw new Error(`Missing serialized AnonAadhaarProof`);\n  } else if (anonAadhaarProofs[0].type !== import_core4.AnonAadhaarCorePackage.name) {\n    throw new Error(\n      `Invalid AnonAadhaarProof type ${anonAadhaarProofs[0].type}`\n    );\n  }\n  return {\n    status,\n    anonAadhaarProofs\n  };\n}\nfunction shallowToString(obj) {\n  return JSON.stringify(obj, function(key, val) {\n    if (key === \"\")\n      return val;\n    if (val == null)\n      return null;\n    if (typeof val === \"bigint\")\n      return \"\" + val;\n    if (Array.isArray(val))\n      return \"<array>\";\n    if (typeof val === \"object\")\n      return \"<object>\";\n    return val;\n  });\n}\nfunction handleLoginReq(request, state, setAnonAadhaarStr, setAnonAadhaar, setProverState) {\n  const { type } = request;\n  switch (type) {\n    case \"login\":\n      try {\n        const { args } = request;\n        proveAndSerialize(args, setProverState).then(\n          ({\n            anonAadhaarProof,\n            serialized\n          }) => {\n            setAnonAadhaarStr(serialized);\n            setAnonAadhaar(anonAadhaarProof);\n          }\n        );\n      } catch (error) {\n        console.log(error);\n      }\n      return {\n        status: \"logging-in\",\n        ...state.status !== \"logged-out\" ? {\n          anonAadhaarProofs: state.anonAadhaarProofs\n        } : {}\n      };\n    case \"logout\":\n      return { status: \"logged-out\" };\n    default:\n      throw new Error(`Invalid request type ${type}`);\n  }\n}\nasync function handleLogin(state, _anonAadhaarProofStr, _anonAadhaarProof, useTestAadhaar) {\n  if (state.status !== \"logging-in\") {\n    console.log(\n      `[ANON-AADHAAR] ignoring message. State != logging-in: ${state}`\n    );\n    return null;\n  }\n  if (!await (0, import_core4.verify)(_anonAadhaarProof, useTestAadhaar)) {\n    throw new Error(\"Invalid proof\");\n  }\n  const index = state.anonAadhaarProofs === void 0 ? 0 : Object.keys(state.anonAadhaarProofs).length;\n  return {\n    status: \"logged-in\",\n    anonAadhaarProofs: {\n      ...state.anonAadhaarProofs,\n      [index]: _anonAadhaarProofStr\n    }\n  };\n}\n\n// src/components/AnonAadhaarProof.tsx\nvar import_react4 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_styled_components = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\nvar import_jsx_runtime2 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar AnonAadhaarProof = ({\n  code,\n  label\n}) => {\n  const [collapsed, setCollapsed] = (0, import_react4.useState)(true);\n  const toggle = (0, import_react4.useCallback)(() => {\n    setCollapsed((collapsed2) => !collapsed2);\n  }, []);\n  let buttonText = collapsed ? \"Show proof\" : \"Hide proof\";\n  if (label !== void 0) {\n    buttonText += \" \" + label;\n  }\n  if (collapsed) {\n    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RevealProofBtn, { onClick: toggle, children: buttonText });\n  }\n  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [\n    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RevealProofBtn, { onClick: toggle, children: buttonText }),\n    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ProofContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(\"pre\", { children: code }) })\n  ] });\n};\nvar ProofContainer = import_styled_components.default.div`\n  border-radius: 8px;\n  border: 1px solid grey;\n  overflow-y: scroll;\n  max-width: 100%;\n  padding: 8px;\n`;\nvar RevealProofBtn = import_styled_components.default.button`\n  font-size: 1rem;\n  cursor: pointer;\n  color: #000000;\n  font-weight: bold;\n  border-radius: 1.3125rem;\n  background: #fff;\n  box-shadow: 0px 3px 8px 1px rgba(0, 0, 0, 0.25);\n  border: none;\n  min-width: 8rem;\n  min-height: 2rem;\n  border-radius: 0.5rem;\n`;\n\n// src/components/LogInWithAnonAadhaar.tsx\nvar import_react12 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n// src/components/ProveModal/Modal.tsx\nvar import_react11 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_styled_components9 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\n\n// src/components/ProveModal/ErrorToast.tsx\nvar import_react5 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_styled_components2 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\nvar import_jsx_runtime3 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar ErrorToast = ({\n  message,\n  setErrorMessage\n}) => {\n  const [isVisible, setIsVisible] = (0, import_react5.useState)(false);\n  (0, import_react5.useEffect)(() => {\n    if (message)\n      setIsVisible(true);\n  }, [message]);\n  const handleClose = () => {\n    setIsVisible(false);\n    setErrorMessage(null);\n  };\n  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, { children: isVisible && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(Box, { children: [\n    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Message, { children: message }),\n    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CloseButton, { onClick: handleClose })\n  ] }) });\n};\nvar Box = import_styled_components2.default.div`\n  display: flex;\n  position: absolute;\n  width: 85%;\n  border-radius: 5px;\n  background-color: #efc8c8;\n  padding: 4px;\n  align-items: flex-start;\n`;\nvar Message = import_styled_components2.default.div`\n  text-align: left;\n  margin-left: 3px;\n  font-size: 0.875rem;\n  color: #a00f0f;\n  flex: 1;\n  width: fit-content;\n  max-width: 92%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\nvar CloseButton = import_styled_components2.default.button`\n  border: none;\n  background: none;\n  color: #a00f0f;\n  cursor: pointer;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: 2px;\n    height: 12px;\n    background-color: currentColor;\n  }\n\n  &::before {\n    transform: rotate(45deg);\n  }\n\n  &::after {\n    transform: rotate(-45deg);\n  }\n`;\n\n// src/components/ProveModal/VerifyModal.tsx\nvar import_styled_components4 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\n\n// src/components/FileInput.tsx\nvar import_react6 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_styled_components3 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\n\n// src/components/MainIcons.ts\nvar icons = {\n  aalogo: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"173\" height=\"173\" fill=\"none\"><path fill=\"#FD8B0E\" d=\"M80.39.81v22.03c0 .45-.36.81-.81.81H31.52c-4.2 0-7.6 3.4-7.6 7.6V79.7c0 .45-.36.81-.81.81H.81c-.45 0-.81-.36-.81-.81V53.47c0-3.69 1.47-7.24 4.08-9.85l39.5-39.49c2.6-2.6 6.13-4.07 9.82-4.08L79.57 0c.45 0 .82.36.82.81\"/><path fill=\"#081224\" d=\"M91.85.81v22.03c0 .45.36.81.81.81h48.05c4.2 0 7.6 3.4 7.6 7.6V79.7c0 .45.36.81.81.81h22.29c.45 0 .81-.36.81-.81V53.47c0-3.69-1.47-7.24-4.08-9.85L128.66 4.13a13.94 13.94 0 0 0-9.82-4.08L92.67 0c-.45 0-.82.36-.82.81M80.39 171.56v-22.03c0-.45-.36-.81-.81-.81H31.52c-4.2 0-7.6-3.4-7.6-7.6V92.67c0-.45-.36-.81-.81-.81H.81c-.45 0-.81.36-.81.81v26.23c0 3.69 1.47 7.24 4.08 9.85l39.5 39.5c2.61 2.61 6.14 4.07 9.82 4.08l26.18.05c.45 0 .82-.36.82-.81z\"/><path fill=\"#009A08\" d=\"M91.85 171.56v-22.03c0-.45.36-.81.81-.81h48.05c4.2 0 7.6-3.4 7.6-7.6V92.67c0-.45.36-.81.81-.81h22.29c.45 0 .81.36.81.81v26.23c0 3.69-1.47 7.24-4.08 9.85l-39.5 39.5a13.934 13.934 0 0 1-9.82 4.08l-26.18.05c-.45 0-.82-.36-.82-.81z\"/></svg>',\n  illustration: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"82\" height=\"82\" fill=\"none\"><path fill=\"#191919\" d=\"M46.733 19.72c-1.386-2.03-4.097-1.749-6.242-1.734-5 .033-25.743.008-27.2.08-2.244.116-4.497 1.025-4.861 3.258-.197 1.206-.022 2.496.023 3.712.18 4.921.316 11.01.922 15.395.164 1.193.38 2.388 1.122 3.374 1.171 1.556 3.492 2.103 5.44 2.136.022.038 17.84.457 24.28-.025 1.875-.14 4.156-.282 5.42-1.885.633-.805.686-1.964.813-2.94.456-3.504.76-9.433 1.158-15.791.114-1.816.202-4.002-.875-5.58m.492 4.424c-.013.727-.555 9.325-.59 9.846-.12 1.764-.509 7.313-1.01 9.046-.496 1.71-2.724 2.131-4.238 2.292a51.503 51.503 0 0 1-3.863.26c-6.62.214-20.998.17-21.574.154-2.332-.108-4.949-.791-5.828-3.211a13.11 13.11 0 0 1-.534-3.384c-.438-5.278-.37-6.87-.707-14.994-.048-1.163-.285-2.53.248-3.618 1.17-2.376 4.702-2.043 6.866-2.067 2.545-.028 24.146-.044 25.483-.055 1.189-.01 2.472-.07 3.58.446 1.996.93 2.202 3.345 2.167 5.283zM28.015 47.531c.312.704 1.48.348 1.072-.592a.592.592 0 0 0-.879-.258c-.248.17-.465.627-.185.87a.08.08 0 0 0 .124-.012.08.08 0 0 0 .014-.045c.017-.186-.02-.384.135-.523a.368.368 0 0 1 .574.061.431.431 0 0 1-.075.583.49.49 0 0 1-.65-.16c-.051-.084-.168-.01-.13.076M26.426 51.863c.628.107 1.264.15 1.9.13.694.02 1.392.044 2.086.04a.178.178 0 0 0 0-.357c-.694-.028-1.392-.03-2.086-.033a9.359 9.359 0 0 0-1.9.063.083.083 0 0 0-.042.128c.01.014.026.024.042.03\"/><path fill=\"#191919\" d=\"M49.812 18.044a4.262 4.262 0 0 0-2.337-2.22c-1.325-.52-2.8-.438-4.195-.425-5.942.055-30.336.037-32.016.106a7.593 7.593 0 0 0-3.727 1.034c-2.533 1.6-1.955 4.27-1.854 7.262.195 5.755.343 12.898.988 18.013.17 1.347.357 2.71 1.08 3.891 1.292 2.106 3.908 2.901 6.369 2.891.095 0 5.565.131 11.839.178.01.331.075.697.112 1.046-.137-.017-3.82.075-4.903.23a.156.156 0 0 0-.113.21c-.555.47-1.046 1.051-1.552 1.564-.622.628-1.28 1.237-1.86 1.903a.133.133 0 0 0 .187.188c.652-.598 1.244-1.27 1.857-1.907.51-.532 1.094-1.046 1.554-1.627a45.948 45.948 0 0 1 4.856-.175c.003.264-.011.577.251.71.04.022.11.007.118-.048.02-.35.005-.7-.043-1.046a3.288 3.288 0 0 0-.195-1.045c1.462.01 2.964.015 4.449.013a3.567 3.567 0 0 0-.08 1.859.095.095 0 0 0 .18 0 2.31 2.31 0 0 0 .093-.538c.823.11 1.504.033 3.721.172.337.02.817.026 1.1.024a8.072 8.072 0 0 0 1.461 1.538c.541.532 1.111 1.033 1.707 1.501.144.109.322-.129.193-.25-.574-.524-1.177-1.015-1.75-1.543a15.075 15.075 0 0 0-1.395-1.314.111.111 0 0 0-.048-.13 2.664 2.664 0 0 0-1.063-.167c-.48-.03-.96-.054-1.44-.07-.819-.081-1.643-.11-2.466-.086.023-.357.084-.686.087-.996 4.236-.01 8.298-.083 10.846-.285 2.163-.172 4.81-.298 6.29-2.132.767-.948.839-2.26.99-3.425.635-4.92.901-12.521 1.303-18.152.162-2.21.352-4.681-.594-6.752m.26 5.067c-.023.68-.62 10.508-.683 11.488-.136 2.065-.582 8.506-1.144 10.524-.543 1.95-2.943 2.52-4.684 2.732a51.73 51.73 0 0 1-4.504.328c-7.638.26-24.618.165-24.922.154-2.77-.121-5.716-1.018-6.666-3.912-.42-1.28-.471-2.677-.578-4.013-.42-5.297-.391-6.99-.764-17.321-.05-1.37-.293-2.89.097-4.226.917-3.134 5.046-2.929 7.593-2.962 3.013-.04 28.773-.071 30.311-.08 1.386-.008 2.879.027 4.053.865 1.944 1.386 1.967 4.277 1.892 6.422zM3.215 64.738c.243-.345 5.932-6.756 6.215-7.075a1.717 1.717 0 0 1 1.467-.603c3.875-.023 7.751-.047 11.626.015 7.231.118 23.137-.287 23.67-.282.523.006 1.198-.115 1.597.269.38.366 4.316 5.719 5.691 7.152.214.223.552-.115.339-.338-1.347-1.405-4.71-5.932-5.259-6.616a2.778 2.778 0 0 0-.764-.812c-.686-.342-8.65.075-12.054.153-4.03.092-2.993.02-24.419.015-.948 0-1.619.04-2.243.816-.718.893-5.823 6.814-6.052 7.196-.071.122.107.22.186.11M53.128 66.26c.351-.598 1.079-1.576.73-1.689-.54-.172-50.546.289-50.546.289s-.962.025-.04.883c.922.857.965 1.077 2.63 1.012 1.664-.064 42.49-.194 43.629-.176 1.138.018 3.374.06 3.597-.319\"/><path fill=\"#191919\" d=\"M8.526 60.692c-.354.438-1.925 2.053-1.989 2.453a.174.174 0 0 0 .077.188c.214.138 6.734 0 8.187-.005 3.07-.013 24.83.12 25.381.128.421.005.72-.084.513-.556-.703-1.608-1.402-3.217-2.116-4.82-.182-.407-.327-.462-.764-.46 0 0-26.107 0-26.933-.01a.149.149 0 0 0 0 .298c5.161.05 25.73-.014 27.178.072.117.007-.04-.265 2.258 4.918.033.072.024.201-.357.21-.264.006-25.514-.1-31.297-.057-.308 0-1.611.054-1.602-.023.032-.259 2.042-2.395 3.757-5.022.059-.09-.08-.165-.142-.083-.003-.001-1.366 1.796-2.151 2.769M41.396 62.223c.132.387.301.76.505 1.115.12.166.201.164.402.17 1.122.035 4.24-.107 7.36-.046.206.004 1.057.134 1.045-.201-.016-.492-1.511-2.231-3.573-5.448-.235-.368-.336-.39-.802-.37-.76.032-5.242.194-6.721.242-.197.006-.198.312 0 .306 7.633-.241 7.045-.26 7.092-.23.15.096.301.466.398.614.215.327 2.834 4.225 3.071 4.566.142.203.003.191-.281.186-.322-.007-7.309.038-7.536.036-.281-.004-.419-.553-.534-.798-1.474-3.151-1.71-3.637-2.112-4.294-.064-.104-.228-.072-.183.033.705 1.651 1.228 2.67 1.869 4.119\"/><path fill=\"#F2AE7F\" d=\"M23.74 26.961c-.133-1.717.603-3.482 1.326-4.222a4.21 4.21 0 0 1 5.554-.171 5.759 5.759 0 0 1 1.92 3.575c.078.329.361 1.16-.764 1.236-.08.006-.311-.197-.343-.26-.322-.623-.376-1.343-.648-1.988a3.582 3.582 0 0 0-1.725-1.896 2.417 2.417 0 0 0-2.48.232 3.69 3.69 0 0 0-1.189 2.232c-.367 2.346.55 4.007.783 4.107a.983.983 0 0 0 .412.05c1.106-.027 5.503-.201 6.55-.18.111.003.358.04.428.233.25.694.108 2.377.095 2.55-.054.663-.46.233-1.14.66-2.272-.281-3.067-.394-3.499-.27a.676.676 0 0 0-.426.32.694.694 0 0 0 .408.876c.33.146.727.192.992.335-.022.442.03.61.009 1.055a.77.77 0 0 0 .032.332.514.514 0 0 0 .41.281c.173.015.348 0 .516-.044a4.75 4.75 0 0 1 .273-1.625c.334.055.708.191 1.042.247.04.009-.293 1.113-.23 1.559.022.158.287.115.313.147.39.495.54.597.81.662.303.074.349.212.406.575.402 2.563-2.19 4.877-4.859 4.923-1.495.027-4.084 0-5.957-2.702a3.587 3.587 0 0 1-.684-2.017c.048-.174.128-.337.235-.482.647-.618 1.153-1.153 1.066-2.283-.072-.937-.456-1.786-1.35-1.953-.078-.014-.254-.28-.266-.358a9.533 9.533 0 0 1-.057-2.506.357.357 0 0 1 .156-.15c.504-.107 1.778-.033 2.279-.127a.49.49 0 0 0 .134-.38 9.466 9.466 0 0 1-.533-2.573\"/><path fill=\"#191919\" d=\"M38.797 29.258c-.046.755-.507 9.873-.32 10.614a.1.1 0 0 0 .098.072.102.102 0 0 0 .097-.072c.216-.703.222-9.724.21-10.614a.043.043 0 0 0-.042-.043.043.043 0 0 0-.043.043M58.86 32.705a4.651 4.651 0 0 0-3.388.274c-1.367.668-2.26 2.064-2.794 3.547a1.563 1.563 0 0 0-.792-.668c-.599-.223-1.794 0-1.827.796a.12.12 0 0 0 .206.084c.42-.336.876-.68 1.448-.467a1.06 1.06 0 0 1 .68.82 1.136 1.136 0 0 1-.647 1.127 1.389 1.389 0 0 1-1.609-.556c-.02-.024-.068-.02-.064.016.084.903 1.352 1.287 2.096.793-.379 2.206.095 4.806 2.095 5.823a4.169 4.169 0 0 0 5.692-1.916c.127-.262-.26-.492-.394-.23a3.703 3.703 0 0 1-4.581 1.922c-1.999-.644-2.622-2.922-2.466-4.81.119-1.211.457-2.39.999-3.48.37-.88.986-1.636 1.775-2.174a4.352 4.352 0 0 1 3.173-.526c1.751.377 2.778 2.431 2.618 4.078-.009.086.116.09.142.018.624-1.71-.696-3.897-2.363-4.47\"/><path fill=\"#191919\" d=\"M58.41 41.094c-.608.469-1.2.997-2.005 1.045-1.422.087-2.805-1.633-1.835-4.208.478-1.269 1.522-3.032 3.051-3.08a1.76 1.76 0 0 1 1.61.907c.197.39.092.801.234 1.19.04.11.223.17.283.037.385-.847-.208-1.89-.956-2.308-1.126-.629-2.408-.12-3.214.775-1.477 1.644-2.843 5.164-.486 6.704 1.177.77 2.633.087 3.428-.917.061-.073-.02-.216-.11-.145M29.34 32.979a4.936 4.936 0 0 1 1.718.086c2.65.327 5.288 1.008 6.985.893.062-.005.087-.103.015-.117-1.176-.224-2.386-.26-3.568-.464-1.132-.195-2.26-.418-3.398-.57a6.135 6.135 0 0 0-1.772-.142 1.126 1.126 0 0 0-1.046-.47c-1.352.01-1.642 1.475-1.134 2.342.16.273.364.52.603.729a.314.314 0 0 1 .09.348 39.27 39.27 0 0 1-.774 1.94.175.175 0 0 0 .012.163.173.173 0 0 0 .142.08c.79.022 1.613.053 2.401.036a.171.171 0 0 0 .167-.154.173.173 0 0 0-.01-.08c-.27-.695-.42-1.344-.696-2.014a.307.307 0 0 1 .088-.358 1.104 1.104 0 0 0 .378-.883c.644.246-.07 1.184.175 1.636.141.26.831.368 1.092.305.466-.114.338-1.304.49-1.557.093-.158.753.047.777.09a1.64 1.64 0 0 1-.076.373c-.066.361-.362 1.012.092 1.175.173.028.348.043.523.044.134.042.273.07.413.086.45-.035.344-.729.418-1.081.104-.503.364-.37.773-.294a37.46 37.46 0 0 0 3.71.634c.169.014.211-.275.04-.301-1.006-.152-1.998-.3-2.991-.519a6.425 6.425 0 0 0-1.453-.295c-.3.013-.313.23-.362.491a3.217 3.217 0 0 1-.143.882c-.125.186-.306.08-.506.062-.48-.043-.305-.279-.294-.344.044-.263.306-.942.066-1.163a2.648 2.648 0 0 0-1.006-.227c-.17.026-.197.11-.246.257-.057.22-.102.441-.135.665-.029.137.033.799-.5.644-.3-.118-.338-.161-.373-.487-.036-.326.148-.676.11-.996-.03-.246-.103-.268-.349-.326-.264-.062-.574-.035-.795-.22-.444-.372-.053-.796.349-.899M49.026 33.319v.071c0 .006.01.006.01 0 0-.023 0-.048.004-.071 0-.008-.014-.009-.014 0M17.623 54.048s21.258-.274 21.464-.23c.206.046-.05 1.42-.684 1.417-.633-.004-19.623.149-19.93.027-.307-.121-1.178-1.21-.85-1.214M61.926 35.055c.718.008 5.775-.568 6.485-.495.727.073 10.023 1.952 10.746 1.92.055 0 .09-.087.031-.114-.672-.306-9.827-2.09-10.686-2.168-.74-.064-5.3.285-6.584.791a.033.033 0 0 0 .008.066\"/><path fill=\"#191919\" d=\"M58.777 38.473c5.509.25 8.002-2.433 11.887-1.649.172.035.414.033.45-.138.04-.182-.209-.255-.39-.295a7.166 7.166 0 0 0-4.377.272 26.14 26.14 0 0 1-7.57 1.73.04.04 0 0 0-.03.068.04.04 0 0 0 .03.012\"/><path fill=\"#191919\" d=\"M59.245 39.578c1.792 2.044 5.152 1.198 7.425.8 2.237-.393 4.046.607 6.213.885.757.098 1.717.181 2.423-.17.126-.064.047-.225-.065-.239-.483-.059-1.22.189-2.797-.137-.975-.202-1.884-.563-2.838-.822-2.395-.643-4.745.764-7.114.569-2.89-.236-3.795-2.01-3.852-2.01.135.406.34.787.605 1.124M60.363 43.519c1.665.085 3.335.167 4.987.395 2.301.319 4.488 1.37 6.843 1.229 2.356-.14 4.592-1.096 6.963-1.116a.126.126 0 0 0 .064-.233c-1.254-.652-2.319.007-4.026.348-1.459.29-2.875.692-4.359.494-1.83-.245-3.559-.954-5.397-1.185a19.28 19.28 0 0 0-5.092-.043c-.063.011-.043.108.017.11M10.286 62.706l.003-.001v-.006l-.003-.001-.002.001v.006zM38.604 61.193c-.361-.006-.97-.01-1.775-.013-.194-.485.084.236-.7-1.741.705 0 1.245 0 1.575.004a.125.125 0 0 0 0-.25c-.338-.004-.916-.009-1.679-.012-.183-.442-.243-.51-.39-.588a.09.09 0 0 0-.11.017.09.09 0 0 0-.019.034c-.047.135-.053.217.058.535-1.41-.005-3.318-.007-5.45-.008a3.787 3.787 0 0 0-.326-.72.083.083 0 0 0-.154.04c.005.229.032.456.08.679-1.814 0-3.774 0-5.717.004l-.03-.513a.095.095 0 0 0-.094-.088.094.094 0 0 0-.094.088c-.017.171-.035.343-.05.514-2.026.002-4.022.007-5.81.012a1.032 1.032 0 0 0-.06-.459c-.018-.043-.075-.071-.11-.03a1.02 1.02 0 0 0-.214.49c-2.034.007-3.766.016-4.908.026.117-.182.215-.376.29-.58.061-.17-.197-.328-.315-.182-.199.249-.387.505-.566.768-.273.001-.547.006-.82.015a.082.082 0 0 0-.058.14.082.082 0 0 0 .058.023c.187.014.413.027.673.038-.955 1.42-.877 1.267-1.218 1.782a48.47 48.47 0 0 0-1.105.016.081.081 0 0 0-.082.082.082.082 0 0 0 .082.082c.225.016.55.03.961.04a7.85 7.85 0 0 0-.54.986.07.07 0 0 0 .078.102.07.07 0 0 0 .042-.032c.241-.35.51-.702.786-1.046 1.368.031 3.466.044 5.915.046a3.712 3.712 0 0 0-.21.953c-.007.117.145.133.202.054.21-.308.372-.647.479-1.005 1.955 0 4.11-.005 6.284-.013-.04.341-.002.686.113 1.01a.14.14 0 0 0 .19.05.14.14 0 0 0 .051-.05c.129-.321.181-.667.154-1.012 2.14-.008 4.284-.019 6.256-.028.087.314.211.617.37.902a.126.126 0 0 0 .233-.063 3.954 3.954 0 0 0-.132-.84c2.198-.01 4.159-.019 5.63-.019.134.371.317.723.544 1.046.057.076.22.066.208-.056a4.194 4.194 0 0 0-.252-.99c.719 0 1.29.003 1.678.01a.126.126 0 0 0 .115-.078.124.124 0 0 0-.117-.172m-27.523.022c.509-.624 1.02-1.223 1.386-1.756 1.226.04 2.97.058 4.979.065-.146.564-.323 1.12-.53 1.664-2.431.008-4.505.017-5.835.027m6.293-.028c.38-1.275.419-1.287.497-1.662 1.807.005 3.807 0 5.825-.01-.09 1.012-.061 1.057-.112 1.659-2.07.003-4.14.007-6.21.013m6.683-.014c-.023-.537.005-.683-.042-1.659 1.97-.009 3.946-.023 5.771-.036.1.393-.017-.103.46 1.69-1.952.001-4.073.002-6.189.005m6.66-.003-.504-1.695c2.141-.015 4.048-.029 5.447-.035.314.824.215.508.67 1.738a1774.75 1774.75 0 0 0-5.612-.008M48.372 61.506c-.216-.077-.409-.108-1.347-.096a22.81 22.81 0 0 0-1.212-2.085c.401.022.803-.014 1.194-.106a.127.127 0 0 0 0-.242 4.396 4.396 0 0 0-1.47-.073 33.517 33.517 0 0 0-.402-.588.109.109 0 0 0-.188.11l.274.49c-.67.024-1.755.07-2.466.102a3.967 3.967 0 0 0-.595-.74.072.072 0 0 0-.085-.01.072.072 0 0 0-.033.078c.066.239.153.47.26.693a7.32 7.32 0 0 0-1.429.123.082.082 0 0 0 0 .159c.532.11 1.077.139 1.618.087.215.395.458.78.66 1.153.163.3.316.622.48.938a6.609 6.609 0 0 0-1.542.116.08.08 0 0 0-.065.08.08.08 0 0 0 .065.078c.574.108 1.16.14 1.743.098.16.294.352.57.573.822.06.066.155-.006.14-.08a3.796 3.796 0 0 0-.235-.742c.855-.004 1.986-.014 2.534-.022.126.227.27.444.43.649.062.08.208.04.175-.073a4.88 4.88 0 0 0-.217-.58c.384.027.77-.006 1.144-.097a.126.126 0 0 0-.004-.242m-4.243-.02c-.196-.39-.425-.769-.625-1.131-.167-.301-.335-.633-.52-.956.603-.014 1.401-.036 2.47-.065.582 1.045.922 1.672 1.147 2.084-.532.008-1.053.026-2.472.066z\"/></svg>',\n  alert: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\"><path fill=\"#fff\" fill-rule=\"evenodd\" d=\"M12 4a8 8 0 1 0 0 16 8 8 0 0 0 0-16M2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12\" clip-rule=\"evenodd\"/><path fill=\"#fff\" d=\"M13 8a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0zM12 15a1 1 0 1 0 0 2 1 1 0 0 0 0-2\"/></svg>',\n  arrowDown: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\"><path fill=\"#fff\" fill-rule=\"evenodd\" d=\"M5.293 9.707a1 1 0 0 1 1.32-1.497l.094.083L12 13.585l5.293-5.292a1 1 0 0 1 1.32-.083l.094.083a1 1 0 0 1 .083 1.32l-.083.094-6 6a1 1 0 0 1-1.32.083l-.094-.083z\" clip-rule=\"evenodd\"/></svg>',\n  arrowUp: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\"><path fill=\"#fff\" fill-rule=\"evenodd\" d=\"M18.707 14.293a1 1 0 0 1-1.32 1.497l-.094-.083L12 10.415l-5.293 5.292a1 1 0 0 1-1.32.083l-.094-.083a1 1 0 0 1-.083-1.32l.083-.094 6-6a1 1 0 0 1 1.32-.083l.094.083z\" clip-rule=\"evenodd\"/></svg>',\n  arrow: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\"><path fill=\"#fff\" fill-rule=\"evenodd\" d=\"m16.58 11.012-2.29-2.285v-.01a.987.987 0 0 1 0-1.418c.39-.399 1.02-.399 1.42 0l4 3.992c.236.23.33.554.28.86a1 1 0 0 1-.39.656L15.7 16.7c-.19.18-.45.289-.71.289L15 17c-.27 0-.53-.11-.71-.29a.996.996 0 0 1-.01-1.417v-.01l2.28-2.275H5c-.56 0-1-.45-1-.998a.99.99 0 0 1 1-.998z\" clip-rule=\"evenodd\"/></svg>',\n  externalLink: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\"><path fill=\"#fff\" fill-rule=\"evenodd\" d=\"M20.383 3.076A.997.997 0 0 0 20 3h-5l-.117.007A1 1 0 0 0 14 4l.007.117A1 1 0 0 0 15 5h2.586l-8.293 8.293-.083.094a1 1 0 0 0 1.497 1.32L19 6.414V9l.007.117A1 1 0 0 0 21 9V4a1.001 1.001 0 0 0-.617-.924M11 6a1 1 0 0 1 .117 1.993L11 8H6a1 1 0 0 0-.993.883L5 9v9a1 1 0 0 0 .883.993L6 19h9a1 1 0 0 0 .993-.883L16 18v-5a1 1 0 0 1 1.993-.117L18 13v5a3 3 0 0 1-2.824 2.995L15 21H6a3 3 0 0 1-2.995-2.824L3 18V9a3 3 0 0 1 2.824-2.995L6 6z\" clip-rule=\"evenodd\"/></svg>',\n  menu: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\"><path fill=\"#fff\" fill-rule=\"evenodd\" d=\"M20 5a1 1 0 0 1 .117 1.993L20 7H4a1 1 0 0 1-.117-1.993L4 5zm0 6a1 1 0 0 1 .117 1.993L20 13H4a1 1 0 0 1-.117-1.993L4 11zm1 7a1 1 0 0 0-1-1H4l-.117.007A1 1 0 0 0 4 19h16l.117-.007A1 1 0 0 0 21 18\" clip-rule=\"evenodd\"/></svg>',\n  x: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\"><path fill=\"#fff\" fill-rule=\"evenodd\" d=\"M7.382 6.18a.857.857 0 0 0-1.13 1.283L10.787 12 6.25 16.537l-.071.08a.857.857 0 0 0 1.283 1.132L12 13.212l4.537 4.537.08.071a.857.857 0 0 0 1.132-1.283L13.212 12l4.537-4.537.071-.08a.857.857 0 0 0-1.283-1.132L12 10.788 7.463 6.25z\" clip-rule=\"evenodd\"/></svg>',\n  fileUpload: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\"><path fill=\"#081224\" fill-rule=\"evenodd\" d=\"M17 22zc1.65 0 3-1.35 3-3V8a1.011 1.011 0 0 0-.29-.71l-5-5A.966.966 0 0 0 14 2H7C5.34 2 4 3.34 4 5v14c0 1.65 1.34 3 3 3zM13 4H7c-.56 0-1 .44-1 1v14c0 .55.44 1 1 1h10c.55 0 1-.45 1-1V9h-3a2 2 0 0 1-2-2zm2 1.41V7h1.59zM12 18c-.56 0-1-.45-1-1v-3.585L9.71 14.71v-.01c-.4.39-1.03.39-1.42 0-.4-.4-.4-1.03 0-1.42l3-3c.38-.4 1.02-.4 1.41-.01l3 3c.39.38.39 1.02 0 1.41h-.01c-.19.18-.45.29-.71.29L15 15c-.27 0-.53-.11-.71-.29L13 13.414V17c0 .55-.45 1-1 1\" clip-rule=\"evenodd\"/></svg>',\n  xBlack: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\"><path fill=\"#334155\" fill-rule=\"evenodd\" d=\"M7.382 6.18a.857.857 0 0 0-1.13 1.283L10.787 12 6.25 16.537l-.071.08a.857.857 0 0 0 1.283 1.132L12 13.212l4.537 4.537.08.071a.857.857 0 0 0 1.132-1.283L13.212 12l4.537-4.537.071-.08a.857.857 0 0 0-1.283-1.132L12 10.788 7.463 6.25z\" clip-rule=\"evenodd\"/></svg>',\n  eyeOff: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"none\"><path fill=\"#B6B9C3\" d=\"M4.478 4.478c-1.54 1.159-2.39 2.71-2.776 3.577a2.315 2.315 0 0 0 0 1.89C2.356 11.41 4.42 15 9 15c1.906 0 3.395-.63 4.522-1.478l-1.074-1.074c-.872.61-1.997 1.052-3.448 1.052-3.641 0-5.332-2.83-5.927-4.165a.815.815 0 0 1 0-.67C3.418 7.89 4.166 6.55 5.48 5.603a.758.758 0 0 0 .067-.054z\"/><path fill=\"#B6B9C3\" d=\"M6.879 6.879a3 3 0 1 0 4.243 4.243L10.06 10.06A1.5 1.5 0 1 1 7.94 7.94zM9 3c4.582 0 6.646 3.59 7.298 5.055a2.316 2.316 0 0 1 0 1.89 9.937 9.937 0 0 1-.476.93.75.75 0 1 1-1.298-.75c.172-.298.305-.57.403-.79a.816.816 0 0 0 0-.67C14.333 7.33 12.642 4.5 9 4.5h-.75a.75.75 0 1 1 0-1.5z\"/><path fill=\"#B6B9C3\" fill-rule=\"evenodd\" d=\"M1.72 1.72a.75.75 0 0 1 1.06 0l13.5 13.5a.75.75 0 1 1-1.06 1.06L1.72 2.78a.75.75 0 0 1 0-1.06\" clip-rule=\"evenodd\"/></svg>',\n  eye: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"none\"><path fill=\"#009A08\" fill-rule=\"evenodd\" d=\"M9 4.5c-3.641 0-5.332 2.83-5.927 4.165a.816.816 0 0 0 0 .67C3.668 10.67 5.359 13.5 9 13.5c3.642 0 5.333-2.83 5.927-4.165a.816.816 0 0 0 0-.67C14.333 7.33 12.642 4.5 9 4.5M1.703 8.055C2.355 6.59 4.419 3 9 3c4.582 0 6.646 3.59 7.298 5.055a2.316 2.316 0 0 1 0 1.89C15.646 11.409 13.582 15 9 15c-4.581 0-6.645-3.59-7.297-5.055a2.316 2.316 0 0 1 0-1.89\" clip-rule=\"evenodd\"/><path fill=\"#009A08\" fill-rule=\"evenodd\" d=\"M9 6a3 3 0 1 0 0 6 3 3 0 0 0 0-6m-.064 1.501L9 7.5a1.5 1.5 0 1 1-1.499 1.436 1.125 1.125 0 0 0 1.435-1.435\" clip-rule=\"evenodd\"/></svg>'\n};\n\n// src/components/FileInput.tsx\nvar import_jsx_runtime4 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar FileInput = ({\n  onChange,\n  id,\n  setQrStatus,\n  qrStatus\n}) => {\n  const [fileName, setFileName] = (0, import_react6.useState)(null);\n  const fileInputRef = (0, import_react6.useRef)(null);\n  const uploadIcon = createBlobURL(icons.fileUpload);\n  const xIcon = createBlobURL(icons.xBlack);\n  const clearFileInput = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n      setFileName(null);\n      setQrStatus(null);\n    }\n  };\n  return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_jsx_runtime4.Fragment, { children: [\n    /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(InputFile, { htmlFor: id, children: [\n      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(\n        \"input\",\n        {\n          type: \"file\",\n          id,\n          ref: fileInputRef,\n          onChange: (e) => {\n            if (!e.target.files)\n              return;\n            setFileName(e.target.files[0].name);\n            onChange(e);\n          },\n          accept: \"image/*\",\n          hidden: true\n        }\n      ),\n      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FileUploadIcon, { src: uploadIcon }),\n      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FileName, { id: \"file-chosen\", children: \"Choose file\" })\n    ] }),\n    fileName && (() => {\n      switch (qrStatus) {\n        case \"QR code invalid \\u274C\" /* ERROR_PARSING_QR */:\n          return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_jsx_runtime4.Fragment, { children: [\n            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(InputFileWrong, { children: [\n              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FileName, { id: \"file-chosen\", children: fileName }),\n              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(\"button\", { onClick: clearFileInput, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FileUploadIcon, { src: xIcon }) })\n            ] }),\n            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(DocumentResultWrong, { children: \"Invalid QR Code.\" })\n          ] });\n        case \"Signature verified \\u2705\" /* SIGNATURE_VERIFIED */:\n          return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_jsx_runtime4.Fragment, { children: [\n            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(InputFileCorrect, { children: [\n              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FileName, { id: \"file-chosen\", children: fileName }),\n              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(\"button\", { onClick: clearFileInput, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FileUploadIcon, { src: xIcon }) })\n            ] }),\n            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(DocumentResultCorrect, { children: \"Valid QR Code.\" })\n          ] });\n        case \"QR code scanned, verifying QR Code \\u{1F50E}\" /* QR_CODE_SCANNED */:\n          return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_jsx_runtime4.Fragment, { children: [\n            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(FileNameContainer, { children: [\n              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FileName, { id: \"file-chosen\", children: fileName }),\n              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(\"button\", { onClick: clearFileInput, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(FileUploadIcon, { src: xIcon }) })\n            ] }),\n            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(DocumentResult, { children: \"Verifying QR Code.\" })\n          ] });\n      }\n    })()\n  ] });\n};\nvar FileName = import_styled_components3.default.span`\n  margin-left: 5px;\n`;\nvar InputFile = import_styled_components3.default.label`\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 80%;\n  border-radius: 4px;\n  border-width: 1px;\n  border-color: black;\n  max-width: 100%;\n  font-size: '16px';\n  line-height: 1.25rem;\n  color: #111827;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  padding-left: 14px;\n  padding-right: 14px;\n  cursor: pointer;\n  margin-top: 0.3rem;\n`;\nvar FileNameContainer = import_styled_components3.default.label`\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 80%;\n  border-radius: 4px;\n  border-width: 1px;\n  border-color: black;\n  max-width: 100%;\n  font-size: '16px';\n  line-height: 1.25rem;\n  color: #111827;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  padding-left: 14px;\n  padding-right: 14px;\n  cursor: pointer;\n  margin-top: 0.3rem;\n`;\nvar InputFileCorrect = import_styled_components3.default.label`\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 80%;\n  border-radius: 4px;\n  border-width: 2px;\n  border-color: #00bf06;\n  max-width: 100%;\n  font-size: '16px';\n  line-height: 1.25rem;\n  color: #111827;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  padding-left: 14px;\n  padding-right: 14px;\n  cursor: pointer;\n  margin-top: 0.3rem;\n`;\nvar InputFileWrong = import_styled_components3.default.label`\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 80%;\n  border-radius: 4px;\n  border-width: 2px;\n  border-color: #ef4444;\n  max-width: 100%;\n  font-size: '16px';\n  line-height: 1.25rem;\n  color: #111827;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  padding-left: 14px;\n  padding-right: 14px;\n  cursor: pointer;\n  margin-top: 0.3rem;\n`;\nvar FileUploadIcon = import_styled_components3.default.img`\n  height: 1.5rem;\n`;\nvar DocumentResultCorrect = import_styled_components3.default.div`\n  color: #00bf06;\n  position: absolute;\n  font-size: 0.875rem;\n  margin-top: 4px;\n`;\nvar DocumentResult = import_styled_components3.default.div`\n  color: #717686;\n  position: absolute;\n  font-size: 0.875rem;\n  margin-top: 4px;\n`;\nvar DocumentResultWrong = import_styled_components3.default.div`\n  color: #ef4444;\n  position: absolute;\n  font-size: 0.875rem;\n  margin-top: 4px;\n`;\n\n// src/hooks/useFonts.ts\nvar import_react7 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar useFonts = () => {\n  (0, import_react7.useEffect)(() => {\n    if (window) {\n      const element = document.createElement(\"link\");\n      element.setAttribute(\"rel\", \"stylesheet\");\n      element.setAttribute(\"type\", \"text/css\");\n      element.setAttribute(\n        \"href\",\n        \"https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap\"\n      );\n      document.getElementsByTagName(\"head\")[0].appendChild(element);\n    }\n  }, []);\n};\n\n// src/components/ProveModal/VerifyModal.tsx\nvar import_jsx_runtime5 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar VerifyModal = ({\n  qrStatus,\n  provingEnabled,\n  setQrStatus,\n  setQrData,\n  setCurrentView,\n  useTestAadhaar\n}) => {\n  useFonts();\n  return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(MainContainer, { children: [\n    /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(Container, { children: [\n      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(TitleSection, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(Disclaimer, { children: [\n        \"Anon Aadhaar allows you to create a proof of your Aadhaar ID without revealing any personal data. This process is local to your browser for privacy, and QR images are not uploaded to any server.\",\n        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\"p\", { children: \"\\xA0\" }),\n        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\"p\", { children: \"Note: Internet speed may affect processing time.\" }),\n        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Line, {}),\n        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(StyledParagraph, { children: \"GENERATE A QR CODE:\" }),\n        useTestAadhaar ? /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [\n          \"You can try this example app by generating a test Adhaar QR Code\",\n          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\"p\", { children: \"\\xA0\" }),\n          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\n            PhonePlatformLinks,\n            {\n              href: \"https://documentation.anon-aadhaar.pse.dev/docs/generate-qr\",\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: \"Link to generate a QR Code\"\n            }\n          )\n        ] }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [\n          \"Open mAadhaar app\",\n          \" \",\n          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\n            PhonePlatformLinks,\n            {\n              href: \"https://apps.apple.com/in/app/maadhaar/id1435469474\",\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: \"iOS\"\n            }\n          ),\n          \" \",\n          \"or\",\n          \" \",\n          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\n            PhonePlatformLinks,\n            {\n              href: \"https://play.google.com/store/apps/details?id=in.gov.uidai.mAadhaarPlus&hl=en_IN&pli=1\",\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: \"Android\"\n            }\n          ),\n          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\"p\", { children: \"By entering your Aadhaar number and OTP verification. You can then save the QR as an image using the 'Share' button for import.\" })\n        ] })\n      ] }) }),\n      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(UploadSection, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(UploadFile, { children: [\n        /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(StyledParagraph, { children: [\n          \"UPLOAD YOUR AADHAAR SECURE QR CODE:\",\n          \" \"\n        ] }),\n        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\n          FileInput,\n          {\n            onChange: async (e) => {\n              const { qrValue } = await uploadQRpng(e, setQrStatus);\n              setQrData(qrValue);\n            },\n            id: \"handlePdfChange\",\n            setQrStatus,\n            qrStatus\n          }\n        )\n      ] }) })\n    ] }),\n    /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(Container, { children: [\n      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Btn, { disabled: !provingEnabled, onClick: () => setCurrentView(\"Prove\"), children: \"CONTINUE\" }),\n      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(SmallDisclaimer, { children: \"No Aadhaar data ever leaves your device!\" })\n    ] })\n  ] });\n};\nvar UploadFile = import_styled_components4.default.div`\n  margin-top: 20px;\n  margin-bottom: 30px;\n`;\nvar SmallDisclaimer = import_styled_components4.default.p`\n  font-size: small;\n  color: #717686;\n  text-decoration: wavy;\n  text-align: center;\n  margin-top: 10px;\n`;\nvar TitleSection = import_styled_components4.default.div`\n  color: #111827;\n  flex-shrink: 0;\n  row-gap: 1rem;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  flex-flow: column;\n`;\nvar Disclaimer = import_styled_components4.default.span`\n  color: #717686;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n`;\nvar UploadSection = import_styled_components4.default.div`\n  row-gap: 1rem;\n  max-width: 100%;\n`;\nvar PhonePlatformLinks = import_styled_components4.default.a`\n  color: #1d24e0;\n  margin-top: 0.3rem;\n  font-size: 0.9rem;\n  font-weight: normal;\n  text-decoration: underline;\n`;\nvar Container = import_styled_components4.default.div`\n  width: 100%;\n`;\nvar Line = import_styled_components4.default.div`\n  height: 2px;\n  margin: 20px 0;\n  width: 5rem;\n  background-color: rgba(0, 154, 8, 1);\n  margin-left: auto;\n  margin-right: auto;\n`;\nvar StyledParagraph = import_styled_components4.default.p`\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 600; // Regular weight\n  font-size: 16px; // Example font size\n  color: #333; // Example text color\n  margin: 10px 0;\n  line-height: 1.5;\n  text-transform: capitalize;\n`;\nvar Btn = import_styled_components4.default.button`\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 600;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  padding: 0.5rem 1rem;\n  font-size: 16px;\n  cursor: pointer;\n  color: white;\n  background-color: #009a08;\n  border: none;\n  min-width: 12rem;\n  min-height: 3rem;\n  border-radius: 6px;\n\n  &:hover {\n    opacity: 70%;\n  }\n\n  &:active {\n    background: #f8f8f8;\n  }\n\n  &:disabled {\n    color: #a8aaaf;\n    background: #e8e8e8;\n    cursor: default;\n    cursor: not-allowed;\n  }\n`;\nvar MainContainer = import_styled_components4.default.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  width: 100%;\n`;\n\n// src/components/ProveModal/ProveModal.tsx\nvar import_react9 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_styled_components7 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\n\n// src/components/ProveModal/ProveButton.tsx\nvar import_styled_components5 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\nvar import_react8 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_jsx_runtime6 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar ProveButton = ({\n  qrData,\n  provingEnabled,\n  setErrorMessage,\n  signal,\n  fieldsToReveal,\n  nullifierSeed,\n  setQrStatus,\n  setCurrentView,\n  useTestAadhaar = false\n}) => {\n  const { startReq } = (0, import_react8.useContext)(AnonAadhaarContext);\n  const startProving = async () => {\n    try {\n      setCurrentView(\"Proving\");\n      if (qrData === null)\n        throw new Error(\"Missing QR code data.\");\n      if (fieldsToReveal === void 0)\n        fieldsToReveal = [];\n      const args = await processAadhaarArgs(\n        qrData,\n        useTestAadhaar,\n        nullifierSeed,\n        fieldsToReveal,\n        signal\n      );\n      startReq({ type: \"login\", args });\n      setQrStatus(null);\n    } catch (error) {\n      console.log(error);\n      if (error instanceof Error)\n        setErrorMessage(error.message);\n    }\n  };\n  return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(Btn2, { disabled: !provingEnabled, onClick: startProving, children: [\n    \" \",\n    \"GENERATE ANON AADHAAR PROOF\",\n    \" \"\n  ] });\n};\nvar Btn2 = import_styled_components5.default.button`\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 600;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  padding: 0.5rem 1rem;\n  font-size: 16px;\n  cursor: pointer;\n  color: white;\n  background-color: #009a08;\n  border: none;\n  min-width: 12rem;\n  min-height: 3rem;\n  border-radius: 6px;\n\n  &:hover {\n    opacity: 70%;\n  }\n\n  &:active {\n    background: #f8f8f8;\n  }\n\n  &:disabled {\n    color: #a8aaaf;\n    background: #e8e8e8;\n    cursor: default;\n    cursor: not-allowed;\n  }\n`;\n\n// src/components/ProveModal/SignalDisplay.tsx\nvar import_styled_components6 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\nvar import_jsx_runtime7 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar SignalDisplay = ({\n  signal\n}) => {\n  const isJsonObject = typeof signal === \"object\" && signal !== null;\n  const displaySignal = isJsonObject ? JSON.stringify(signal, null, 2) : signal;\n  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Signal, { children: displaySignal });\n};\nvar Signal = import_styled_components6.default.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  border: solid;\n  align-items: center;\n  border-color: #b6b9c3;\n  font-size: 14px;\n  border-radius: 4px;\n  color: black;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 12px;\n  padding-right: 12px;\n  margin-top: 10px;\n`;\n\n// src/components/ProveModal/ProveModal.tsx\nvar import_core5 = __webpack_require__(/*! @anon-aadhaar/core */ \"(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\");\nvar import_jsx_runtime8 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar ProveModal = ({\n  setErrorMessage,\n  qrStatus,\n  qrData,\n  setQrStatus,\n  signal,\n  fieldsToReveal,\n  nullifierSeed,\n  setCurrentView,\n  useTestAadhaar\n}) => {\n  const [provingEnabled, setProvingEnabled] = (0, import_react9.useState)(false);\n  const { appName } = (0, import_react9.useContext)(AnonAadhaarContext);\n  const noRevealillustration = createBlobURL(icons.eyeOff);\n  const revealillustration = createBlobURL(icons.eye);\n  (0, import_react9.useEffect)(() => {\n    if (qrStatus === \"Signature verified \\u2705\" /* SIGNATURE_VERIFIED */) {\n      setProvingEnabled(true);\n    } else {\n      setProvingEnabled(false);\n    }\n  }, [qrStatus]);\n  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(MainContainer2, { children: [\n    /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(\"div\", { children: [\n      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(TitleSection2, { children: \"YOUR QR CODE IS VERIFIED!\" }),\n      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(Section, { children: [\n        /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(Label, { children: [\n          \"Data you are sharing to \",\n          appName,\n          \": \"\n        ] }),\n        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(RevealSection, { children: fieldsToReveal ? import_core5.fieldsLabel.map(\n          ({ key, label }) => fieldsToReveal.includes(key) ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(FieldRow, { children: /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(DiscloseOn, { children: [\n            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Icon, { src: revealillustration }),\n            label.toLocaleUpperCase()\n          ] }) }, key) : /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(FieldRow, { children: /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(DiscloseOff, { children: [\n            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Icon, { src: noRevealillustration }),\n            label.toLocaleUpperCase()\n          ] }) }, key)\n        ) : import_core5.fieldsLabel.map(({ key, label }) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(FieldRow, { children: /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(DiscloseOff, { children: [\n          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Icon, { src: noRevealillustration }),\n          label.toLocaleUpperCase()\n        ] }) }, key)) })\n      ] }),\n      signal && /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(Section, { children: [\n        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Label, { children: \"Data you are signing: \" }),\n        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SignalDisplay, { signal })\n      ] })\n    ] }),\n    /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(\"div\", { children: [\n      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\n        ProveButton,\n        {\n          qrData,\n          provingEnabled,\n          setErrorMessage,\n          signal,\n          setQrStatus,\n          nullifierSeed,\n          fieldsToReveal,\n          setCurrentView,\n          useTestAadhaar\n        }\n      ),\n      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(SmallDisclaimer2, { children: \"No Aadhaar data ever leaves your device!\" })\n    ] })\n  ] });\n};\nvar TitleSection2 = import_styled_components7.default.div`\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 600; // Regular weight\n  font-size: 16px; // Example font size\n  color: #333; // Example text color\n  line-height: 1.5;\n  text-transform: capitalize;\n`;\nvar Icon = import_styled_components7.default.img`\n  height: 1.5rem;\n  margin-right: 5px;\n`;\nvar DiscloseOn = import_styled_components7.default.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  border: solid;\n  align-items: center;\n  border-color: #009a08;\n  border-radius: 4px;\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 600;\n  color: black;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 12px;\n  padding-right: 12px;\n`;\nvar DiscloseOff = import_styled_components7.default.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  border: solid;\n  align-items: center;\n  border-color: #b6b9c3;\n  border-radius: 4px;\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 600;\n  color: #b6b9c3;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 12px;\n  padding-right: 12px;\n`;\nvar Section = import_styled_components7.default.div`\n  margin-top: 15px;\n  row-gap: 1rem;\n  max-width: 100%;\n`;\nvar Label = import_styled_components7.default.div`\n  font-size: 14px;\n  text-align: left;\n  font-weight: 400;\n  color: #6b7280;\n`;\nvar RevealSection = import_styled_components7.default.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  margin-top: 10px;\n`;\nvar FieldRow = import_styled_components7.default.div`\n  display: flex;\n  align-items: center;\n`;\nvar MainContainer2 = import_styled_components7.default.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  width: 100%;\n`;\nvar SmallDisclaimer2 = import_styled_components7.default.p`\n  font-size: small;\n  color: #717686;\n  text-decoration: wavy;\n  text-align: center;\n  margin-top: 10px;\n`;\n\n// src/components/ProveModal/LoaderView.tsx\nvar import_react10 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_styled_components8 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\n\n// src/components/LoaderIcons.ts\nvar icons2 = {\n  bottomLeftPlain: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" fill=\"none\"><path fill=\"#081224\" d=\"M63.813 63.116V45.86a.632.632 0 0 0-.636-.635H25.474a5.956 5.956 0 0 1-5.963-5.953V1.322a.632.632 0 0 0-.636-.635H1.385a.632.632 0 0 0-.635.635v20.545c0 2.89 1.153 5.671 3.201 7.716l30.978 30.932a10.948 10.948 0 0 0 7.706 3.196l20.534.039a.64.64 0 0 0 .644-.635\"/></svg>',\n  bottomLeft: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" fill=\"none\"><path stroke=\"#081224\" stroke-width=\".674\" d=\"M4.19 29.344a10.575 10.575 0 0 1-3.103-7.477V1.322c0-.166.13-.298.298-.298h17.49c.168 0 .299.132.299.298v37.95c0 3.477 2.819 6.29 6.3 6.29h37.703c.167 0 .298.132.298.298v17.255c0 .16-.133.298-.306.298l-20.533-.04a10.611 10.611 0 0 1-7.469-3.097z\"/></svg>',\n  bottomRightPlain: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" fill=\"none\"><path fill=\"#FD8B0E\" d=\"M.188 63.116V45.86c0-.353.282-.635.635-.635h37.703a5.956 5.956 0 0 0 5.963-5.953V1.322c0-.353.283-.635.636-.635h17.49c.353 0 .635.282.635.635v20.545c0 2.89-1.153 5.671-3.201 7.716L29.071 60.515a10.948 10.948 0 0 1-7.706 3.196L.831 63.75a.64.64 0 0 1-.643-.635\"/></svg>',\n  bottomRight: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" fill=\"none\"><path stroke=\"#FD8B0E\" stroke-width=\".674\" d=\"M59.81 29.344a10.575 10.575 0 0 0 3.103-7.477V1.322a.295.295 0 0 0-.298-.298h-17.49a.295.295 0 0 0-.299.298v37.95c0 3.477-2.819 6.29-6.3 6.29H.823a.295.295 0 0 0-.298.298v17.255c0 .16.133.298.306.298l20.534-.04a10.611 10.611 0 0 0 7.468-3.097z\"/></svg>',\n  topLeftPlain: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" fill=\"none\"><path fill=\"#009A08\" d=\"M63.813.884V18.14a.632.632 0 0 1-.636.635H25.474a5.956 5.956 0 0 0-5.963 5.953v37.95a.632.632 0 0 1-.636.635H1.385a.632.632 0 0 1-.635-.635V42.134c0-2.89 1.153-5.671 3.201-7.716L34.929 3.485A10.948 10.948 0 0 1 42.635.289L63.169.25a.64.64 0 0 1 .644.634\"/></svg>',\n  topLeft: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" fill=\"none\"><path stroke=\"#009A08\" stroke-width=\".674\" d=\"M4.19 34.656a10.575 10.575 0 0 0-3.103 7.477v20.545c0 .166.13.298.298.298h17.49a.295.295 0 0 0 .299-.297V24.728c0-3.477 2.819-6.29 6.3-6.29h37.703a.295.295 0 0 0 .298-.298V.884a.302.302 0 0 0-.306-.297l-20.533.04a10.611 10.611 0 0 0-7.469 3.097z\"/></svg>',\n  topRightPlain: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" fill=\"none\"><path fill=\"#081224\" d=\"M.188.884V18.14c0 .353.282.635.635.635h37.703a5.956 5.956 0 0 1 5.963 5.953v37.95c0 .353.283.635.636.635h17.49a.632.632 0 0 0 .635-.635V42.134c0-2.89-1.153-5.671-3.201-7.716L29.071 3.485A10.949 10.949 0 0 0 21.365.289L.831.25a.64.64 0 0 0-.643.634\"/></svg>',\n  topRight: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" fill=\"none\"><path stroke=\"#081224\" stroke-width=\".674\" d=\"M59.81 34.656a10.575 10.575 0 0 1 3.103 7.477v20.545a.295.295 0 0 1-.298.298h-17.49a.295.295 0 0 1-.299-.298v-37.95c0-3.477-2.819-6.29-6.3-6.29H.823a.295.295 0 0 1-.298-.298V.884c0-.16.133-.297.306-.297l20.534.04a10.611 10.611 0 0 1 7.468 3.097z\"/></svg>'\n};\n\n// src/components/ProveModal/LoaderView.tsx\nvar import_core6 = __webpack_require__(/*! @anon-aadhaar/core */ \"(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\");\nvar import_jsx_runtime9 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar LoaderView = () => {\n  useFonts();\n  const { proverState } = (0, import_react10.useContext)(AnonAadhaarContext);\n  const [iconsState, setIconsState] = (0, import_react10.useState)({\n    topLeft: false,\n    topRight: false,\n    bottomLeft: false,\n    bottomRight: false\n  });\n  const iconsUrl = (0, import_react10.useMemo)(\n    () => ({\n      topLeft: createBlobURL(icons2.topLeft),\n      topLeftPlain: createBlobURL(icons2.topLeftPlain),\n      topRight: createBlobURL(icons2.topRight),\n      topRightPlain: createBlobURL(icons2.topRightPlain),\n      bottomLeft: createBlobURL(icons2.bottomLeft),\n      bottomLeftPlain: createBlobURL(icons2.bottomLeftPlain),\n      bottomRight: createBlobURL(icons2.bottomRight),\n      bottomRightPlain: createBlobURL(icons2.bottomRightPlain)\n    }),\n    [icons2]\n  );\n  (0, import_react10.useEffect)(() => {\n    const intervalId = setInterval(() => {\n      setIconsState((prevState) => {\n        const newState = { ...prevState };\n        if (!newState.topLeft) {\n          newState.topLeft = true;\n        } else if (!newState.topRight) {\n          newState.topRight = true;\n        } else if (!newState.bottomRight) {\n          newState.bottomRight = true;\n        } else if (!newState.bottomLeft) {\n          newState.bottomLeft = true;\n        } else {\n          return {\n            topLeft: false,\n            topRight: false,\n            bottomLeft: false,\n            bottomRight: false\n          };\n        }\n        return newState;\n      });\n    }, 1e3);\n    return () => {\n      clearInterval(intervalId);\n      Object.values(iconsUrl).forEach(URL.revokeObjectURL);\n    };\n  }, [iconsUrl]);\n  return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [\n    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(MainContainer3, { children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(LoaderContainer, { children: [\n      /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(TopContainer, { children: [\n        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(\n          Icon2,\n          {\n            src: iconsState.topLeft ? iconsUrl.topLeftPlain : iconsUrl.topLeft,\n            alt: \"Top left icon\"\n          }\n        ),\n        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(\n          Icon2,\n          {\n            src: iconsState.topRight ? iconsUrl.topRightPlain : iconsUrl.topRight,\n            alt: \"Top right icon\"\n          }\n        )\n      ] }),\n      /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(BottomContainer, { children: [\n        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(\n          Icon2,\n          {\n            src: iconsState.bottomLeft ? iconsUrl.bottomLeftPlain : iconsUrl.bottomLeft,\n            alt: \"Bottom left icon\"\n          }\n        ),\n        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(\n          Icon2,\n          {\n            src: iconsState.bottomRight ? iconsUrl.bottomRightPlain : iconsUrl.bottomRight,\n            alt: \"Bottom right icon\"\n          }\n        )\n      ] }),\n      /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(TitleSection3, { children: [\n        proverState === import_core6.ProverState.Initializing && \"GENERATE PROOF...\",\n        proverState === import_core6.ProverState.Completed && \"GENERATE PROOF...\",\n        proverState === import_core6.ProverState.FetchingWasm && \"SEARCHING FOR WASM FILE...\",\n        proverState === import_core6.ProverState.FetchingZkey && \"SEARCHING FOR ZKEY FILE...\",\n        proverState === import_core6.ProverState.Proving && \"GENERATING PROOF...\",\n        proverState === import_core6.ProverState.Error && \"Oops, something went wrong...\"\n      ] })\n    ] }) }),\n    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SmallDisclaimer3, { children: \"Proof generation on a MacBook Pro M1 - 16GB is about 26 seconds\" })\n  ] });\n};\nvar LoaderContainer = import_styled_components8.default.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n`;\nvar TopContainer = import_styled_components8.default.div`\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n`;\nvar BottomContainer = import_styled_components8.default.div`\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n`;\nvar Icon2 = import_styled_components8.default.img`\n  height: 65px;\n`;\nvar MainContainer3 = import_styled_components8.default.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n`;\nvar TitleSection3 = import_styled_components8.default.div`\n  margin-top: 20px;\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 500; // Regular weight\n  font-size: 28px; // Example font size\n  color: #333; // Example text color\n  line-height: 1.5;\n  text-transform: capitalize;\n`;\nvar SmallDisclaimer3 = import_styled_components8.default.p`\n  font-size: 12px;\n  color: black;\n  text-decoration: wavy;\n  text-align: center;\n  margin-top: 10px;\n`;\n\n// src/components/ProveModal/Modal.tsx\nvar import_jsx_runtime10 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar Modal = ({\n  isOpen,\n  onClose,\n  errorMessage,\n  setErrorMessage,\n  qrStatus,\n  setQrStatus,\n  signal,\n  fieldsToReveal,\n  nullifierSeed,\n  currentView,\n  setCurrentView,\n  useTestAadhaar = false\n}) => {\n  const [qrData, setQrData] = (0, import_react11.useState)(null);\n  const [provingEnabled, setProvingEnabled] = (0, import_react11.useState)(false);\n  (0, import_react11.useEffect)(() => {\n    if (qrData) {\n      verifySignature(qrData, useTestAadhaar).then((verified) => {\n        verified.isSignatureValid ? setQrStatus(\"Signature verified \\u2705\" /* SIGNATURE_VERIFIED */) : setQrStatus(\"QR code invalid \\u274C\" /* ERROR_PARSING_QR */);\n      }).catch((error) => {\n        setQrStatus(\"QR code invalid \\u274C\" /* ERROR_PARSING_QR */);\n        console.error(error);\n      });\n    }\n  }, [qrData]);\n  (0, import_react11.useEffect)(() => {\n    if (qrStatus === \"Signature verified \\u2705\" /* SIGNATURE_VERIFIED */) {\n      setProvingEnabled(true);\n    } else {\n      setProvingEnabled(false);\n    }\n  }, [qrStatus]);\n  return isOpen ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ModalOverlay, { onClick: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(ModalContent, { onClick: (e) => e.stopPropagation(), children: [\n    errorMessage !== null && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(\n      ErrorToast,\n      {\n        message: errorMessage,\n        setErrorMessage\n      }\n    ),\n    (() => {\n      switch (currentView) {\n        case \"Verify\":\n          return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(\n            VerifyModal,\n            {\n              provingEnabled,\n              qrStatus,\n              setQrStatus,\n              setQrData,\n              setCurrentView,\n              useTestAadhaar\n            }\n          );\n        case \"Prove\":\n          return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(\n            ProveModal,\n            {\n              setErrorMessage,\n              qrStatus,\n              qrData,\n              setQrStatus,\n              signal,\n              fieldsToReveal,\n              nullifierSeed,\n              setCurrentView,\n              useTestAadhaar\n            }\n          );\n        case \"Proving\":\n          return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(LoaderView, {});\n      }\n    })()\n  ] }) }) : null;\n};\nvar ModalOverlay = import_styled_components9.default.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.2);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n`;\nvar ModalContent = import_styled_components9.default.div`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #ffffff;\n  border-radius: 1rem;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n  padding: 2rem;\n\n  /* Mobile devices */\n  @media screen and (max-width: 480px) {\n    width: 90%;\n    min-height: 450px;\n    padding: 1.5rem;\n  }\n\n  /* Tablets and Desktop */\n  @media screen and (min-width: 481px) {\n    width: 450px;\n    height: 600px;\n  }\n\n  /* Very small screens */\n  @media screen and (max-height: 550px) {\n    min-height: 400px;\n    padding: 1rem;\n  }\n`;\n\n// src/components/LogInWithAnonAadhaar.tsx\nvar import_styled_components10 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\nvar import_react13 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_core7 = __webpack_require__(/*! @anon-aadhaar/core */ \"(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\");\nvar import_jsx_runtime11 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar LogInWithAnonAadhaar = ({\n  signal,\n  fieldsToReveal,\n  nullifierSeed\n}) => {\n  const [isModalOpen, setIsModalOpen] = (0, import_react12.useState)(false);\n  const [errorMessage, setErrorMessage] = (0, import_react12.useState)(null);\n  const [qrStatus, setQrStatus] = (0, import_react12.useState)(null);\n  const [currentView, setCurrentView] = (0, import_react12.useState)(\"Verify\");\n  const [isMenuOpen, setIsMenuOpen] = (0, import_react12.useState)(false);\n  const { state, startReq, proverState, useTestAadhaar } = (0, import_react13.useContext)(AnonAadhaarContext);\n  const anonAadhaarLogo = createBlobURL(icons.aalogo);\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n  (0, import_react13.useEffect)(() => {\n    if (proverState === import_core7.ProverState.Completed)\n      closeModal();\n  }, [proverState]);\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setErrorMessage(null);\n    setQrStatus(null);\n    setCurrentView(\"Verify\");\n  };\n  return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(\"div\", { children: [\n    (state.status === \"logged-out\" || state.status === \"logging-in\") && /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(\"div\", { children: [\n      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(Btn3, { onClick: openModal, children: [\n        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Logo, { src: anonAadhaarLogo }),\n        \"Login\"\n      ] }),\n      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(\n        Modal,\n        {\n          isOpen: isModalOpen,\n          onClose: closeModal,\n          errorMessage,\n          setErrorMessage,\n          logo: anonAadhaarLogo,\n          qrStatus,\n          setQrStatus,\n          signal,\n          fieldsToReveal,\n          nullifierSeed,\n          setCurrentView,\n          currentView,\n          useTestAadhaar\n        }\n      )\n    ] }),\n    state.status === \"logged-in\" && /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(RelativeContainer, { children: [\n      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(Btn3, { onClick: toggleMenu, children: [\n        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Logo, { src: anonAadhaarLogo }),\n        \"Menu\"\n      ] }),\n      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(MenuContainer, { $isopen: isMenuOpen, children: [\n        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(MenuItem, { onClick: openModal, children: \"Create a proof\" }),\n        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(\n          Modal,\n          {\n            isOpen: isModalOpen,\n            onClose: closeModal,\n            errorMessage,\n            setErrorMessage,\n            logo: anonAadhaarLogo,\n            qrStatus,\n            setQrStatus,\n            signal,\n            fieldsToReveal,\n            nullifierSeed,\n            setCurrentView,\n            currentView,\n            useTestAadhaar\n          }\n        ),\n        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(MenuItem, { onClick: () => startReq({ type: \"logout\" }), children: \"Logout\" })\n      ] })\n    ] })\n  ] });\n};\nvar Logo = import_styled_components10.default.img`\n  height: 1.5rem;\n  margin-right: 0.5rem;\n`;\nvar Btn3 = import_styled_components10.default.button`\n  display: flex;\n  padding: 0 1rem;\n  font-size: 1rem;\n  cursor: pointer;\n  color: #000000;\n  font-weight: bold;\n  border-radius: 1.3125rem;\n  background: #fff;\n  box-shadow: 0px 3px 8px 1px rgba(0, 0, 0, 0.25);\n  border: none;\n  min-height: 2.5rem;\n  border-radius: 0.5rem;\n  align-items: center;\n\n  &:hover {\n    background: #fafafa;\n  }\n\n  &:active {\n    background: #f8f8f8;\n  }\n\n  &:disabled {\n    color: #a8aaaf;\n    background: #e8e8e8;\n    cursor: default;\n  }\n`;\nvar MenuItem = import_styled_components10.default.button`\n  display: block;\n  width: 100%;\n  padding: 0.5rem 1rem;\n  font-size: 1rem;\n  color: #000000;\n  text-align: left;\n  background: none;\n  border: none;\n  border-bottom: 1px solid #cccccc;\n  cursor: pointer;\n\n  &:hover {\n    border-radius: 0.5rem;\n    background-color: #f2f2f2;\n  }\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\nvar MenuContainer = import_styled_components10.default.div`\n  display: ${(props) => props.$isopen ? \"block\" : \"none\"};\n  position: absolute;\n  margin-top: 0.5rem;\n  top: 100%;\n  right: 0;\n  width: 130%;\n  background: #fff;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n  border-radius: 0.5rem;\n  z-index: 10;\n`;\nvar RelativeContainer = import_styled_components10.default.div`\n  position: relative;\n  display: inline-block;\n`;\n\n// src/components/LaunchProveModal.tsx\nvar import_react14 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_styled_components11 = __toESM(__webpack_require__(/*! styled-components */ \"(ssr)/./node_modules/styled-components/dist/styled-components.cjs.js\"));\nvar import_react15 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_core8 = __webpack_require__(/*! @anon-aadhaar/core */ \"(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\");\nvar import_jsx_runtime12 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar LaunchProveModal = ({\n  signal,\n  buttonStyle,\n  fieldsToReveal,\n  nullifierSeed,\n  buttonTitle = \"Generate a proof\"\n}) => {\n  const [isModalOpen, setIsModalOpen] = (0, import_react14.useState)(false);\n  const [errorMessage, setErrorMessage] = (0, import_react14.useState)(null);\n  const [qrStatus, setQrStatus] = (0, import_react14.useState)(null);\n  const [currentView, setCurrentView] = (0, import_react14.useState)(\"Verify\");\n  const { proverState, useTestAadhaar } = (0, import_react15.useContext)(AnonAadhaarContext);\n  const anonAadhaarLogo = createBlobURL(icons.aalogo);\n  (0, import_react15.useEffect)(() => {\n    if (proverState === import_core8.ProverState.Completed)\n      closeModal();\n  }, [proverState]);\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setErrorMessage(null);\n    setQrStatus(null);\n    setCurrentView(\"Verify\");\n  };\n  return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(\"div\", { children: [\n    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(Btn4, { style: buttonStyle, onClick: openModal, children: [\n      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Logo2, { src: anonAadhaarLogo }),\n      buttonTitle\n    ] }),\n    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(\n      Modal,\n      {\n        isOpen: isModalOpen,\n        onClose: closeModal,\n        errorMessage,\n        setErrorMessage,\n        logo: anonAadhaarLogo,\n        qrStatus,\n        setQrStatus,\n        signal,\n        fieldsToReveal,\n        nullifierSeed,\n        setCurrentView,\n        currentView,\n        useTestAadhaar\n      }\n    )\n  ] });\n};\nvar Logo2 = import_styled_components11.default.img`\n  height: 1.5rem;\n  margin-right: 0.5rem;\n`;\nvar Btn4 = import_styled_components11.default.button`\n  display: flex;\n  padding: 0 1rem;\n  font-size: 1rem;\n  cursor: pointer;\n  color: #000000;\n  font-weight: bold;\n  border-radius: 1.3125rem;\n  background: #fff;\n  box-shadow: 0px 3px 8px 1px rgba(0, 0, 0, 0.25);\n  border: none;\n  min-height: 2.5rem;\n  border-radius: 0.5rem;\n  align-items: center;\n\n  &:hover {\n    background: #fafafa;\n  }\n\n  &:active {\n    background: #f8f8f8;\n  }\n\n  &:disabled {\n    color: #a8aaaf;\n    background: #e8e8e8;\n    cursor: default;\n  }\n`;\n\n// src/hooks/useProver.ts\nvar import_react16 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_core9 = __webpack_require__(/*! @anon-aadhaar/core */ \"(ssr)/./node_modules/@anon-aadhaar/core/dist/index.js\");\nfunction useProver() {\n  const [latestProof, setLatestProof] = (0, import_react16.useState)();\n  const { proverState, state } = (0, import_react16.useContext)(AnonAadhaarContext);\n  (0, import_react16.useEffect)(() => {\n    if (state.status === \"logged-in\") {\n      (0, import_core9.deserialize)(\n        state.anonAadhaarProofs[Object.keys(state.anonAadhaarProofs).length - 1].pcd\n      ).then((anonAadhaarCore) => setLatestProof(anonAadhaarCore));\n    }\n  }, [proverState, state]);\n  return [proverState, latestProof];\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@anon-aadhaar/react/dist/index.js\n");

/***/ })

};
;
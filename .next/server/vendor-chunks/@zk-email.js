"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@zk-email";
exports.ids = ["vendor-chunks/@zk-email"];
exports.modules = {

/***/ "(ssr)/./node_modules/@zk-email/helpers/dist/binary-format.js":
/*!**************************************************************!*\
  !*** ./node_modules/@zk-email/helpers/dist/binary-format.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bytesToString = bytesToString;\nexports.stringToBytes = stringToBytes;\nexports.bufferToUint8Array = bufferToUint8Array;\nexports.bufferToHex = bufferToHex;\nexports.Uint8ArrayToCharArray = Uint8ArrayToCharArray;\nexports.Uint8ArrayToString = Uint8ArrayToString;\nexports.Uint8ArrayToHex = Uint8ArrayToHex;\nexports.bufferToString = bufferToString;\nexports.bytesToBigInt = bytesToBigInt;\nexports.bigIntToChunkedBytes = bigIntToChunkedBytes;\nexports.toCircomBigIntBytes = toCircomBigIntBytes;\nexports.toHex = toHex;\nexports.fromHex = fromHex;\nexports.int64toBytes = int64toBytes;\nexports.int8toBytes = int8toBytes;\nexports.bitsToUint8 = bitsToUint8;\nexports.uint8ToBits = uint8ToBits;\nexports.mergeUInt8Arrays = mergeUInt8Arrays;\nexports.assert = assert;\nexports.packedNBytesToString = packedNBytesToString;\nexports.packBytesIntoNBytes = packBytesIntoNBytes;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@zk-email/helpers/dist/constants.js\");\nfunction bytesToString(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n// stringToUint8Array\nfunction stringToBytes(str) {\n    // const encodedText = new TextEncoder().encode(str);\n    const toReturn = Uint8Array.from(str, (x) => x.charCodeAt(0));\n    //   const buf = Buffer.from(str, \"utf8\");\n    return toReturn;\n    // TODO: Check encoding mismatch if the proof doesnt work\n    // Note that our custom encoding function maps (239, 191, 189) -> (253)\n    // Note that our custom encoding function maps (207, 181) -> (245)\n    // throw Error(\n    //   \"TextEncoder does not match string2bytes function\" +\n    //     \"\\n\" +\n    //     str +\n    //     \"\\n\" +\n    //     buf +\n    //     \"\\n\" +\n    //     Uint8Array.from(buf) +\n    //     \"\\n\" +\n    //     JSON.stringify(encodedText) +\n    //     \"\\n\" +\n    //     JSON.stringify(toReturn)\n    // );\n}\nfunction bufferToUint8Array(buf) {\n    const ab = new ArrayBuffer(buf.length);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buf.length; ++i) {\n        view[i] = buf[i];\n    }\n    return Uint8Array.from(view);\n}\nfunction bufferToHex(buf) {\n    return buf.toString('hex');\n}\nfunction Uint8ArrayToCharArray(a) {\n    return Array.from(a).map((x) => x.toString());\n}\nasync function Uint8ArrayToString(a) {\n    return Array.from(a)\n        .map((x) => x.toString())\n        .join(';');\n}\nasync function Uint8ArrayToHex(a) {\n    return Buffer.from(a).toString('hex');\n}\nfunction bufferToString(buf) {\n    const intermediate = bufferToUint8Array(buf);\n    return bytesToString(intermediate);\n}\nfunction bytesToBigInt(bytes) {\n    let res = 0n;\n    for (let i = 0; i < bytes.length; ++i) {\n        res = (res << 8n) + BigInt(bytes[i]);\n    }\n    return res;\n}\nfunction bigIntToChunkedBytes(num, bytesPerChunk, numChunks) {\n    const res = [];\n    const bigintNum = typeof num === 'bigint' ? num : num.valueOf();\n    const msk = (1n << BigInt(bytesPerChunk)) - 1n;\n    for (let i = 0; i < numChunks; ++i) {\n        res.push(((bigintNum >> BigInt(i * bytesPerChunk)) & msk).toString());\n    }\n    return res;\n}\nfunction toCircomBigIntBytes(num) {\n    return bigIntToChunkedBytes(num, constants_1.CIRCOM_BIGINT_N, constants_1.CIRCOM_BIGINT_K);\n}\n// https://stackoverflow.com/a/69585881\nconst HEX_STRINGS = '0123456789abcdef';\nconst MAP_HEX = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    a: 10,\n    b: 11,\n    c: 12,\n    d: 13,\n    e: 14,\n    f: 15,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n};\n// Fast Uint8Array to hex\nfunction toHex(bytes) {\n    return Array.from(bytes || [])\n        .map((b) => HEX_STRINGS[b >> 4] + HEX_STRINGS[b & 15])\n        .join('');\n}\n// Mimics Buffer.from(x, 'hex') logic\n// Stops on first non-hex string and returns\n// https://github.com/nodejs/node/blob/v14.18.1/src/string_bytes.cc#L246-L261\nfunction fromHex(hexString) {\n    let hexStringTrimmed = hexString;\n    if (hexString[0] === '0' && hexString[1] === 'x') {\n        hexStringTrimmed = hexString.slice(2);\n    }\n    const bytes = new Uint8Array(Math.floor((hexStringTrimmed || '').length / 2));\n    let i;\n    for (i = 0; i < bytes.length; i++) {\n        const a = MAP_HEX[hexStringTrimmed[i * 2]];\n        const b = MAP_HEX[hexStringTrimmed[i * 2 + 1]];\n        if (a === undefined || b === undefined) {\n            break;\n        }\n        bytes[i] = (a << 4) | b;\n    }\n    return i === bytes.length ? bytes : bytes.slice(0, i);\n}\n// Works only on 32 bit sha text lengths\nfunction int64toBytes(num) {\n    const arr = new ArrayBuffer(8); // an Int32 takes 4 bytes\n    const view = new DataView(arr);\n    view.setInt32(4, num, false); // byteOffset = 0; litteEndian = false\n    return new Uint8Array(arr);\n}\n// Works only on 32 bit sha text lengths\nfunction int8toBytes(num) {\n    const arr = new ArrayBuffer(1); // an Int8 takes 4 bytes\n    const view = new DataView(arr);\n    view.setUint8(0, num); // byteOffset = 0; litteEndian = false\n    return new Uint8Array(arr);\n}\nfunction bitsToUint8(bits) {\n    const bytes = new Uint8Array(bits.length);\n    for (let i = 0; i < bits.length; i += 1) {\n        bytes[i] = parseInt(bits[i], 2);\n    }\n    return bytes;\n}\nfunction uint8ToBits(uint8) {\n    return uint8.reduce((acc, byte) => acc + byte.toString(2).padStart(8, '0'), '');\n}\nfunction mergeUInt8Arrays(a1, a2) {\n    // sum of individual array lengths\n    const mergedArray = new Uint8Array(a1.length + a2.length);\n    mergedArray.set(a1);\n    mergedArray.set(a2, a1.length);\n    return mergedArray;\n}\nfunction assert(cond, errorMessage) {\n    if (!cond) {\n        throw new Error(errorMessage);\n    }\n}\nfunction packedNBytesToString(packedBytes, n = 31) {\n    const chars = [];\n    for (let i = 0; i < packedBytes.length; i++) {\n        for (let k = 0n; k < n; k++) {\n            chars.push(Number((packedBytes[i] >> (k * 8n)) % 256n));\n        }\n    }\n    return bytesToString(Uint8Array.from(chars));\n}\nfunction packBytesIntoNBytes(messagePaddedRaw, n = 7) {\n    const messagePadded = typeof messagePaddedRaw === 'string' ? stringToBytes(messagePaddedRaw) : messagePaddedRaw;\n    const output = [];\n    for (let i = 0; i < messagePadded.length; i++) {\n        if (i % n === 0) {\n            output.push(0n);\n        }\n        const j = (i / n) | 0;\n        console.assert(j === output.length - 1, 'Not editing the index of the last element -- packing loop invariants bug!');\n        output[j] += BigInt(messagePadded[i]) << BigInt((i % n) * 8);\n    }\n    return output;\n}\n// Usage: let in_padded_n_bytes = packBytesIntoNBytes(messagePadded, 7).map((x) => x.toString()); // Packed into 7 byte signals\n// console.log(packedNBytesToString([30680772461461504n, 129074054722665n, 30794022159122432n, 30803244232763745n]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-email/helpers/dist/binary-format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-email/helpers/dist/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/@zk-email/helpers/dist/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CIRCOM_LEVELS = exports.CIRCOM_BIGINT_K = exports.CIRCOM_BIGINT_N = exports.MAX_BODY_PADDED_BYTES = exports.MAX_HEADER_PADDED_BYTES = exports.CIRCOM_FIELD_MODULUS = void 0;\nexports.CIRCOM_FIELD_MODULUS = 21888242871839275222246405745257275088548364400416034343698204186575808495617n;\nexports.MAX_HEADER_PADDED_BYTES = 1024; // Default value for max size to be used in circuit\nexports.MAX_BODY_PADDED_BYTES = 1536; // Default value for max size to be used in circuit\nexports.CIRCOM_BIGINT_N = 121;\nexports.CIRCOM_BIGINT_K = 17;\nexports.CIRCOM_LEVELS = 30;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHprLWVtYWlsL2hlbHBlcnMvZGlzdC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcsdUJBQXVCLEdBQUcsdUJBQXVCLEdBQUcsNkJBQTZCLEdBQUcsK0JBQStCLEdBQUcsNEJBQTRCO0FBQzFLLDRCQUE0QjtBQUM1QiwrQkFBK0IsU0FBUztBQUN4Qyw2QkFBNkIsU0FBUztBQUN0Qyx1QkFBdUI7QUFDdkIsdUJBQXVCO0FBQ3ZCLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2F3YXJlLXByb2plY3QvLi9ub2RlX21vZHVsZXMvQHprLWVtYWlsL2hlbHBlcnMvZGlzdC9jb25zdGFudHMuanM/MTRjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ0lSQ09NX0xFVkVMUyA9IGV4cG9ydHMuQ0lSQ09NX0JJR0lOVF9LID0gZXhwb3J0cy5DSVJDT01fQklHSU5UX04gPSBleHBvcnRzLk1BWF9CT0RZX1BBRERFRF9CWVRFUyA9IGV4cG9ydHMuTUFYX0hFQURFUl9QQURERURfQllURVMgPSBleHBvcnRzLkNJUkNPTV9GSUVMRF9NT0RVTFVTID0gdm9pZCAwO1xuZXhwb3J0cy5DSVJDT01fRklFTERfTU9EVUxVUyA9IDIxODg4MjQyODcxODM5Mjc1MjIyMjQ2NDA1NzQ1MjU3Mjc1MDg4NTQ4MzY0NDAwNDE2MDM0MzQzNjk4MjA0MTg2NTc1ODA4NDk1NjE3bjtcbmV4cG9ydHMuTUFYX0hFQURFUl9QQURERURfQllURVMgPSAxMDI0OyAvLyBEZWZhdWx0IHZhbHVlIGZvciBtYXggc2l6ZSB0byBiZSB1c2VkIGluIGNpcmN1aXRcbmV4cG9ydHMuTUFYX0JPRFlfUEFEREVEX0JZVEVTID0gMTUzNjsgLy8gRGVmYXVsdCB2YWx1ZSBmb3IgbWF4IHNpemUgdG8gYmUgdXNlZCBpbiBjaXJjdWl0XG5leHBvcnRzLkNJUkNPTV9CSUdJTlRfTiA9IDEyMTtcbmV4cG9ydHMuQ0lSQ09NX0JJR0lOVF9LID0gMTc7XG5leHBvcnRzLkNJUkNPTV9MRVZFTFMgPSAzMDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-email/helpers/dist/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-email/helpers/dist/lib/fast-sha256.js":
/*!****************************************************************!*\
  !*** ./node_modules/@zk-email/helpers/dist/lib/fast-sha256.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// This is modified version of https://github.com/dchest/fast-sha256-js/blob/master/src/sha256.ts\n// One modification is adding `cacheState` to Hash class (for partial SHA)\n// TODO: Fork the repo and make the changes; consider upstream to original repo\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HMAC = exports.Hash = exports.blockSize = exports.digestLength = void 0;\nexports.hash = hash;\nexports.hmac = hmac;\nexports.hkdf = hkdf;\nexports.pbkdf2 = pbkdf2;\n// SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n//\n// Written in 2014-2016 by Dmitry Chestnykh.\n// Public domain, no warranty.\n//\n// Functions (accept and return Uint8Arrays):\n//\n//   sha256(message) -> hash\n//   sha256.hmac(key, message) -> mac\n//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n//\n//  Classes:\n//\n//   new sha256.Hash()\n//   new sha256.HMAC(key)\n//\nexports.digestLength = 32;\nexports.blockSize = 64;\n// SHA-256 constants\nconst K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98,\n    0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,\n    0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8,\n    0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,\n    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7,\n    0xc67178f2,\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    let a, b, c, d, e, f, g, h, u, i, j, t1, t2;\n    while (len >= 64) {\n        a = v[0];\n        b = v[1];\n        c = v[2];\n        d = v[3];\n        e = v[4];\n        f = v[5];\n        g = v[6];\n        h = v[7];\n        for (i = 0; i < 16; i++) {\n            j = pos + i * 4;\n            w[i] = ((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) | ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff);\n        }\n        for (i = 16; i < 64; i++) {\n            u = w[i - 2];\n            t1 = ((u >>> 17) | (u << (32 - 17))) ^ ((u >>> 19) | (u << (32 - 19))) ^ (u >>> 10);\n            u = w[i - 15];\n            t2 = ((u >>> 7) | (u << (32 - 7))) ^ ((u >>> 18) | (u << (32 - 18))) ^ (u >>> 3);\n            w[i] = ((t1 + w[i - 7]) | 0) + ((t2 + w[i - 16]) | 0);\n        }\n        for (i = 0; i < 64; i++) {\n            t1 =\n                ((((((e >>> 6) | (e << (32 - 6))) ^ ((e >>> 11) | (e << (32 - 11))) ^ ((e >>> 25) | (e << (32 - 25)))) +\n                    ((e & f) ^ (~e & g))) |\n                    0) +\n                    ((h + ((K[i] + w[i]) | 0)) | 0)) |\n                    0;\n            t2 =\n                ((((a >>> 2) | (a << (32 - 2))) ^ ((a >>> 13) | (a << (32 - 13))) ^ ((a >>> 22) | (a << (32 - 22)))) +\n                    ((a & b) ^ (a & c) ^ (b & c))) |\n                    0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\n// Hash implements SHA256 hash algorithm.\nclass Hash {\n    constructor() {\n        this.digestLength = exports.digestLength;\n        this.blockSize = exports.blockSize;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this.state = new Int32Array(8); // hash state\n        this.temp = new Int32Array(64); // temporary state\n        this.buffer = new Uint8Array(128); // buffer for data to hash\n        this.bufferLength = 0; // number of bytes in buffer\n        this.bytesHashed = 0; // number of total bytes hashed\n        this.finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    // Resets hash state making it possible\n    // to re-use this instance to hash other data.\n    reset() {\n        this.state[0] = 0x6a09e667;\n        this.state[1] = 0xbb67ae85;\n        this.state[2] = 0x3c6ef372;\n        this.state[3] = 0xa54ff53a;\n        this.state[4] = 0x510e527f;\n        this.state[5] = 0x9b05688c;\n        this.state[6] = 0x1f83d9ab;\n        this.state[7] = 0x5be0cd19;\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        this.finished = false;\n        return this;\n    }\n    // Cleans internal buffers and re-initializes hash state.\n    clean() {\n        for (let i = 0; i < this.buffer.length; i++) {\n            this.buffer[i] = 0;\n        }\n        for (let i = 0; i < this.temp.length; i++) {\n            this.temp[i] = 0;\n        }\n        this.reset();\n    }\n    // Updates hash state with the given data.\n    //\n    // Optionally, length of the data can be specified to hash\n    // fewer bytes than data.length.\n    //\n    // Throws error when trying to update already finalized hash:\n    // instance must be reset to use it again.\n    update(data, dataLength = data.length) {\n        if (this.finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        let dataPos = 0;\n        this.bytesHashed += dataLength;\n        if (this.bufferLength > 0) {\n            while (this.bufferLength < 64 && dataLength > 0) {\n                this.buffer[this.bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this.bufferLength === 64) {\n                hashBlocks(this.temp, this.state, this.buffer, 0, 64);\n                this.bufferLength = 0;\n            }\n        }\n        if (dataLength >= 64) {\n            dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);\n            dataLength %= 64;\n        }\n        while (dataLength > 0) {\n            this.buffer[this.bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    }\n    // Finalizes hash state and puts hash into out.\n    //\n    // If hash was already finalized, puts the same value.\n    finish(out) {\n        if (!this.finished) {\n            const bytesHashed = this.bytesHashed;\n            const left = this.bufferLength;\n            const bitLenHi = (bytesHashed / 0x20000000) | 0;\n            const bitLenLo = bytesHashed << 3;\n            const padLength = bytesHashed % 64 < 56 ? 64 : 128;\n            this.buffer[left] = 0x80;\n            for (let i = left + 1; i < padLength - 8; i++) {\n                this.buffer[i] = 0;\n            }\n            this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff;\n            this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff;\n            this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff;\n            this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff;\n            this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff;\n            this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff;\n            this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff;\n            this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff;\n            hashBlocks(this.temp, this.state, this.buffer, 0, padLength);\n            this.finished = true;\n        }\n        for (let i = 0; i < 8; i++) {\n            out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;\n            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n        }\n        return this;\n    }\n    // Returns the final hash digest.\n    digest() {\n        const out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    }\n    // Returns the current hash state.\n    cacheState() {\n        const out32 = new Uint32Array(this.state.length);\n        this._saveState(out32);\n        const out = new Uint8Array(this.state.length * 4);\n        for (let i = 0; i < 8; i++) {\n            out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;\n            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n        }\n        return out;\n    }\n    // Internal function for use in HMAC for optimization.\n    _saveState(out) {\n        for (let i = 0; i < this.state.length; i++) {\n            out[i] = this.state[i];\n        }\n    }\n    // Internal function for use in HMAC for optimization.\n    _restoreState(from, bytesHashed) {\n        for (let i = 0; i < this.state.length; i++) {\n            this.state[i] = from[i];\n        }\n        this.bytesHashed = bytesHashed;\n        this.finished = false;\n        this.bufferLength = 0;\n    }\n}\nexports.Hash = Hash;\n// HMAC implements HMAC-SHA256 message authentication algorithm.\nclass HMAC {\n    constructor(key) {\n        this.inner = new Hash();\n        this.outer = new Hash();\n        this.blockSize = this.inner.blockSize;\n        this.digestLength = this.inner.digestLength;\n        const pad = new Uint8Array(this.blockSize);\n        if (key.length > this.blockSize) {\n            new Hash().update(key).finish(pad).clean();\n        }\n        else {\n            for (let i = 0; i < key.length; i++) {\n                pad[i] = key[i];\n            }\n        }\n        for (let i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36;\n        }\n        this.inner.update(pad);\n        for (let i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36 ^ 0x5c;\n        }\n        this.outer.update(pad);\n        this.istate = new Uint32Array(8);\n        this.ostate = new Uint32Array(8);\n        this.inner._saveState(this.istate);\n        this.outer._saveState(this.ostate);\n        for (let i = 0; i < pad.length; i++) {\n            pad[i] = 0;\n        }\n    }\n    // Returns HMAC state to the state initialized with key\n    // to make it possible to run HMAC over the other data with the same\n    // key without creating a new instance.\n    reset() {\n        this.inner._restoreState(this.istate, this.inner.blockSize);\n        this.outer._restoreState(this.ostate, this.outer.blockSize);\n        return this;\n    }\n    // Cleans HMAC state.\n    clean() {\n        for (let i = 0; i < this.istate.length; i++) {\n            this.ostate[i] = this.istate[i] = 0;\n        }\n        this.inner.clean();\n        this.outer.clean();\n    }\n    // Updates state with provided data.\n    update(data) {\n        this.inner.update(data);\n        return this;\n    }\n    // Finalizes HMAC and puts the result in out.\n    finish(out) {\n        if (this.outer.finished) {\n            this.outer.finish(out);\n        }\n        else {\n            this.inner.finish(out);\n            this.outer.update(out, this.digestLength).finish(out);\n        }\n        return this;\n    }\n    // Returns message authentication code.\n    digest() {\n        const out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    }\n}\nexports.HMAC = HMAC;\n// Returns SHA256 hash of data.\nfunction hash(data) {\n    const h = new Hash().update(data);\n    const digest = h.digest();\n    h.clean();\n    return digest;\n}\n// Function hash is both available as module.hash and as default export.\nexports[\"default\"] = hash;\n// Returns HMAC-SHA256 of data under the key.\nfunction hmac(key, data) {\n    const h = new HMAC(key).update(data);\n    const digest = h.digest();\n    h.clean();\n    return digest;\n}\n// Fills hkdf buffer like this:\n// T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\nfunction fillBuffer(buffer, hmac, info, counter) {\n    // Counter is a byte value: check if it overflowed.\n    const num = counter[0];\n    if (num === 0) {\n        throw new Error('hkdf: cannot expand more');\n    }\n    // Prepare HMAC instance for new data with old key.\n    hmac.reset();\n    // Hash in previous output if it was generated\n    // (i.e. counter is greater than 1).\n    if (num > 1) {\n        hmac.update(buffer);\n    }\n    // Hash in info if it exists.\n    if (info) {\n        hmac.update(info);\n    }\n    // Hash in the counter.\n    hmac.update(counter);\n    // Output result to buffer and clean HMAC instance.\n    hmac.finish(buffer);\n    // Increment counter inside typed array, this works properly.\n    counter[0]++;\n}\nconst hkdfSalt = new Uint8Array(exports.digestLength); // Filled with zeroes.\nfunction hkdf(key, salt = hkdfSalt, info, length = 32) {\n    const counter = new Uint8Array([1]);\n    // HKDF-Extract uses salt as HMAC key, and key as data.\n    const okm = hmac(salt, key);\n    // Initialize HMAC for expanding with extracted key.\n    // Ensure no collisions with `hmac` function.\n    const hmac_ = new HMAC(okm);\n    // Allocate buffer.\n    const buffer = new Uint8Array(hmac_.digestLength);\n    let bufpos = buffer.length;\n    const out = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n        if (bufpos === buffer.length) {\n            fillBuffer(buffer, hmac_, info, counter);\n            bufpos = 0;\n        }\n        out[i] = buffer[bufpos++];\n    }\n    hmac_.clean();\n    buffer.fill(0);\n    counter.fill(0);\n    return out;\n}\n// Derives a key from password and salt using PBKDF2-HMAC-SHA256\n// with the given number of iterations.\n//\n// The number of bytes returned is equal to dkLen.\n//\n// (For better security, avoid dkLen greater than hash length - 32 bytes).\nfunction pbkdf2(password, salt, iterations, dkLen) {\n    const prf = new HMAC(password);\n    const len = prf.digestLength;\n    const ctr = new Uint8Array(4);\n    const t = new Uint8Array(len);\n    const u = new Uint8Array(len);\n    const dk = new Uint8Array(dkLen);\n    for (let i = 0; i * len < dkLen; i++) {\n        let c = i + 1;\n        ctr[0] = (c >>> 24) & 0xff;\n        ctr[1] = (c >>> 16) & 0xff;\n        ctr[2] = (c >>> 8) & 0xff;\n        ctr[3] = (c >>> 0) & 0xff;\n        prf.reset();\n        prf.update(salt);\n        prf.update(ctr);\n        prf.finish(u);\n        for (let j = 0; j < len; j++) {\n            t[j] = u[j];\n        }\n        for (let j = 2; j <= iterations; j++) {\n            prf.reset();\n            prf.update(u).finish(u);\n            for (let k = 0; k < len; k++) {\n                t[k] ^= u[k];\n            }\n        }\n        for (let j = 0; j < len && i * len + j < dkLen; j++) {\n            dk[i * len + j] = t[j];\n        }\n    }\n    for (let i = 0; i < len; i++) {\n        t[i] = u[i] = 0;\n    }\n    for (let i = 0; i < 4; i++) {\n        ctr[i] = 0;\n    }\n    prf.clean();\n    return dk;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-email/helpers/dist/lib/fast-sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@zk-email/helpers/dist/sha-utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@zk-email/helpers/dist/sha-utils.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.findIndexInUint8Array = findIndexInUint8Array;\nexports.padUint8ArrayWithZeros = padUint8ArrayWithZeros;\nexports.generatePartialSHA = generatePartialSHA;\nexports.shaHash = shaHash;\nexports.partialSha = partialSha;\nexports.sha256Pad = sha256Pad;\nconst CryptoJS = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nconst binary_format_1 = __webpack_require__(/*! ./binary-format */ \"(ssr)/./node_modules/@zk-email/helpers/dist/binary-format.js\");\nconst fast_sha256_1 = __webpack_require__(/*! ./lib/fast-sha256 */ \"(ssr)/./node_modules/@zk-email/helpers/dist/lib/fast-sha256.js\");\nfunction findIndexInUint8Array(array, selector) {\n    let i = 0;\n    let j = 0;\n    while (i < array.length) {\n        if (array[i] === selector[j]) {\n            j++;\n            if (j === selector.length) {\n                return i - j + 1;\n            }\n        }\n        else {\n            j = 0;\n        }\n        i++;\n    }\n    return -1;\n}\nfunction padUint8ArrayWithZeros(array, length) {\n    while (array.length < length) {\n        // eslint-disable-next-line no-param-reassign\n        array = (0, binary_format_1.mergeUInt8Arrays)(array, (0, binary_format_1.int8toBytes)(0));\n    }\n    return array;\n}\nfunction generatePartialSHA({ body, bodyLength, selectorString, // String to split the body\nmaxRemainingBodyLength, // Maximum allowed length of the body after the selector\n }) {\n    let selectorIndex = 0;\n    if (selectorString) {\n        const selector = new TextEncoder().encode(selectorString);\n        selectorIndex = findIndexInUint8Array(body, selector);\n        if (selectorIndex === -1) {\n            throw new Error(`SHA precompute selector \"${selectorString}\" not found in the body`);\n        }\n    }\n    const shaCutoffIndex = Math.floor(selectorIndex / 64) * 64;\n    const precomputeText = body.slice(0, shaCutoffIndex);\n    let bodyRemaining = body.slice(shaCutoffIndex);\n    const bodyRemainingLength = bodyLength - precomputeText.length;\n    if (bodyRemainingLength > maxRemainingBodyLength) {\n        throw new Error(`Remaining body ${bodyRemainingLength} after the selector is longer than max (${maxRemainingBodyLength})`);\n    }\n    if (bodyRemaining.length % 64 !== 0) {\n        throw new Error('Remaining body was not padded correctly with int64s');\n    }\n    bodyRemaining = padUint8ArrayWithZeros(bodyRemaining, maxRemainingBodyLength);\n    const precomputedSha = partialSha(precomputeText, shaCutoffIndex);\n    return {\n        precomputedSha,\n        bodyRemaining,\n        bodyRemainingLength,\n    };\n}\nfunction shaHash(str) {\n    return CryptoJS.createHash('sha256').update(str).digest();\n}\nfunction partialSha(msg, msgLen) {\n    const shaGadget = new fast_sha256_1.Hash();\n    return shaGadget.update(msg, msgLen).cacheState();\n}\n// Puts an end selector, a bunch of 0s, then the length, then fill the rest with 0s.\nfunction sha256Pad(message, maxShaBytes) {\n    const msgLen = message.length * 8; // bytes to bits\n    const msgLenBytes = (0, binary_format_1.int64toBytes)(msgLen);\n    let res = (0, binary_format_1.mergeUInt8Arrays)(message, (0, binary_format_1.int8toBytes)(2 ** 7)); // Add the 1 on the end, length 505\n    // while ((prehash_prepad_m.length * 8 + length_in_bytes.length * 8) % 512 !== 0) {\n    while ((res.length * 8 + msgLenBytes.length * 8) % 512 !== 0) {\n        res = (0, binary_format_1.mergeUInt8Arrays)(res, (0, binary_format_1.int8toBytes)(0));\n    }\n    res = (0, binary_format_1.mergeUInt8Arrays)(res, msgLenBytes);\n    (0, binary_format_1.assert)((res.length * 8) % 512 === 0, 'Padding did not complete properly!');\n    const messageLen = res.length;\n    while (res.length < maxShaBytes) {\n        res = (0, binary_format_1.mergeUInt8Arrays)(res, (0, binary_format_1.int64toBytes)(0));\n    }\n    (0, binary_format_1.assert)(res.length === maxShaBytes, `Padding to max length did not complete properly! Your padded message is ${res.length} long but max is ${maxShaBytes}!`);\n    return [res, messageLen];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@zk-email/helpers/dist/sha-utils.js\n");

/***/ })

};
;